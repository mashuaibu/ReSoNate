
STM32F411E-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000694  20000000  08007224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000e468  20000694  080078b8  00020694  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000eafc  080078b8  0002eafc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ac93  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043d4  00000000  00000000  0003b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000be65  00000000  00000000  0003f72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e78  00000000  00000000  0004b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001498  00000000  00000000  0004c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001867d  00000000  00000000  0004d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001aaba  00000000  00000000  00065f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00090f38  00000000  00000000  000809d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000d2  00000000  00000000  0011190f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d48  00000000  00000000  001119e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000694 	.word	0x20000694
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007114 	.word	0x08007114

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000698 	.word	0x20000698
 80001d4:	08007114 	.word	0x08007114

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr

080004d4 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80004d4:	2000      	movs	r0, #0
 80004d6:	4770      	bx	lr

080004d8 <cs43l22_SetVolume>:
{
 80004d8:	b507      	push	{r0, r1, r2, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80004da:	2964      	cmp	r1, #100	; 0x64
 80004dc:	bf9b      	ittet	ls
 80004de:	2264      	movls	r2, #100	; 0x64
 80004e0:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
 80004e4:	22ff      	movhi	r2, #255	; 0xff
 80004e6:	fbb1 f2f2 	udivls	r2, r1, r2
 80004ea:	bf98      	it	ls
 80004ec:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80004ee:	3219      	adds	r2, #25
 80004f0:	b2c0      	uxtb	r0, r0
 80004f2:	b2d2      	uxtb	r2, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80004f4:	2120      	movs	r1, #32
 80004f6:	9201      	str	r2, [sp, #4]
 80004f8:	9000      	str	r0, [sp, #0]
 80004fa:	f001 f85c 	bl	80015b6 <AUDIO_IO_Write>
 80004fe:	9800      	ldr	r0, [sp, #0]
 8000500:	9a01      	ldr	r2, [sp, #4]
 8000502:	2121      	movs	r1, #33	; 0x21
 8000504:	f001 f857 	bl	80015b6 <AUDIO_IO_Write>
}
 8000508:	2000      	movs	r0, #0
 800050a:	b003      	add	sp, #12
 800050c:	f85d fb04 	ldr.w	pc, [sp], #4

08000510 <cs43l22_Init>:
{
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000514:	b2f4      	uxtb	r4, r6
{
 8000516:	460d      	mov	r5, r1
 8000518:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 800051a:	f001 f819 	bl	8001550 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 800051e:	2201      	movs	r2, #1
 8000520:	2102      	movs	r1, #2
 8000522:	4620      	mov	r0, r4
 8000524:	f001 f847 	bl	80015b6 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000528:	1e6a      	subs	r2, r5, #1
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <cs43l22_Init+0xc4>)
 800052c:	2a03      	cmp	r2, #3
 800052e:	d84e      	bhi.n	80005ce <cs43l22_Init+0xbe>
 8000530:	e8df f002 	tbb	[pc, r2]
 8000534:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8000538:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 800053a:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800053c:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800053e:	2104      	movs	r1, #4
 8000540:	4620      	mov	r0, r4
 8000542:	f001 f838 	bl	80015b6 <AUDIO_IO_Write>
 8000546:	2281      	movs	r2, #129	; 0x81
 8000548:	2105      	movs	r1, #5
 800054a:	4620      	mov	r0, r4
 800054c:	f001 f833 	bl	80015b6 <AUDIO_IO_Write>
 8000550:	2204      	movs	r2, #4
 8000552:	2106      	movs	r1, #6
 8000554:	4620      	mov	r0, r4
 8000556:	f001 f82e 	bl	80015b6 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800055a:	4630      	mov	r0, r6
 800055c:	4639      	mov	r1, r7
 800055e:	f7ff ffbb 	bl	80004d8 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000562:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000564:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000566:	d00e      	beq.n	8000586 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000568:	2206      	movs	r2, #6
 800056a:	210f      	movs	r1, #15
 800056c:	4620      	mov	r0, r4
 800056e:	f001 f822 	bl	80015b6 <AUDIO_IO_Write>
 8000572:	2200      	movs	r2, #0
 8000574:	2124      	movs	r1, #36	; 0x24
 8000576:	4620      	mov	r0, r4
 8000578:	f001 f81d 	bl	80015b6 <AUDIO_IO_Write>
 800057c:	2200      	movs	r2, #0
 800057e:	2125      	movs	r1, #37	; 0x25
 8000580:	4620      	mov	r0, r4
 8000582:	f001 f818 	bl	80015b6 <AUDIO_IO_Write>
 8000586:	4620      	mov	r0, r4
 8000588:	2200      	movs	r2, #0
 800058a:	210a      	movs	r1, #10
 800058c:	f001 f813 	bl	80015b6 <AUDIO_IO_Write>
 8000590:	4620      	mov	r0, r4
 8000592:	2204      	movs	r2, #4
 8000594:	210e      	movs	r1, #14
 8000596:	f001 f80e 	bl	80015b6 <AUDIO_IO_Write>
 800059a:	4620      	mov	r0, r4
 800059c:	2200      	movs	r2, #0
 800059e:	2127      	movs	r1, #39	; 0x27
 80005a0:	f001 f809 	bl	80015b6 <AUDIO_IO_Write>
 80005a4:	4620      	mov	r0, r4
 80005a6:	220f      	movs	r2, #15
 80005a8:	211f      	movs	r1, #31
 80005aa:	f001 f804 	bl	80015b6 <AUDIO_IO_Write>
 80005ae:	4620      	mov	r0, r4
 80005b0:	220a      	movs	r2, #10
 80005b2:	211a      	movs	r1, #26
 80005b4:	f000 ffff 	bl	80015b6 <AUDIO_IO_Write>
 80005b8:	4620      	mov	r0, r4
 80005ba:	220a      	movs	r2, #10
 80005bc:	211b      	movs	r1, #27
 80005be:	f000 fffa 	bl	80015b6 <AUDIO_IO_Write>
}
 80005c2:	4630      	mov	r0, r6
 80005c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80005c6:	22af      	movs	r2, #175	; 0xaf
 80005c8:	e7b7      	b.n	800053a <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80005ca:	22aa      	movs	r2, #170	; 0xaa
 80005cc:	e7b5      	b.n	800053a <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80005ce:	2205      	movs	r2, #5
 80005d0:	e7b3      	b.n	800053a <cs43l22_Init+0x2a>
 80005d2:	bf00      	nop
 80005d4:	200006b0 	.word	0x200006b0

080005d8 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 80005d8:	f000 bfec 	b.w	80015b4 <AUDIO_IO_DeInit>

080005dc <cs43l22_ReadID>:
{
 80005dc:	b510      	push	{r4, lr}
 80005de:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 80005e0:	f000 ffb6 	bl	8001550 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80005e4:	2101      	movs	r1, #1
 80005e6:	b2e0      	uxtb	r0, r4
 80005e8:	f000 ffe7 	bl	80015ba <AUDIO_IO_Read>
}
 80005ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80005f0:	bd10      	pop	{r4, pc}

080005f2 <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 80005f2:	b507      	push	{r0, r1, r2, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80005f4:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	2104      	movs	r1, #4
 80005fa:	9001      	str	r0, [sp, #4]
 80005fc:	f000 ffdb 	bl	80015b6 <AUDIO_IO_Write>
 8000600:	9801      	ldr	r0, [sp, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	2122      	movs	r1, #34	; 0x22
 8000606:	f000 ffd6 	bl	80015b6 <AUDIO_IO_Write>
 800060a:	9801      	ldr	r0, [sp, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	2123      	movs	r1, #35	; 0x23
}
 8000610:	b003      	add	sp, #12
 8000612:	f85d eb04 	ldr.w	lr, [sp], #4
  AUDIO_IO_Write(Addr, Reg, Value);
 8000616:	f000 bfce 	b.w	80015b6 <AUDIO_IO_Write>
	...

0800061c <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 800061c:	2901      	cmp	r1, #1
{
 800061e:	b507      	push	{r0, r1, r2, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8000620:	d105      	bne.n	800062e <cs43l22_SetMute+0x12>
 8000622:	f7ff ffe6 	bl	80005f2 <cs43l22_SetMute.part.0>
}
 8000626:	2000      	movs	r0, #0
 8000628:	b003      	add	sp, #12
 800062a:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800062e:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000630:	2200      	movs	r2, #0
 8000632:	2122      	movs	r1, #34	; 0x22
 8000634:	9001      	str	r0, [sp, #4]
 8000636:	f000 ffbe 	bl	80015b6 <AUDIO_IO_Write>
 800063a:	9801      	ldr	r0, [sp, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	2123      	movs	r1, #35	; 0x23
 8000640:	f000 ffb9 	bl	80015b6 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <cs43l22_SetMute+0x38>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8000646:	9801      	ldr	r0, [sp, #4]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000648:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800064a:	2104      	movs	r1, #4
 800064c:	f000 ffb3 	bl	80015b6 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8000650:	e7e9      	b.n	8000626 <cs43l22_SetMute+0xa>
 8000652:	bf00      	nop
 8000654:	200006b0 	.word	0x200006b0

08000658 <cs43l22_Resume>:
{
 8000658:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 800065a:	2600      	movs	r6, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800065c:	4631      	mov	r1, r6
{
 800065e:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8000660:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000662:	f7ff ffdb 	bl	800061c <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8000666:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000668:	4605      	mov	r5, r0
  for(index = 0x00; index < 0xFF; index++);
 800066a:	9b03      	ldr	r3, [sp, #12]
 800066c:	2bfe      	cmp	r3, #254	; 0xfe
 800066e:	d90e      	bls.n	800068e <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <cs43l22_Resume+0x40>)
 8000672:	b2e0      	uxtb	r0, r4
 8000674:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000676:	9001      	str	r0, [sp, #4]
 8000678:	2104      	movs	r1, #4
 800067a:	f000 ff9c 	bl	80015b6 <AUDIO_IO_Write>
 800067e:	9801      	ldr	r0, [sp, #4]
 8000680:	229e      	movs	r2, #158	; 0x9e
 8000682:	2102      	movs	r1, #2
 8000684:	f000 ff97 	bl	80015b6 <AUDIO_IO_Write>
}
 8000688:	4628      	mov	r0, r5
 800068a:	b004      	add	sp, #16
 800068c:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 800068e:	9b03      	ldr	r3, [sp, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	9303      	str	r3, [sp, #12]
 8000694:	e7e9      	b.n	800066a <cs43l22_Resume+0x12>
 8000696:	bf00      	nop
 8000698:	200006b0 	.word	0x200006b0

0800069c <cs43l22_Pause>:
{  
 800069c:	b510      	push	{r4, lr}
 800069e:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80006a0:	f7ff ffa7 	bl	80005f2 <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80006a4:	b2e0      	uxtb	r0, r4
 80006a6:	2201      	movs	r2, #1
 80006a8:	2102      	movs	r1, #2
 80006aa:	f000 ff84 	bl	80015b6 <AUDIO_IO_Write>
}
 80006ae:	2000      	movs	r0, #0
 80006b0:	bd10      	pop	{r4, pc}
	...

080006b4 <cs43l22_Stop>:
{
 80006b4:	b513      	push	{r0, r1, r4, lr}
 80006b6:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80006b8:	f7ff ff9b 	bl	80005f2 <cs43l22_SetMute.part.0>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80006bc:	b2e0      	uxtb	r0, r4
  AUDIO_IO_Write(Addr, Reg, Value);
 80006be:	2204      	movs	r2, #4
 80006c0:	210e      	movs	r1, #14
 80006c2:	9001      	str	r0, [sp, #4]
 80006c4:	f000 ff77 	bl	80015b6 <AUDIO_IO_Write>
 80006c8:	9801      	ldr	r0, [sp, #4]
 80006ca:	229f      	movs	r2, #159	; 0x9f
 80006cc:	2102      	movs	r1, #2
 80006ce:	f000 ff72 	bl	80015b6 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80006d2:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <cs43l22_Stop+0x2c>)
 80006d4:	2201      	movs	r2, #1
}
 80006d6:	2000      	movs	r0, #0
  Is_cs43l22_Stop = 1;
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	b002      	add	sp, #8
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000

080006e4 <cs43l22_Play>:
{
 80006e4:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 80006e6:	4d0d      	ldr	r5, [pc, #52]	; (800071c <cs43l22_Play+0x38>)
 80006e8:	782b      	ldrb	r3, [r5, #0]
 80006ea:	2b01      	cmp	r3, #1
{
 80006ec:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 80006ee:	d113      	bne.n	8000718 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80006f0:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80006f2:	2206      	movs	r2, #6
 80006f4:	210e      	movs	r1, #14
 80006f6:	4630      	mov	r0, r6
 80006f8:	f000 ff5d 	bl	80015b6 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006fc:	2100      	movs	r1, #0
 80006fe:	4620      	mov	r0, r4
 8000700:	f7ff ff8c 	bl	800061c <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000704:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000706:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000708:	2102      	movs	r1, #2
 800070a:	4630      	mov	r0, r6
 800070c:	f000 ff53 	bl	80015b6 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	702b      	strb	r3, [r5, #0]
}
 8000714:	4620      	mov	r0, r4
 8000716:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8000718:	2400      	movs	r4, #0
  return counter;  
 800071a:	e7fb      	b.n	8000714 <cs43l22_Play+0x30>
 800071c:	20000000 	.word	0x20000000

08000720 <cs43l22_SetOutputMode>:
  switch (Output) 
 8000720:	3901      	subs	r1, #1
{
 8000722:	b510      	push	{r4, lr}
 8000724:	b2c0      	uxtb	r0, r0
 8000726:	4c10      	ldr	r4, [pc, #64]	; (8000768 <cs43l22_SetOutputMode+0x48>)
 8000728:	2903      	cmp	r1, #3
 800072a:	d817      	bhi.n	800075c <cs43l22_SetOutputMode+0x3c>
 800072c:	e8df f001 	tbb	[pc, r1]
 8000730:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8000734:	22fa      	movs	r2, #250	; 0xfa
 8000736:	2104      	movs	r1, #4
 8000738:	f000 ff3d 	bl	80015b6 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 800073c:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 800073e:	7023      	strb	r3, [r4, #0]
}
 8000740:	2000      	movs	r0, #0
 8000742:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000744:	22af      	movs	r2, #175	; 0xaf
 8000746:	2104      	movs	r1, #4
 8000748:	f000 ff35 	bl	80015b6 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 800074c:	23af      	movs	r3, #175	; 0xaf
 800074e:	e7f6      	b.n	800073e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000750:	22aa      	movs	r2, #170	; 0xaa
 8000752:	2104      	movs	r1, #4
 8000754:	f000 ff2f 	bl	80015b6 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8000758:	23aa      	movs	r3, #170	; 0xaa
 800075a:	e7f0      	b.n	800073e <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 800075c:	2205      	movs	r2, #5
 800075e:	2104      	movs	r1, #4
 8000760:	f000 ff29 	bl	80015b6 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000764:	2305      	movs	r3, #5
 8000766:	e7ea      	b.n	800073e <cs43l22_SetOutputMode+0x1e>
 8000768:	200006b0 	.word	0x200006b0

0800076c <I3G4250D_DeInit>:
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
}
 800076c:	4770      	bx	lr

0800076e <I3G4250D_Init>:
{
 800076e:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8000770:	2300      	movs	r3, #0
{
 8000772:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000774:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 8000778:	f000 fe6a 	bl	8001450 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800077c:	f10d 0007 	add.w	r0, sp, #7
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 8000784:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000788:	f000 fe9c 	bl	80014c4 <GYRO_IO_Write>
  ctrl = (uint8_t)(InitStruct >> 8);
 800078c:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800078e:	2201      	movs	r2, #1
 8000790:	2123      	movs	r1, #35	; 0x23
 8000792:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(InitStruct >> 8);
 8000796:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800079a:	f000 fe93 	bl	80014c4 <GYRO_IO_Write>
}
 800079e:	b002      	add	sp, #8
 80007a0:	bd10      	pop	{r4, pc}

080007a2 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 80007a2:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80007a4:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 80007a6:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80007aa:	2120      	movs	r1, #32
 80007ac:	f10d 0007 	add.w	r0, sp, #7
 80007b0:	f000 fe88 	bl	80014c4 <GYRO_IO_Write>
}
 80007b4:	b003      	add	sp, #12
 80007b6:	f85d fb04 	ldr.w	pc, [sp], #4

080007ba <I3G4250D_ReadID>:
{
 80007ba:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 80007bc:	f000 fe48 	bl	8001450 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 80007c0:	f10d 0007 	add.w	r0, sp, #7
 80007c4:	2201      	movs	r2, #1
 80007c6:	210f      	movs	r1, #15
 80007c8:	f000 fe9e 	bl	8001508 <GYRO_IO_Read>
}
 80007cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80007d0:	b003      	add	sp, #12
 80007d2:	f85d fb04 	ldr.w	pc, [sp], #4

080007d6 <I3G4250D_RebootCmd>:
{
 80007d6:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	f10d 0007 	add.w	r0, sp, #7
 80007de:	2124      	movs	r1, #36	; 0x24
 80007e0:	f000 fe92 	bl	8001508 <GYRO_IO_Read>
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 80007e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80007e8:	2201      	movs	r2, #1
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 80007ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80007ee:	2124      	movs	r1, #36	; 0x24
 80007f0:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 80007f4:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80007f8:	f000 fe64 	bl	80014c4 <GYRO_IO_Write>
}
 80007fc:	b003      	add	sp, #12
 80007fe:	f85d fb04 	ldr.w	pc, [sp], #4

08000802 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000802:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000804:	2300      	movs	r3, #0
{
 8000806:	4604      	mov	r4, r0

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	f10d 0006 	add.w	r0, sp, #6
 800080e:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000810:	f88d 3006 	strb.w	r3, [sp, #6]
 8000814:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000818:	f000 fe76 	bl	8001508 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800081c:	f10d 0007 	add.w	r0, sp, #7
 8000820:	2201      	movs	r2, #1
 8000822:	2122      	movs	r1, #34	; 0x22
 8000824:	f000 fe70 	bl	8001508 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000828:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800082c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000830:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);

  ctrl3 &= 0xDF;
 8000834:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000838:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800083c:	ea43 0004 	orr.w	r0, r3, r4
 8000840:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	f10d 0006 	add.w	r0, sp, #6
 800084a:	2130      	movs	r1, #48	; 0x30
 800084c:	f000 fe3a 	bl	80014c4 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	2122      	movs	r1, #34	; 0x22
 8000854:	f10d 0007 	add.w	r0, sp, #7
 8000858:	f000 fe34 	bl	80014c4 <GYRO_IO_Write>
}
 800085c:	b002      	add	sp, #8
 800085e:	bd10      	pop	{r4, pc}

08000860 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8000860:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000862:	2201      	movs	r2, #1
{
 8000864:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8000866:	2122      	movs	r1, #34	; 0x22
 8000868:	f10d 0007 	add.w	r0, sp, #7
 800086c:	f000 fe4c 	bl	8001508 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8000870:	b96c      	cbnz	r4, 800088e <I3G4250D_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8000872:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8000876:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800087a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	2122      	movs	r1, #34	; 0x22
 8000882:	f10d 0007 	add.w	r0, sp, #7
 8000886:	f000 fe1d 	bl	80014c4 <GYRO_IO_Write>
}
 800088a:	b002      	add	sp, #8
 800088c:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800088e:	2c01      	cmp	r4, #1
 8000890:	d1f5      	bne.n	800087e <I3G4250D_EnableIT+0x1e>
    tmpreg &= 0xF7;
 8000892:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000896:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	e7ec      	b.n	800087a <I3G4250D_EnableIT+0x1a>

080008a0 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 80008a0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80008a2:	2201      	movs	r2, #1
{
 80008a4:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80008a6:	2122      	movs	r1, #34	; 0x22
 80008a8:	f10d 0007 	add.w	r0, sp, #7
 80008ac:	f000 fe2c 	bl	8001508 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80008b0:	b96c      	cbnz	r4, 80008ce <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 80008b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80008b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
 80008ba:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80008be:	2201      	movs	r2, #1
 80008c0:	2122      	movs	r1, #34	; 0x22
 80008c2:	f10d 0007 	add.w	r0, sp, #7
 80008c6:	f000 fdfd 	bl	80014c4 <GYRO_IO_Write>
}
 80008ca:	b002      	add	sp, #8
 80008cc:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 80008ce:	2c01      	cmp	r4, #1
 80008d0:	d1f5      	bne.n	80008be <I3G4250D_DisableIT+0x1e>
    tmpreg &= 0xF7;
 80008d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80008d6:	f023 0308 	bic.w	r3, r3, #8
 80008da:	e7ee      	b.n	80008ba <I3G4250D_DisableIT+0x1a>

080008dc <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80008dc:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80008de:	2201      	movs	r2, #1
{
 80008e0:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80008e2:	2121      	movs	r1, #33	; 0x21
 80008e4:	f10d 0007 	add.w	r0, sp, #7
 80008e8:	f000 fe0e 	bl	8001508 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80008ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80008f0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80008f4:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2121      	movs	r1, #33	; 0x21
 80008fa:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 80008fe:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8000902:	f000 fddf 	bl	80014c4 <GYRO_IO_Write>
}
 8000906:	b002      	add	sp, #8
 8000908:	bd10      	pop	{r4, pc}

0800090a <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800090a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800090c:	2201      	movs	r2, #1
{
 800090e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000910:	2124      	movs	r1, #36	; 0x24
 8000912:	f10d 0007 	add.w	r0, sp, #7
 8000916:	f000 fdf7 	bl	8001508 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800091a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800091e:	f020 0010 	bic.w	r0, r0, #16

  tmpreg |= HighPassFilterState;
 8000922:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	2124      	movs	r1, #36	; 0x24
 8000928:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800092c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000930:	f000 fdc8 	bl	80014c4 <GYRO_IO_Write>
}
 8000934:	b002      	add	sp, #8
 8000936:	bd10      	pop	{r4, pc}

08000938 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] = {0};
 800093c:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i = 0;

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	2123      	movs	r1, #35	; 0x23
{
 8000942:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000944:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] = {0};
 8000948:	9302      	str	r3, [sp, #8]
 800094a:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800094e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8000952:	f000 fdd9 	bl	8001508 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8000956:	2206      	movs	r2, #6
 8000958:	2128      	movs	r1, #40	; 0x28
 800095a:	a802      	add	r0, sp, #8
 800095c:	f000 fdd4 	bl	8001508 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8000960:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000964:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8000968:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800096c:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000970:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8000974:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000978:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800097c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000980:	d039      	beq.n	80009f6 <I3G4250D_ReadXYZAngRate+0xbe>
  }
  else
  {
    for (i = 0; i < 3; i++)
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8000982:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8000986:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800098a:	f8ad 6010 	strh.w	r6, [sp, #16]
 800098e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000992:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8000996:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800099a:	2b10      	cmp	r3, #16
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800099c:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80009a0:	d034      	beq.n	8000a0c <I3G4250D_ReadXYZAngRate+0xd4>
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	d035      	beq.n	8000a12 <I3G4250D_ReadXYZAngRate+0xda>
 80009a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000a18 <I3G4250D_ReadXYZAngRate+0xe0>
 80009aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000a1c <I3G4250D_ReadXYZAngRate+0xe4>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	bf08      	it	eq
 80009b2:	eef0 7a47 	vmoveq.f32	s15, s14
      break;
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80009b6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80009ba:	ee07 3a10 	vmov	s14, r3
 80009be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80009c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80009c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ca:	ed84 7a00 	vstr	s14, [r4]
 80009ce:	ee07 3a10 	vmov	s14, r3
 80009d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80009d6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80009da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009de:	ed84 7a01 	vstr	s14, [r4, #4]
 80009e2:	ee07 3a10 	vmov	s14, r3
 80009e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80009ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ee:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 80009f2:	b007      	add	sp, #28
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80009f6:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 80009fa:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80009fe:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000a02:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000a06:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000a0a:	e7c4      	b.n	8000996 <I3G4250D_ReadXYZAngRate+0x5e>
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8000a0c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000a20 <I3G4250D_ReadXYZAngRate+0xe8>
 8000a10:	e7d1      	b.n	80009b6 <I3G4250D_ReadXYZAngRate+0x7e>
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8000a12:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000a24 <I3G4250D_ReadXYZAngRate+0xec>
 8000a16:	e7ce      	b.n	80009b6 <I3G4250D_ReadXYZAngRate+0x7e>
 8000a18:	00000000 	.word	0x00000000
 8000a1c:	410c0000 	.word	0x410c0000
 8000a20:	418c0000 	.word	0x418c0000
 8000a24:	428c0000 	.word	0x428c0000

08000a28 <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 8000a28:	4770      	bx	lr

08000a2a <L3GD20_Init>:
{  
 8000a2a:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8000a2c:	2300      	movs	r3, #0
{  
 8000a2e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000a30:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 8000a34:	f000 fd0c 	bl	8001450 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000a38:	f10d 0007 	add.w	r0, sp, #7
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 8000a40:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000a44:	f000 fd3e 	bl	80014c4 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 8000a48:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2123      	movs	r1, #35	; 0x23
 8000a4e:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 8000a52:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000a56:	f000 fd35 	bl	80014c4 <GYRO_IO_Write>
}
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd10      	pop	{r4, pc}

08000a5e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000a5e:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000a60:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 8000a62:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000a66:	2120      	movs	r1, #32
 8000a68:	f10d 0007 	add.w	r0, sp, #7
 8000a6c:	f000 fd2a 	bl	80014c4 <GYRO_IO_Write>
}
 8000a70:	b003      	add	sp, #12
 8000a72:	f85d fb04 	ldr.w	pc, [sp], #4

08000a76 <L3GD20_ReadID>:
{
 8000a76:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 8000a78:	f000 fcea 	bl	8001450 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000a7c:	f10d 0007 	add.w	r0, sp, #7
 8000a80:	2201      	movs	r2, #1
 8000a82:	210f      	movs	r1, #15
 8000a84:	f000 fd40 	bl	8001508 <GYRO_IO_Read>
}
 8000a88:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000a8c:	b003      	add	sp, #12
 8000a8e:	f85d fb04 	ldr.w	pc, [sp], #4

08000a92 <L3GD20_RebootCmd>:
{
 8000a92:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f10d 0007 	add.w	r0, sp, #7
 8000a9a:	2124      	movs	r1, #36	; 0x24
 8000a9c:	f000 fd34 	bl	8001508 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000aa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000aa4:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000aaa:	2124      	movs	r1, #36	; 0x24
 8000aac:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000ab0:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000ab4:	f000 fd06 	bl	80014c4 <GYRO_IO_Write>
}
 8000ab8:	b003      	add	sp, #12
 8000aba:	f85d fb04 	ldr.w	pc, [sp], #4

08000abe <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000abe:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000ac0:	2300      	movs	r3, #0
{
 8000ac2:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f10d 0006 	add.w	r0, sp, #6
 8000aca:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000acc:	f88d 3006 	strb.w	r3, [sp, #6]
 8000ad0:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000ad4:	f000 fd18 	bl	8001508 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000ad8:	f10d 0007 	add.w	r0, sp, #7
 8000adc:	2201      	movs	r2, #1
 8000ade:	2122      	movs	r1, #34	; 0x22
 8000ae0:	f000 fd12 	bl	8001508 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000ae4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000ae8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aec:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 8000af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000af4:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 8000af8:	ea43 0004 	orr.w	r0, r3, r4
 8000afc:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f10d 0006 	add.w	r0, sp, #6
 8000b06:	2130      	movs	r1, #48	; 0x30
 8000b08:	f000 fcdc 	bl	80014c4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2122      	movs	r1, #34	; 0x22
 8000b10:	f10d 0007 	add.w	r0, sp, #7
 8000b14:	f000 fcd6 	bl	80014c4 <GYRO_IO_Write>
}
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd10      	pop	{r4, pc}

08000b1c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000b1c:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b1e:	2201      	movs	r2, #1
{  
 8000b20:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b22:	2122      	movs	r1, #34	; 0x22
 8000b24:	f10d 0007 	add.w	r0, sp, #7
 8000b28:	f000 fcee 	bl	8001508 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000b2c:	b96c      	cbnz	r4, 8000b4a <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000b36:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2122      	movs	r1, #34	; 0x22
 8000b3e:	f10d 0007 	add.w	r0, sp, #7
 8000b42:	f000 fcbf 	bl	80014c4 <GYRO_IO_Write>
}
 8000b46:	b002      	add	sp, #8
 8000b48:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 8000b4a:	2c01      	cmp	r4, #1
 8000b4c:	d1f5      	bne.n	8000b3a <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 8000b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b52:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	e7ec      	b.n	8000b36 <L3GD20_EnableIT+0x1a>

08000b5c <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000b5c:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b5e:	2201      	movs	r2, #1
{  
 8000b60:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b62:	2122      	movs	r1, #34	; 0x22
 8000b64:	f10d 0007 	add.w	r0, sp, #7
 8000b68:	f000 fcce 	bl	8001508 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000b6c:	b96c      	cbnz	r4, 8000b8a <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 8000b76:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2122      	movs	r1, #34	; 0x22
 8000b7e:	f10d 0007 	add.w	r0, sp, #7
 8000b82:	f000 fc9f 	bl	80014c4 <GYRO_IO_Write>
}
 8000b86:	b002      	add	sp, #8
 8000b88:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 8000b8a:	2c01      	cmp	r4, #1
 8000b8c:	d1f5      	bne.n	8000b7a <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 8000b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b92:	f023 0308 	bic.w	r3, r3, #8
 8000b96:	e7ee      	b.n	8000b76 <L3GD20_DisableIT+0x1a>

08000b98 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000b98:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000b9a:	2201      	movs	r2, #1
{
 8000b9c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000b9e:	2121      	movs	r1, #33	; 0x21
 8000ba0:	f10d 0007 	add.w	r0, sp, #7
 8000ba4:	f000 fcb0 	bl	8001508 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000ba8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000bac:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000bb0:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2121      	movs	r1, #33	; 0x21
 8000bb6:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 8000bba:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000bbe:	f000 fc81 	bl	80014c4 <GYRO_IO_Write>
}
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd10      	pop	{r4, pc}

08000bc6 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000bc6:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000bc8:	2201      	movs	r2, #1
{
 8000bca:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000bcc:	2124      	movs	r1, #36	; 0x24
 8000bce:	f10d 0007 	add.w	r0, sp, #7
 8000bd2:	f000 fc99 	bl	8001508 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8000bd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000bda:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 8000bde:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2124      	movs	r1, #36	; 0x24
 8000be4:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 8000be8:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000bec:	f000 fc6a 	bl	80014c4 <GYRO_IO_Write>
}
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd10      	pop	{r4, pc}

08000bf4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 8000bf8:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2123      	movs	r1, #35	; 0x23
{
 8000bfe:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000c00:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 8000c0a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000c0e:	f000 fc7b 	bl	8001508 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000c12:	2206      	movs	r2, #6
 8000c14:	2128      	movs	r1, #40	; 0x28
 8000c16:	a802      	add	r0, sp, #8
 8000c18:	f000 fc76 	bl	8001508 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c20:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8000c24:	f89d 7009 	ldrb.w	r7, [sp, #9]
 8000c28:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000c2c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8000c30:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000c34:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8000c38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000c3c:	d039      	beq.n	8000cb2 <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000c3e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8000c42:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 8000c46:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000c4a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000c4e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8000c52:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000c56:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000c58:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000c5c:	d034      	beq.n	8000cc8 <L3GD20_ReadXYZAngRate+0xd4>
 8000c5e:	2b20      	cmp	r3, #32
 8000c60:	d035      	beq.n	8000cce <L3GD20_ReadXYZAngRate+0xda>
 8000c62:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000cd4 <L3GD20_ReadXYZAngRate+0xe0>
 8000c66:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000cd8 <L3GD20_ReadXYZAngRate+0xe4>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf08      	it	eq
 8000c6e:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000c72:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8000c76:	ee07 3a10 	vmov	s14, r3
 8000c7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c7e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8000c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c86:	ed84 7a00 	vstr	s14, [r4]
 8000c8a:	ee07 3a10 	vmov	s14, r3
 8000c8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c92:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8000c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c9a:	ed84 7a01 	vstr	s14, [r4, #4]
 8000c9e:	ee07 3a10 	vmov	s14, r3
 8000ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000caa:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8000cae:	b007      	add	sp, #28
 8000cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000cb2:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8000cb6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8000cba:	f8ad 6010 	strh.w	r6, [sp, #16]
 8000cbe:	f8ad 0012 	strh.w	r0, [sp, #18]
 8000cc2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8000cc6:	e7c4      	b.n	8000c52 <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000cc8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000cdc <L3GD20_ReadXYZAngRate+0xe8>
 8000ccc:	e7d1      	b.n	8000c72 <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000cce:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000ce0 <L3GD20_ReadXYZAngRate+0xec>
 8000cd2:	e7ce      	b.n	8000c72 <L3GD20_ReadXYZAngRate+0x7e>
 8000cd4:	00000000 	.word	0x00000000
 8000cd8:	410c0000 	.word	0x410c0000
 8000cdc:	418c0000 	.word	0x418c0000
 8000ce0:	428c0000 	.word	0x428c0000

08000ce4 <LSM303AGR_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
}
 8000ce4:	4770      	bx	lr

08000ce6 <LSM303AGR_AccInit>:
{  
 8000ce6:	b510      	push	{r4, lr}
 8000ce8:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 8000cea:	f000 fc69 	bl	80015c0 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000cee:	b2e2      	uxtb	r2, r4
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	2032      	movs	r0, #50	; 0x32
 8000cf4:	f000 fcae 	bl	8001654 <COMPASSACCELERO_IO_Write>
}
 8000cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2123      	movs	r1, #35	; 0x23
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f000 bca7 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000d06 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000d06:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000d08:	f000 fc5a 	bl	80015c0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
  
  return ctrl;
}
 8000d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000d10:	210f      	movs	r1, #15
 8000d12:	2032      	movs	r0, #50	; 0x32
 8000d14:	f000 bca0 	b.w	8001658 <COMPASSACCELERO_IO_Read>

08000d18 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000d18:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000d1a:	2124      	movs	r1, #36	; 0x24
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f000 fc9b 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000d22:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000d26:	b2c2      	uxtb	r2, r0
}
 8000d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000d2c:	2124      	movs	r1, #36	; 0x24
 8000d2e:	2032      	movs	r0, #50	; 0x32
 8000d30:	f000 bc90 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000d34 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000d34:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000d36:	2121      	movs	r1, #33	; 0x21
{
 8000d38:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000d3a:	2032      	movs	r0, #50	; 0x32
 8000d3c:	f000 fc8c 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8000d40:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000d44:	ea40 0204 	orr.w	r2, r0, r4
 8000d48:	2121      	movs	r1, #33	; 0x21
}
 8000d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000d4e:	2032      	movs	r0, #50	; 0x32
 8000d50:	f000 bc80 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000d54 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000d54:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000d56:	2121      	movs	r1, #33	; 0x21
{
 8000d58:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000d5a:	2032      	movs	r0, #50	; 0x32
 8000d5c:	f000 fc7c 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 8000d60:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000d64:	ea40 0204 	orr.w	r2, r0, r4
 8000d68:	2121      	movs	r1, #33	; 0x21
}
 8000d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000d6e:	2032      	movs	r0, #50	; 0x32
 8000d70:	f000 bc70 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000d74 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000d78:	2123      	movs	r1, #35	; 0x23
{
 8000d7a:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000d7c:	2032      	movs	r0, #50	; 0x32
 8000d7e:	f000 fc6b 	bl	8001658 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000d82:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000d84:	4607      	mov	r7, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000d86:	2032      	movs	r0, #50	; 0x32
 8000d88:	f000 fc66 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000d8c:	2128      	movs	r1, #40	; 0x28
 8000d8e:	2032      	movs	r0, #50	; 0x32
 8000d90:	f000 fc62 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000d94:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000d96:	fa4f f880 	sxtb.w	r8, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000d9a:	2032      	movs	r0, #50	; 0x32
 8000d9c:	f000 fc5c 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000da0:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000da2:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000da6:	2032      	movs	r0, #50	; 0x32
 8000da8:	f000 fc56 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000dac:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000dae:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000db0:	2032      	movs	r0, #50	; 0x32
 8000db2:	f000 fc51 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000db6:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000db8:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f000 fc4b 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000dc2:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000dc4:	b245      	sxtb	r5, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000dc6:	2032      	movs	r0, #50	; 0x32
 8000dc8:	f000 fc46 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000dcc:	067a      	lsls	r2, r7, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000dce:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000dd0:	d51d      	bpl.n	8000e0e <LSM303AGR_AccReadXYZ+0x9a>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000dd2:	eb09 2808 	add.w	r8, r9, r8, lsl #8
 8000dd6:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 8000dda:	fa0f f888 	sxth.w	r8, r8
 8000dde:	b224      	sxth	r4, r4
 8000de0:	eb03 2505 	add.w	r5, r3, r5, lsl #8
 8000de4:	f007 0030 	and.w	r0, r7, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000de8:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000dea:	b22d      	sxth	r5, r5
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8000dec:	d019      	beq.n	8000e22 <LSM303AGR_AccReadXYZ+0xae>
 8000dee:	2830      	cmp	r0, #48	; 0x30
 8000df0:	d019      	beq.n	8000e26 <LSM303AGR_AccReadXYZ+0xb2>
 8000df2:	2810      	cmp	r0, #16
 8000df4:	bf14      	ite	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000dfa:	fb08 f803 	mul.w	r8, r8, r3
 8000dfe:	435c      	muls	r4, r3
 8000e00:	435d      	muls	r5, r3
 8000e02:	f8a6 8000 	strh.w	r8, [r6]
 8000e06:	8074      	strh	r4, [r6, #2]
 8000e08:	80b5      	strh	r5, [r6, #4]
  }
}
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000e0e:	eb08 2809 	add.w	r8, r8, r9, lsl #8
 8000e12:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8000e16:	fa0f f888 	sxth.w	r8, r8
 8000e1a:	b224      	sxth	r4, r4
 8000e1c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8000e20:	e7e0      	b.n	8000de4 <LSM303AGR_AccReadXYZ+0x70>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8000e22:	2304      	movs	r3, #4
 8000e24:	e7e9      	b.n	8000dfa <LSM303AGR_AccReadXYZ+0x86>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8000e26:	230c      	movs	r3, #12
 8000e28:	e7e7      	b.n	8000dfa <LSM303AGR_AccReadXYZ+0x86>

08000e2a <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000e2a:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000e2c:	2121      	movs	r1, #33	; 0x21
{
 8000e2e:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000e30:	2032      	movs	r0, #50	; 0x32
 8000e32:	f000 fc11 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8000e36:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000e3a:	ea40 0204 	orr.w	r2, r0, r4
 8000e3e:	2121      	movs	r1, #33	; 0x21
}
 8000e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000e44:	2032      	movs	r0, #50	; 0x32
 8000e46:	f000 bc05 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000e4a <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8000e4a:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8000e4c:	2122      	movs	r1, #34	; 0x22
{
 8000e4e:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8000e50:	2032      	movs	r0, #50	; 0x32
 8000e52:	f000 fc01 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8000e56:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000e58:	b2c2      	uxtb	r2, r0
}
 8000e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000e5e:	2122      	movs	r1, #34	; 0x22
 8000e60:	2032      	movs	r0, #50	; 0x32
 8000e62:	f000 bbf7 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000e66 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000e66:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000e68:	2138      	movs	r1, #56	; 0x38
{  
 8000e6a:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8000e6c:	2032      	movs	r0, #50	; 0x32
 8000e6e:	f000 fbf3 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000e72:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8000e74:	b2c2      	uxtb	r2, r0
 8000e76:	2138      	movs	r1, #56	; 0x38
 8000e78:	2032      	movs	r0, #50	; 0x32
 8000e7a:	f000 fbeb 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8000e7e:	220a      	movs	r2, #10
 8000e80:	213a      	movs	r1, #58	; 0x3a
 8000e82:	2032      	movs	r0, #50	; 0x32
 8000e84:	f000 fbe6 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8000e88:	2205      	movs	r2, #5
 8000e8a:	213b      	movs	r1, #59	; 0x3b
 8000e8c:	2032      	movs	r0, #50	; 0x32
 8000e8e:	f000 fbe1 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8000e92:	2205      	movs	r2, #5
 8000e94:	213c      	movs	r1, #60	; 0x3c
 8000e96:	2032      	movs	r0, #50	; 0x32
 8000e98:	f000 fbdc 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000e9c:	2232      	movs	r2, #50	; 0x32
}
 8000e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8000ea2:	213d      	movs	r1, #61	; 0x3d
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	f000 bbd5 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000eaa <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000eaa:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000eac:	f000 fbaa 	bl	8001604 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000eb0:	2080      	movs	r0, #128	; 0x80
 8000eb2:	f7ff ffca 	bl	8000e4a <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	f7ff ffb7 	bl	8000e2a <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
}
 8000ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8000ec0:	2010      	movs	r0, #16
 8000ec2:	f7ff bfd0 	b.w	8000e66 <LSM303AGR_AccClickITEnable>

08000ec6 <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 8000ec6:	4770      	bx	lr

08000ec8 <LSM303DLHC_AccInit>:
{  
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 8000ecc:	f000 fb78 	bl	80015c0 <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000ed0:	b2e2      	uxtb	r2, r4
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	2032      	movs	r0, #50	; 0x32
 8000ed6:	f000 fbbd 	bl	8001654 <COMPASSACCELERO_IO_Write>
}
 8000eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2123      	movs	r1, #35	; 0x23
 8000ee2:	2032      	movs	r0, #50	; 0x32
 8000ee4:	f000 bbb6 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000ee8 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000ee8:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000eea:	f000 fb69 	bl	80015c0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
  
  return ctrl;
}
 8000eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	2032      	movs	r0, #50	; 0x32
 8000ef6:	f000 bbaf 	b.w	8001658 <COMPASSACCELERO_IO_Read>

08000efa <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000efa:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000efc:	2124      	movs	r1, #36	; 0x24
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f000 fbaa 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000f04:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000f08:	b2c2      	uxtb	r2, r0
}
 8000f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000f0e:	2124      	movs	r1, #36	; 0x24
 8000f10:	2032      	movs	r0, #50	; 0x32
 8000f12:	f000 bb9f 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000f16 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000f16:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000f18:	2121      	movs	r1, #33	; 0x21
{
 8000f1a:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000f1c:	2032      	movs	r0, #50	; 0x32
 8000f1e:	f000 fb9b 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8000f22:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000f26:	ea40 0204 	orr.w	r2, r0, r4
 8000f2a:	2121      	movs	r1, #33	; 0x21
}
 8000f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000f30:	2032      	movs	r0, #50	; 0x32
 8000f32:	f000 bb8f 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000f36 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000f36:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000f38:	2121      	movs	r1, #33	; 0x21
{
 8000f3a:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000f3c:	2032      	movs	r0, #50	; 0x32
 8000f3e:	f000 fb8b 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 8000f42:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000f46:	ea40 0204 	orr.w	r2, r0, r4
 8000f4a:	2121      	movs	r1, #33	; 0x21
}
 8000f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000f50:	2032      	movs	r0, #50	; 0x32
 8000f52:	f000 bb7f 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08000f56 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000f5a:	2123      	movs	r1, #35	; 0x23
{
 8000f5c:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f000 fb7a 	bl	8001658 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000f64:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000f66:	4607      	mov	r7, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000f68:	2032      	movs	r0, #50	; 0x32
 8000f6a:	f000 fb75 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000f6e:	2128      	movs	r1, #40	; 0x28
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f000 fb71 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000f76:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000f78:	fa4f f880 	sxtb.w	r8, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f000 fb6b 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000f82:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000f84:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000f88:	2032      	movs	r0, #50	; 0x32
 8000f8a:	f000 fb65 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000f8e:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000f90:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	f000 fb60 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000f98:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000f9a:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000f9e:	2032      	movs	r0, #50	; 0x32
 8000fa0:	f000 fb5a 	bl	8001658 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000fa4:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000fa6:	b245      	sxtb	r5, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000fa8:	2032      	movs	r0, #50	; 0x32
 8000faa:	f000 fb55 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000fae:	067a      	lsls	r2, r7, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000fb0:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000fb2:	d51d      	bpl.n	8000ff0 <LSM303DLHC_AccReadXYZ+0x9a>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000fb4:	eb09 2808 	add.w	r8, r9, r8, lsl #8
 8000fb8:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 8000fbc:	fa0f f888 	sxth.w	r8, r8
 8000fc0:	b224      	sxth	r4, r4
 8000fc2:	eb03 2505 	add.w	r5, r3, r5, lsl #8
 8000fc6:	f007 0030 	and.w	r0, r7, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000fca:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000fcc:	b22d      	sxth	r5, r5
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000fce:	d019      	beq.n	8001004 <LSM303DLHC_AccReadXYZ+0xae>
 8000fd0:	2830      	cmp	r0, #48	; 0x30
 8000fd2:	d019      	beq.n	8001008 <LSM303DLHC_AccReadXYZ+0xb2>
 8000fd4:	2810      	cmp	r0, #16
 8000fd6:	bf14      	ite	ne
 8000fd8:	2301      	movne	r3, #1
 8000fda:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000fdc:	fb08 f803 	mul.w	r8, r8, r3
 8000fe0:	435c      	muls	r4, r3
 8000fe2:	435d      	muls	r5, r3
 8000fe4:	f8a6 8000 	strh.w	r8, [r6]
 8000fe8:	8074      	strh	r4, [r6, #2]
 8000fea:	80b5      	strh	r5, [r6, #4]
  }
}
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000ff0:	eb08 2809 	add.w	r8, r8, r9, lsl #8
 8000ff4:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8000ff8:	fa0f f888 	sxth.w	r8, r8
 8000ffc:	b224      	sxth	r4, r4
 8000ffe:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8001002:	e7e0      	b.n	8000fc6 <LSM303DLHC_AccReadXYZ+0x70>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001004:	2304      	movs	r3, #4
 8001006:	e7e9      	b.n	8000fdc <LSM303DLHC_AccReadXYZ+0x86>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001008:	230c      	movs	r3, #12
 800100a:	e7e7      	b.n	8000fdc <LSM303DLHC_AccReadXYZ+0x86>

0800100c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800100c:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800100e:	2121      	movs	r1, #33	; 0x21
{
 8001010:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001012:	2032      	movs	r0, #50	; 0x32
 8001014:	f000 fb20 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001018:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800101c:	ea40 0204 	orr.w	r2, r0, r4
 8001020:	2121      	movs	r1, #33	; 0x21
}
 8001022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001026:	2032      	movs	r0, #50	; 0x32
 8001028:	f000 bb14 	b.w	8001654 <COMPASSACCELERO_IO_Write>

0800102c <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800102c:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800102e:	2122      	movs	r1, #34	; 0x22
{
 8001030:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001032:	2032      	movs	r0, #50	; 0x32
 8001034:	f000 fb10 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001038:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800103a:	b2c2      	uxtb	r2, r0
}
 800103c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001040:	2122      	movs	r1, #34	; 0x22
 8001042:	2032      	movs	r0, #50	; 0x32
 8001044:	f000 bb06 	b.w	8001654 <COMPASSACCELERO_IO_Write>

08001048 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001048:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800104a:	2138      	movs	r1, #56	; 0x38
{  
 800104c:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f000 fb02 	bl	8001658 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001054:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001056:	b2c2      	uxtb	r2, r0
 8001058:	2138      	movs	r1, #56	; 0x38
 800105a:	2032      	movs	r0, #50	; 0x32
 800105c:	f000 fafa 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001060:	220a      	movs	r2, #10
 8001062:	213a      	movs	r1, #58	; 0x3a
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f000 faf5 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800106a:	2205      	movs	r2, #5
 800106c:	213b      	movs	r1, #59	; 0x3b
 800106e:	2032      	movs	r0, #50	; 0x32
 8001070:	f000 faf0 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001074:	2205      	movs	r2, #5
 8001076:	213c      	movs	r1, #60	; 0x3c
 8001078:	2032      	movs	r0, #50	; 0x32
 800107a:	f000 faeb 	bl	8001654 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800107e:	2232      	movs	r2, #50	; 0x32
}
 8001080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001084:	213d      	movs	r1, #61	; 0x3d
 8001086:	4610      	mov	r0, r2
 8001088:	f000 bae4 	b.w	8001654 <COMPASSACCELERO_IO_Write>

0800108c <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800108c:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800108e:	f000 fab9 	bl	8001604 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001092:	2080      	movs	r0, #128	; 0x80
 8001094:	f7ff ffca 	bl	800102c <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff ffb7 	bl	800100c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
}
 800109e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80010a2:	2010      	movs	r0, #16
 80010a4:	f7ff bfd0 	b.w	8001048 <LSM303DLHC_AccClickITEnable>

080010a8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 80010a8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010aa:	4c20      	ldr	r4, [pc, #128]	; (800112c <SPIx_Init+0x84>)
{
 80010ac:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010ae:	4620      	mov	r0, r4
 80010b0:	f003 f8ef 	bl	8004292 <HAL_SPI_GetState>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d137      	bne.n	8001128 <SPIx_Init+0x80>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SPIx_Init+0x88>)
 80010ba:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010bc:	2310      	movs	r3, #16
 80010be:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80010c4:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c8:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80010cc:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80010ce:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010d2:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <SPIx_Init+0x8c>)
 80010d6:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80010d8:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010da:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010de:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80010e0:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLOCK_ENABLE();
 80010e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
 80010ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80010f4:	9002      	str	r0, [sp, #8]
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	631a      	str	r2, [r3, #48]	; 0x30
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	9b02      	ldr	r3, [sp, #8]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001108:	21e0      	movs	r1, #224	; 0xe0
 800110a:	2302      	movs	r3, #2
 800110c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8001110:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001112:	2001      	movs	r0, #1
 8001114:	2305      	movs	r3, #5
 8001116:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800111a:	a903      	add	r1, sp, #12
 800111c:	4806      	ldr	r0, [pc, #24]	; (8001138 <SPIx_Init+0x90>)
 800111e:	f001 f8f3 	bl	8002308 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8001122:	4620      	mov	r0, r4
 8001124:	f002 fef9 	bl	8003f1a <HAL_SPI_Init>
}
 8001128:	b008      	add	sp, #32
 800112a:	bd10      	pop	{r4, pc}
 800112c:	200006b4 	.word	0x200006b4
 8001130:	40013000 	.word	0x40013000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <SPIx_WriteRead>:
{
 800113c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <SPIx_WriteRead+0x38>)
{
 8001146:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	480a      	ldr	r0, [pc, #40]	; (8001178 <SPIx_WriteRead+0x3c>)
 8001150:	2301      	movs	r3, #1
 8001152:	f10d 0217 	add.w	r2, sp, #23
 8001156:	f10d 010f 	add.w	r1, sp, #15
 800115a:	f002 ff56 	bl	800400a <HAL_SPI_TransmitReceive>
 800115e:	b120      	cbz	r0, 800116a <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <SPIx_WriteRead+0x3c>)
 8001162:	f002 ff3c 	bl	8003fde <HAL_SPI_DeInit>
  SPIx_Init();
 8001166:	f7ff ff9f 	bl	80010a8 <SPIx_Init>
}
 800116a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800116e:	b007      	add	sp, #28
 8001170:	f85d fb04 	ldr.w	pc, [sp], #4
 8001174:	20000104 	.word	0x20000104
 8001178:	200006b4 	.word	0x200006b4

0800117c <I2Cx_Init>:
{
 800117c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800117e:	4d2c      	ldr	r5, [pc, #176]	; (8001230 <I2Cx_Init+0xb4>)
{
 8001180:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001182:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8001186:	f001 fddf 	bl	8002d48 <HAL_I2C_GetState>
 800118a:	4604      	mov	r4, r0
 800118c:	2800      	cmp	r0, #0
 800118e:	d14d      	bne.n	800122c <I2Cx_Init+0xb0>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <I2Cx_Init+0xb8>)
 8001192:	65ab      	str	r3, [r5, #88]	; 0x58
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001194:	2343      	movs	r3, #67	; 0x43
 8001196:	666b      	str	r3, [r5, #100]	; 0x64
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <I2Cx_Init+0xbc>)
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 800119a:	4e28      	ldr	r6, [pc, #160]	; (800123c <I2Cx_Init+0xc0>)
 800119c:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119e:	e9c5 3017 	strd	r3, r0, [r5, #92]	; 0x5c
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80011a6:	e9c5 301a 	strd	r3, r0, [r5, #104]	; 0x68
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80011aa:	e9c5 001c 	strd	r0, r0, [r5, #112]	; 0x70
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80011ae:	67a8      	str	r0, [r5, #120]	; 0x78
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80011b0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80011b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b6:	6433      	str	r3, [r6, #64]	; 0x40
 80011b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	9b01      	ldr	r3, [sp, #4]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80011c2:	9002      	str	r0, [sp, #8]
 80011c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	6333      	str	r3, [r6, #48]	; 0x30
 80011cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80011ce:	9405      	str	r4, [sp, #20]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80011d8:	f44f 7010 	mov.w	r0, #576	; 0x240
 80011dc:	2312      	movs	r3, #18
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80011de:	f04f 0c02 	mov.w	ip, #2
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80011e2:	e9cd 0303 	strd	r0, r3, [sp, #12]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80011e6:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80011e8:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80011ea:	4815      	ldr	r0, [pc, #84]	; (8001240 <I2Cx_Init+0xc4>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80011ec:	e9cd c306 	strd	ip, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80011f0:	f001 f88a 	bl	8002308 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_FORCE_RESET();
 80011f4:	6a33      	ldr	r3, [r6, #32]
 80011f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fa:	6233      	str	r3, [r6, #32]
  DISCOVERY_I2Cx_RELEASE_RESET();
 80011fc:	6a33      	ldr	r3, [r6, #32]
 80011fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001202:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001204:	4622      	mov	r2, r4
 8001206:	210f      	movs	r1, #15
 8001208:	201f      	movs	r0, #31
 800120a:	f000 fe2b 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800120e:	201f      	movs	r0, #31
 8001210:	f000 fe5a 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001214:	4622      	mov	r2, r4
 8001216:	210f      	movs	r1, #15
 8001218:	2020      	movs	r0, #32
 800121a:	f000 fe23 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 800121e:	2020      	movs	r0, #32
 8001220:	f000 fe52 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8001224:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8001228:	f001 fb34 	bl	8002894 <HAL_I2C_Init>
}
 800122c:	b008      	add	sp, #32
 800122e:	bd70      	pop	{r4, r5, r6, pc}
 8001230:	200006b4 	.word	0x200006b4
 8001234:	40005400 	.word	0x40005400
 8001238:	000186a0 	.word	0x000186a0
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400

08001244 <I2Cx_ReadData>:
{
 8001244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <I2Cx_ReadData+0x38>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	9302      	str	r3, [sp, #8]
{
 8001252:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001254:	2301      	movs	r3, #1
 8001256:	f10d 0117 	add.w	r1, sp, #23
 800125a:	9100      	str	r1, [sp, #0]
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	4601      	mov	r1, r0
 8001260:	4807      	ldr	r0, [pc, #28]	; (8001280 <I2Cx_ReadData+0x3c>)
 8001262:	f001 fc69 	bl	8002b38 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001266:	b120      	cbz	r0, 8001272 <I2Cx_ReadData+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <I2Cx_ReadData+0x3c>)
 800126a:	f001 fbbc 	bl	80029e6 <HAL_I2C_DeInit>
  I2Cx_Init();
 800126e:	f7ff ff85 	bl	800117c <I2Cx_Init>
}
 8001272:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001276:	b007      	add	sp, #28
 8001278:	f85d fb04 	ldr.w	pc, [sp], #4
 800127c:	20000104 	.word	0x20000104
 8001280:	2000070c 	.word	0x2000070c

08001284 <I2Cx_WriteData>:
{
 8001284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <I2Cx_WriteData+0x34>)
{
 8001288:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	f10d 0217 	add.w	r2, sp, #23
 8001294:	2301      	movs	r3, #1
 8001296:	9200      	str	r2, [sp, #0]
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	460a      	mov	r2, r1
 800129c:	4601      	mov	r1, r0
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <I2Cx_WriteData+0x38>)
 80012a0:	f001 fbba 	bl	8002a18 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80012a4:	b120      	cbz	r0, 80012b0 <I2Cx_WriteData+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <I2Cx_WriteData+0x38>)
 80012a8:	f001 fb9d 	bl	80029e6 <HAL_I2C_DeInit>
  I2Cx_Init();
 80012ac:	f7ff ff66 	bl	800117c <I2Cx_Init>
}
 80012b0:	b007      	add	sp, #28
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012b6:	bf00      	nop
 80012b8:	20000104 	.word	0x20000104
 80012bc:	2000070c 	.word	0x2000070c

080012c0 <BSP_LED_Init>:
{
 80012c0:	b530      	push	{r4, r5, lr}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 80012c4:	bb08      	cbnz	r0, 800130a <BSP_LED_Init+0x4a>
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <BSP_LED_Init+0xa4>)
 80012c8:	9001      	str	r0, [sp, #4]
 80012ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012cc:	f042 0208 	orr.w	r2, r2, #8
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80012dc:	4c22      	ldr	r4, [pc, #136]	; (8001368 <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80012e0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80012e4:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80012e8:	68a0      	ldr	r0, [r4, #8]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80012ea:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80012f2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80012f4:	2302      	movs	r3, #2
 80012f6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80012f8:	f001 f806 	bl	8002308 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80012fc:	68a0      	ldr	r0, [r4, #8]
 80012fe:	2200      	movs	r2, #0
 8001300:	4629      	mov	r1, r5
 8001302:	f001 f8cf 	bl	80024a4 <HAL_GPIO_WritePin>
}
 8001306:	b00b      	add	sp, #44	; 0x2c
 8001308:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800130a:	2801      	cmp	r0, #1
 800130c:	d10c      	bne.n	8001328 <BSP_LED_Init+0x68>
 800130e:	2300      	movs	r3, #0
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <BSP_LED_Init+0xa4>)
 8001314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001316:	f042 0208 	orr.w	r2, r2, #8
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	9b02      	ldr	r3, [sp, #8]
 8001326:	e7d9      	b.n	80012dc <BSP_LED_Init+0x1c>
 8001328:	2802      	cmp	r0, #2
 800132a:	d10c      	bne.n	8001346 <BSP_LED_Init+0x86>
 800132c:	2300      	movs	r3, #0
 800132e:	9303      	str	r3, [sp, #12]
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <BSP_LED_Init+0xa4>)
 8001332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001334:	f042 0208 	orr.w	r2, r2, #8
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0308 	and.w	r3, r3, #8
 8001340:	9303      	str	r3, [sp, #12]
 8001342:	9b03      	ldr	r3, [sp, #12]
 8001344:	e7ca      	b.n	80012dc <BSP_LED_Init+0x1c>
 8001346:	2803      	cmp	r0, #3
 8001348:	d1c8      	bne.n	80012dc <BSP_LED_Init+0x1c>
 800134a:	2300      	movs	r3, #0
 800134c:	9304      	str	r3, [sp, #16]
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <BSP_LED_Init+0xa4>)
 8001350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001352:	f042 0208 	orr.w	r2, r2, #8
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	9304      	str	r3, [sp, #16]
 8001360:	9b04      	ldr	r3, [sp, #16]
 8001362:	e7bb      	b.n	80012dc <BSP_LED_Init+0x1c>
 8001364:	40023800 	.word	0x40023800
 8001368:	20000104 	.word	0x20000104
 800136c:	0800712c 	.word	0x0800712c

08001370 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <BSP_LED_On+0x14>)
 8001372:	4905      	ldr	r1, [pc, #20]	; (8001388 <BSP_LED_On+0x18>)
 8001374:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001378:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 800137c:	6898      	ldr	r0, [r3, #8]
 800137e:	2201      	movs	r2, #1
 8001380:	f001 b890 	b.w	80024a4 <HAL_GPIO_WritePin>
 8001384:	20000104 	.word	0x20000104
 8001388:	0800712c 	.word	0x0800712c

0800138c <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <BSP_LED_Off+0x14>)
 800138e:	4905      	ldr	r1, [pc, #20]	; (80013a4 <BSP_LED_Off+0x18>)
 8001390:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001394:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8001398:	6898      	ldr	r0, [r3, #8]
 800139a:	2200      	movs	r2, #0
 800139c:	f001 b882 	b.w	80024a4 <HAL_GPIO_WritePin>
 80013a0:	20000104 	.word	0x20000104
 80013a4:	0800712c 	.word	0x0800712c

080013a8 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <BSP_LED_Toggle+0x14>)
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <BSP_LED_Toggle+0x18>)
 80013ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80013b0:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80013b4:	6898      	ldr	r0, [r3, #8]
 80013b6:	f001 b87a 	b.w	80024ae <HAL_GPIO_TogglePin>
 80013ba:	bf00      	nop
 80013bc:	20000104 	.word	0x20000104
 80013c0:	0800712c 	.word	0x0800712c

080013c4 <BSP_PB_Init>:
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80013c8:	b950      	cbnz	r0, 80013e0 <BSP_PB_Init+0x1c>
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <BSP_PB_Init+0x6c>)
 80013cc:	9000      	str	r0, [sp, #0]
 80013ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 80013e0:	b971      	cbnz	r1, 8001400 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80013e2:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80013ea:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <BSP_PB_Init+0x70>)
 80013f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80013f4:	a901      	add	r1, sp, #4
 80013f6:	6980      	ldr	r0, [r0, #24]
 80013f8:	f000 ff86 	bl	8002308 <HAL_GPIO_Init>
}
 80013fc:	b006      	add	sp, #24
 80013fe:	bd10      	pop	{r4, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001400:	2901      	cmp	r1, #1
 8001402:	d1fb      	bne.n	80013fc <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001404:	2400      	movs	r4, #0
 8001406:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800140a:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001410:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001416:	a901      	add	r1, sp, #4
 8001418:	6980      	ldr	r0, [r0, #24]
 800141a:	f000 ff75 	bl	8002308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800141e:	4622      	mov	r2, r4
 8001420:	210f      	movs	r1, #15
 8001422:	2006      	movs	r0, #6
 8001424:	f000 fd1e 	bl	8001e64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001428:	2006      	movs	r0, #6
 800142a:	f000 fd4d 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
}
 800142e:	e7e5      	b.n	80013fc <BSP_PB_Init+0x38>
 8001430:	40023800 	.word	0x40023800
 8001434:	20000104 	.word	0x20000104

08001438 <BSP_PB_GetState>:
{
 8001438:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <BSP_PB_GetState+0x14>)
 800143c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001440:	2101      	movs	r1, #1
 8001442:	6980      	ldr	r0, [r0, #24]
 8001444:	f001 f828 	bl	8002498 <HAL_GPIO_ReadPin>
}
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop
 800144c:	20000104 	.word	0x20000104

08001450 <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001454:	4c19      	ldr	r4, [pc, #100]	; (80014bc <GYRO_IO_Init+0x6c>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001456:	481a      	ldr	r0, [pc, #104]	; (80014c0 <GYRO_IO_Init+0x70>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001458:	2500      	movs	r5, #0
 800145a:	9501      	str	r5, [sp, #4]
 800145c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	6323      	str	r3, [r4, #48]	; 0x30
 8001464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001466:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2601      	movs	r6, #1
  GYRO_CS_GPIO_CLK_ENABLE();  
 800146c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2708      	movs	r7, #8
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001470:	a903      	add	r1, sp, #12
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001472:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	e9cd 7603 	strd	r7, r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001478:	e9cd 5605 	strd	r5, r6, [sp, #20]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800147c:	f000 ff44 	bl	8002308 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8001480:	4632      	mov	r2, r6
 8001482:	4639      	mov	r1, r7
 8001484:	480e      	ldr	r0, [pc, #56]	; (80014c0 <GYRO_IO_Init+0x70>)
 8001486:	f001 f80d 	bl	80024a4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800148a:	9502      	str	r5, [sp, #8]
 800148c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <GYRO_IO_Init+0x70>)
  GYRO_INT_GPIO_CLK_ENABLE();
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6323      	str	r3, [r4, #48]	; 0x30
 8001496:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80014a0:	2303      	movs	r3, #3
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80014a2:	e9cd 3503 	strd	r3, r5, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80014a6:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80014a8:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80014aa:	e9cd 5305 	strd	r5, r3, [sp, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80014ae:	f000 ff2b 	bl	8002308 <HAL_GPIO_Init>
  
  SPIx_Init();
 80014b2:	f7ff fdf9 	bl	80010a8 <SPIx_Init>
}
 80014b6:	b009      	add	sp, #36	; 0x24
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40021000 	.word	0x40021000

080014c4 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80014c4:	2a01      	cmp	r2, #1
{
 80014c6:	b570      	push	{r4, r5, r6, lr}
 80014c8:	460e      	mov	r6, r1
 80014ca:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80014cc:	bf88      	it	hi
 80014ce:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <GYRO_IO_Write+0x40>)
{
 80014d4:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 80014d6:	2108      	movs	r1, #8
 80014d8:	2200      	movs	r2, #0
 80014da:	f000 ffe3 	bl	80024a4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80014de:	4630      	mov	r0, r6
 80014e0:	f7ff fe2c 	bl	800113c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80014e4:	442c      	add	r4, r5
 80014e6:	42a5      	cmp	r5, r4
 80014e8:	d106      	bne.n	80014f8 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 80014ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <GYRO_IO_Write+0x40>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	2108      	movs	r1, #8
 80014f4:	f000 bfd6 	b.w	80024a4 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 80014f8:	f815 0b01 	ldrb.w	r0, [r5], #1
 80014fc:	f7ff fe1e 	bl	800113c <SPIx_WriteRead>
    pBuffer++;
 8001500:	e7f1      	b.n	80014e6 <GYRO_IO_Write+0x22>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000

08001508 <GYRO_IO_Read>:
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8001508:	2a01      	cmp	r2, #1
{  
 800150a:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800150c:	bf8c      	ite	hi
 800150e:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001512:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 8001516:	4606      	mov	r6, r0
 8001518:	4615      	mov	r5, r2
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <GYRO_IO_Read+0x44>)
 800151c:	2200      	movs	r2, #0
 800151e:	2108      	movs	r1, #8
 8001520:	f000 ffc0 	bl	80024a4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fe09 	bl	800113c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800152a:	4435      	add	r5, r6
 800152c:	42ae      	cmp	r6, r5
 800152e:	d106      	bne.n	800153e <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 8001530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <GYRO_IO_Read+0x44>)
 8001536:	2201      	movs	r2, #1
 8001538:	2108      	movs	r1, #8
 800153a:	f000 bfb3 	b.w	80024a4 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fdfc 	bl	800113c <SPIx_WriteRead>
 8001544:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 8001548:	e7f0      	b.n	800152c <GYRO_IO_Read+0x24>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001554:	2600      	movs	r6, #0
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <AUDIO_IO_Init+0x5c>)
 8001558:	9600      	str	r6, [sp, #0]
 800155a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800155c:	4c14      	ldr	r4, [pc, #80]	; (80015b0 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800155e:	f042 0208 	orr.w	r2, r2, #8
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800156e:	a901      	add	r1, sp, #4
 8001570:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001572:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001576:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001578:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8001580:	f000 fec2 	bl	8002308 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001584:	f7ff fdfa 	bl	800117c <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8001588:	4632      	mov	r2, r6
 800158a:	4629      	mov	r1, r5
 800158c:	4620      	mov	r0, r4
 800158e:	f000 ff89 	bl	80024a4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001592:	2005      	movs	r0, #5
 8001594:	f000 fc40 	bl	8001e18 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8001598:	463a      	mov	r2, r7
 800159a:	4629      	mov	r1, r5
 800159c:	4620      	mov	r0, r4
 800159e:	f000 ff81 	bl	80024a4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80015a2:	2005      	movs	r0, #5
 80015a4:	f000 fc38 	bl	8001e18 <HAL_Delay>
}
 80015a8:	b007      	add	sp, #28
 80015aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020c00 	.word	0x40020c00

080015b4 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
  
}
 80015b4:	4770      	bx	lr

080015b6 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_WriteData(Addr, Reg, Value);
 80015b6:	f7ff be65 	b.w	8001284 <I2Cx_WriteData>

080015ba <AUDIO_IO_Read>:
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
  return I2Cx_ReadData(Addr, Reg);
 80015ba:	f7ff be43 	b.w	8001244 <I2Cx_ReadData>
	...

080015c0 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 80015c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <COMPASSACCELERO_IO_Init+0x3c>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <COMPASSACCELERO_IO_Init+0x40>)
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015cc:	f041 0110 	orr.w	r1, r1, #16
 80015d0:	6311      	str	r1, [r2, #48]	; 0x30
 80015d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80015d4:	9303      	str	r3, [sp, #12]
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80015d6:	f002 0210 	and.w	r2, r2, #16
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80015de:	2204      	movs	r2, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80015e0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80015e4:	eb0d 0102 	add.w	r1, sp, r2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015e8:	2302      	movs	r3, #2
 80015ea:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80015ec:	f000 fe8c 	bl	8002308 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80015f0:	f7ff fdc4 	bl	800117c <I2Cx_Init>
}
 80015f4:	b007      	add	sp, #28
 80015f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40021000 	.word	0x40021000

08001604 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001604:	b510      	push	{r4, lr}
 8001606:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001608:	2400      	movs	r4, #0
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <COMPASSACCELERO_IO_ITConfig+0x48>)
 800160c:	9400      	str	r4, [sp, #0]
 800160e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <COMPASSACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001612:	f042 0210 	orr.w	r2, r2, #16
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001622:	2230      	movs	r2, #48	; 0x30
 8001624:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001628:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800162c:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800162e:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001630:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001634:	f000 fe68 	bl	8002308 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8001638:	4622      	mov	r2, r4
 800163a:	210f      	movs	r1, #15
 800163c:	200a      	movs	r0, #10
 800163e:	f000 fc11 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001642:	200a      	movs	r0, #10
 8001644:	f000 fc40 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
}
 8001648:	b006      	add	sp, #24
 800164a:	bd10      	pop	{r4, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000

08001654 <COMPASSACCELERO_IO_Write>:
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8001654:	f7ff be16 	b.w	8001284 <I2Cx_WriteData>

08001658 <COMPASSACCELERO_IO_Read>:
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001658:	f7ff bdf4 	b.w	8001244 <I2Cx_ReadData>

0800165c <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800165c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800165e:	4c0c      	ldr	r4, [pc, #48]	; (8001690 <BSP_ACCELERO_Init+0x34>)
 8001660:	68a3      	ldr	r3, [r4, #8]
 8001662:	4798      	blx	r3
 8001664:	2833      	cmp	r0, #51	; 0x33
 8001666:	d10b      	bne.n	8001680 <BSP_ACCELERO_Init+0x24>
    ret = ACCELERO_OK;
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001668:	4d0a      	ldr	r5, [pc, #40]	; (8001694 <BSP_ACCELERO_Init+0x38>)

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800166a:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303agrDrv;
 800166c:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800166e:	f640 0047 	movw	r0, #2119	; 0x847
 8001672:	4798      	blx	r3
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
                      Accelero_FilterStructure.HighPassFilter_AOI2);

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	2090      	movs	r0, #144	; 0x90
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800167c:	2000      	movs	r0, #0
  }

  return ret;
}
 800167e:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8001680:	4c05      	ldr	r4, [pc, #20]	; (8001698 <BSP_ACCELERO_Init+0x3c>)
 8001682:	68a3      	ldr	r3, [r4, #8]
 8001684:	4798      	blx	r3
 8001686:	2833      	cmp	r0, #51	; 0x33
 8001688:	d0ee      	beq.n	8001668 <BSP_ACCELERO_Init+0xc>
  uint8_t ret = ACCELERO_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	e7f7      	b.n	800167e <BSP_ACCELERO_Init+0x22>
 800168e:	bf00      	nop
 8001690:	200000d0 	.word	0x200000d0
 8001694:	20000760 	.word	0x20000760
 8001698:	2000009c 	.word	0x2000009c

0800169c <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure accelerometer click IT.
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AccelerometerDrv->ConfigIT!= NULL)
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <BSP_ACCELERO_Click_ITConfig+0xc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	b103      	cbz	r3, 80016a6 <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AccelerometerDrv->ConfigIT();
 80016a4:	4718      	bx	r3
  }
}
 80016a6:	4770      	bx	lr
 80016a8:	20000760 	.word	0x20000760

080016ac <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80016ac:	b538      	push	{r3, r4, r5, lr}
  int16_t SwitchXY = 0;

  if(AccelerometerDrv->GetXYZ!= NULL)
 80016ae:	4d08      	ldr	r5, [pc, #32]	; (80016d0 <BSP_ACCELERO_GetXYZ+0x24>)
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 80016b4:	4604      	mov	r4, r0
  if(AccelerometerDrv->GetXYZ!= NULL)
 80016b6:	b153      	cbz	r3, 80016ce <BSP_ACCELERO_GetXYZ+0x22>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 80016b8:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 80016ba:	682a      	ldr	r2, [r5, #0]
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <BSP_ACCELERO_GetXYZ+0x28>)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d105      	bne.n	80016ce <BSP_ACCELERO_GetXYZ+0x22>
    {
      SwitchXY  = pDataXYZ[0];
 80016c2:	f9b4 3000 	ldrsh.w	r3, [r4]
      pDataXYZ[0] = pDataXYZ[1];
 80016c6:	8862      	ldrh	r2, [r4, #2]
 80016c8:	8022      	strh	r2, [r4, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 80016ca:	425b      	negs	r3, r3
 80016cc:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	20000760 	.word	0x20000760
 80016d4:	200000d0 	.word	0x200000d0

080016d8 <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80016d8:	4a0c      	ldr	r2, [pc, #48]	; (800170c <I2S3_Init+0x34>)
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80016da:	69d1      	ldr	r1, [r2, #28]
{
 80016dc:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80016e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 80016e4:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80016e6:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80016e8:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80016ee:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80016f0:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80016f2:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80016f6:	e9c3 1201 	strd	r1, r2, [r3, #4]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80016fa:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80016fc:	6119      	str	r1, [r3, #16]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80016fe:	f001 fb4d 	bl	8002d9c <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8001702:	3800      	subs	r0, #0
 8001704:	bf18      	it	ne
 8001706:	2001      	movne	r0, #1
 8001708:	bd08      	pop	{r3, pc}
 800170a:	bf00      	nop
 800170c:	40003c00 	.word	0x40003c00
 8001710:	20000a30 	.word	0x20000a30

08001714 <BSP_AUDIO_OUT_Play>:
{
 8001714:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <BSP_AUDIO_OUT_Play+0x34>)
 8001718:	681b      	ldr	r3, [r3, #0]
{
 800171a:	4605      	mov	r5, r0
 800171c:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800171e:	b28a      	uxth	r2, r1
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4601      	mov	r1, r0
 8001724:	2094      	movs	r0, #148	; 0x94
 8001726:	4798      	blx	r3
 8001728:	b960      	cbnz	r0, 8001744 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 800172a:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <BSP_AUDIO_OUT_Play+0x38>)
 8001730:	bf34      	ite	cc
 8001732:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8001736:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 800173a:	4629      	mov	r1, r5
 800173c:	f001 fbc8 	bl	8002ed0 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8001740:	2000      	movs	r0, #0
}
 8001742:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001744:	2001      	movs	r0, #1
 8001746:	e7fc      	b.n	8001742 <BSP_AUDIO_OUT_Play+0x2e>
 8001748:	20000764 	.word	0x20000764
 800174c:	20000a30 	.word	0x20000a30

08001750 <BSP_AUDIO_OUT_ChangeBuffer>:
{
 8001750:	460a      	mov	r2, r1
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8001752:	4601      	mov	r1, r0
 8001754:	4801      	ldr	r0, [pc, #4]	; (800175c <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8001756:	f001 bbbb 	b.w	8002ed0 <HAL_I2S_Transmit_DMA>
 800175a:	bf00      	nop
 800175c:	20000a30 	.word	0x20000a30

08001760 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <BSP_AUDIO_OUT_Pause+0x20>)
 8001762:	681b      	ldr	r3, [r3, #0]
{    
 8001764:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2094      	movs	r0, #148	; 0x94
 800176a:	4798      	blx	r3
 800176c:	4604      	mov	r4, r0
 800176e:	b920      	cbnz	r0, 800177a <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <BSP_AUDIO_OUT_Pause+0x24>)
 8001772:	f001 fc81 	bl	8003078 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8001776:	4620      	mov	r0, r4
}
 8001778:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	e7fc      	b.n	8001778 <BSP_AUDIO_OUT_Pause+0x18>
 800177e:	bf00      	nop
 8001780:	20000764 	.word	0x20000764
 8001784:	20000a30 	.word	0x20000a30

08001788 <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <BSP_AUDIO_OUT_Resume+0x20>)
 800178a:	681b      	ldr	r3, [r3, #0]
{    
 800178c:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	2094      	movs	r0, #148	; 0x94
 8001792:	4798      	blx	r3
 8001794:	4604      	mov	r4, r0
 8001796:	b920      	cbnz	r0, 80017a2 <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <BSP_AUDIO_OUT_Resume+0x24>)
 800179a:	f001 fca5 	bl	80030e8 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 800179e:	4620      	mov	r0, r4
}
 80017a0:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 80017a2:	2001      	movs	r0, #1
 80017a4:	e7fc      	b.n	80017a0 <BSP_AUDIO_OUT_Resume+0x18>
 80017a6:	bf00      	nop
 80017a8:	20000764 	.word	0x20000764
 80017ac:	20000a30 	.word	0x20000a30

080017b0 <BSP_AUDIO_OUT_Stop>:
{
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <BSP_AUDIO_OUT_Stop+0x38>)
 80017b6:	f001 fcdb 	bl	8003170 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <BSP_AUDIO_OUT_Stop+0x3c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4629      	mov	r1, r5
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2094      	movs	r0, #148	; 0x94
 80017c4:	4798      	blx	r3
 80017c6:	4604      	mov	r4, r0
 80017c8:	b958      	cbnz	r0, 80017e2 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 80017ca:	2d01      	cmp	r5, #1
 80017cc:	d107      	bne.n	80017de <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 fb22 	bl	8001e18 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <BSP_AUDIO_OUT_Stop+0x40>)
 80017d6:	4622      	mov	r2, r4
 80017d8:	2110      	movs	r1, #16
 80017da:	f000 fe63 	bl	80024a4 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 80017de:	4620      	mov	r0, r4
 80017e0:	e000      	b.n	80017e4 <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 80017e2:	2001      	movs	r0, #1
}
 80017e4:	bd38      	pop	{r3, r4, r5, pc}
 80017e6:	bf00      	nop
 80017e8:	20000a30 	.word	0x20000a30
 80017ec:	20000764 	.word	0x20000764
 80017f0:	40020c00 	.word	0x40020c00

080017f4 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <BSP_AUDIO_OUT_ClockConfig+0x50>)
 80017f8:	b086      	sub	sp, #24
 80017fa:	2400      	movs	r4, #0
  uint8_t index = 0, freqindex = 0xFF;
 80017fc:	26ff      	movs	r6, #255	; 0xff
 80017fe:	461d      	mov	r5, r3
    if(I2SFreq[index] == AudioFreq)
 8001800:	f853 0b04 	ldr.w	r0, [r3], #4
 8001804:	b2e2      	uxtb	r2, r4
 8001806:	3401      	adds	r4, #1
 8001808:	4288      	cmp	r0, r1
 800180a:	bf08      	it	eq
 800180c:	4616      	moveq	r6, r2
  for(index = 0; index < 8; index++)
 800180e:	2c08      	cmp	r4, #8
 8001810:	d1f6      	bne.n	8001800 <BSP_AUDIO_OUT_ClockConfig+0xc>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001812:	4668      	mov	r0, sp
 8001814:	f002 faae 	bl	8003d74 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 8001818:	2301      	movs	r3, #1
 800181a:	f016 0f07 	tst.w	r6, #7
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800181e:	e9cd 3400 	strd	r3, r4, [sp]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001822:	bf0b      	itete	eq
 8001824:	eb05 0386 	addeq.w	r3, r5, r6, lsl #2
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001828:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800182c:	6a1a      	ldreq	r2, [r3, #32]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800182e:	9302      	strne	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001830:	bf06      	itte	eq
 8001832:	6c1b      	ldreq	r3, [r3, #64]	; 0x40
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001834:	9202      	streq	r2, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001836:	2303      	movne	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001838:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800183a:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800183c:	f002 f9fa 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
}
 8001840:	b006      	add	sp, #24
 8001842:	bd70      	pop	{r4, r5, r6, pc}
 8001844:	08007138 	.word	0x08007138

08001848 <BSP_AUDIO_OUT_MspInit>:
{
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 800184c:	4c3f      	ldr	r4, [pc, #252]	; (800194c <BSP_AUDIO_OUT_MspInit+0x104>)
 800184e:	2500      	movs	r5, #0
 8001850:	9500      	str	r5, [sp, #0]
 8001852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	6423      	str	r3, [r4, #64]	; 0x40
 800185a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800185c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8001864:	9501      	str	r5, [sp, #4]
 8001866:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6323      	str	r3, [r4, #48]	; 0x30
 800186e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8001878:	9502      	str	r5, [sp, #8]
 800187a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6323      	str	r3, [r4, #48]	; 0x30
 8001882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800188a:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  I2S3_WS_CLK_ENABLE();
 800188e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	e9cd c305 	strd	ip, r3, [sp, #20]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001896:	e9cd 5307 	strd	r5, r3, [sp, #28]
{
 800189a:	4606      	mov	r6, r0
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800189c:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 800189e:	482c      	ldr	r0, [pc, #176]	; (8001950 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80018a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80018a2:	a905      	add	r1, sp, #20
 80018a4:	f000 fd30 	bl	8002308 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80018a8:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80018aa:	482a      	ldr	r0, [pc, #168]	; (8001954 <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80018ac:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80018ae:	a905      	add	r1, sp, #20
 80018b0:	f000 fd2a 	bl	8002308 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 80018b4:	9503      	str	r5, [sp, #12]
 80018b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <BSP_AUDIO_OUT_MspInit+0x108>)
  I2S3_MCK_CLK_ENABLE();
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6323      	str	r3, [r4, #48]	; 0x30
 80018c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	9303      	str	r3, [sp, #12]
 80018c8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80018ca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80018d0:	f000 fd1a 	bl	8002308 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 80018d4:	9504      	str	r5, [sp, #16]
 80018d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 80018d8:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 80018da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018de:	6323      	str	r3, [r4, #48]	; 0x30
 80018e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	9304      	str	r3, [sp, #16]
 80018e8:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <BSP_AUDIO_OUT_MspInit+0x110>)
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d123      	bne.n	8001938 <BSP_AUDIO_OUT_MspInit+0xf0>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80018f2:	2240      	movs	r2, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80018f4:	e9c3 2503 	strd	r2, r5, [r3, #12]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80018f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001900:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8001904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8001908:	e9c3 2507 	strd	r2, r5, [r3, #28]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800190c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001910:	2204      	movs	r2, #4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001912:	461c      	mov	r4, r3
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001914:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001918:	2203      	movs	r2, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800191a:	e9c3 250b 	strd	r2, r5, [r3, #44]	; 0x2c
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <BSP_AUDIO_OUT_MspInit+0x118>)
 8001920:	f844 2f04 	str.w	r2, [r4, #4]!
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001924:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001926:	4620      	mov	r0, r4
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001928:	609d      	str	r5, [r3, #8]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800192a:	635d      	str	r5, [r3, #52]	; 0x34
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 800192c:	63de      	str	r6, [r3, #60]	; 0x3c
    HAL_DMA_DeInit(&hdma_i2sTx);
 800192e:	f000 fb85 	bl	800203c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8001932:	4620      	mov	r0, r4
 8001934:	f000 fb02 	bl	8001f3c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	210e      	movs	r1, #14
 800193c:	202f      	movs	r0, #47	; 0x2f
 800193e:	f000 fa91 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8001942:	202f      	movs	r0, #47	; 0x2f
 8001944:	f000 fac0 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
}
 8001948:	b00a      	add	sp, #40	; 0x28
 800194a:	bd70      	pop	{r4, r5, r6, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020000 	.word	0x40020000
 8001958:	40003c00 	.word	0x40003c00
 800195c:	20000764 	.word	0x20000764
 8001960:	400260b8 	.word	0x400260b8

08001964 <BSP_AUDIO_OUT_Init>:
{    
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001968:	4c18      	ldr	r4, [pc, #96]	; (80019cc <BSP_AUDIO_OUT_Init+0x68>)
{    
 800196a:	4615      	mov	r5, r2
 800196c:	4606      	mov	r6, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800196e:	2200      	movs	r2, #0
 8001970:	4620      	mov	r0, r4
{    
 8001972:	460f      	mov	r7, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001974:	4629      	mov	r1, r5
 8001976:	f7ff ff3d 	bl	80017f4 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <BSP_AUDIO_OUT_Init+0x6c>)
 800197c:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 800197e:	4620      	mov	r0, r4
 8001980:	f001 fda9 	bl	80034d6 <HAL_I2S_GetState>
 8001984:	4601      	mov	r1, r0
 8001986:	b910      	cbnz	r0, 800198e <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff ff5d 	bl	8001848 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800198e:	4628      	mov	r0, r5
 8001990:	f7ff fea2 	bl	80016d8 <I2S3_Init>
 8001994:	4604      	mov	r4, r0
 8001996:	b118      	cbz	r0, 80019a0 <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 8001998:	2401      	movs	r4, #1
}
 800199a:	4620      	mov	r0, r4
 800199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80019a0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80019d8 <BSP_AUDIO_OUT_Init+0x74>
 80019a4:	2094      	movs	r0, #148	; 0x94
 80019a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80019aa:	4798      	blx	r3
 80019ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80019b0:	28e0      	cmp	r0, #224	; 0xe0
 80019b2:	d1f1      	bne.n	8001998 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <BSP_AUDIO_OUT_Init+0x70>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80019b6:	463a      	mov	r2, r7
      pAudioDrv = &cs43l22_drv; 
 80019b8:	f8c3 8000 	str.w	r8, [r3]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80019bc:	4631      	mov	r1, r6
 80019be:	f8d8 8000 	ldr.w	r8, [r8]
 80019c2:	462b      	mov	r3, r5
 80019c4:	2094      	movs	r0, #148	; 0x94
 80019c6:	47c0      	blx	r8
 80019c8:	e7e7      	b.n	800199a <BSP_AUDIO_OUT_Init+0x36>
 80019ca:	bf00      	nop
 80019cc:	20000a30 	.word	0x20000a30
 80019d0:	40003c00 	.word	0x40003c00
 80019d4:	20000764 	.word	0x20000764
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_I2S_TxCpltCallback>:
{
 80019dc:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80019de:	6802      	ldr	r2, [r0, #0]
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <HAL_I2S_TxCpltCallback+0x10>)
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d101      	bne.n	80019ea <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80019e6:	f002 fceb 	bl	80043c0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80019ea:	bd08      	pop	{r3, pc}
 80019ec:	40003c00 	.word	0x40003c00

080019f0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_I2S_TxHalfCpltCallback>:
{
 80019f4:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80019f6:	6802      	ldr	r2, [r0, #0]
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_I2S_TxHalfCpltCallback+0x10>)
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d101      	bne.n	8001a02 <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80019fe:	f7ff fff7 	bl	80019f0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001a02:	bd08      	pop	{r3, pc}
 8001a04:	40003c00 	.word	0x40003c00

08001a08 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001a08:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8001a0a:	b28a      	uxth	r2, r1
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	4802      	ldr	r0, [pc, #8]	; (8001a18 <BSP_AUDIO_IN_Record+0x10>)
 8001a10:	f001 fac2 	bl	8002f98 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001a14:	2000      	movs	r0, #0
 8001a16:	bd08      	pop	{r3, pc}
 8001a18:	20000a78 	.word	0x20000a78

08001a1c <BSP_AUDIO_IN_Stop>:

/**
  * @brief  Stops audio recording.
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 8001a1c:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 8001a1e:	4802      	ldr	r0, [pc, #8]	; (8001a28 <BSP_AUDIO_IN_Stop+0xc>)
 8001a20:	f001 fba6 	bl	8003170 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001a24:	2000      	movs	r0, #0
 8001a26:	bd08      	pop	{r3, pc}
 8001a28:	20000a78 	.word	0x20000a78

08001a2c <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	b0a0      	sub	sp, #128	; 0x80
 8001a30:	460c      	mov	r4, r1
 8001a32:	4669      	mov	r1, sp
 8001a34:	1e82      	subs	r2, r0, #2
 8001a36:	f100 037e 	add.w	r3, r0, #126	; 0x7e
 8001a3a:	4608      	mov	r0, r1
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 8001a3c:	f832 6f02 	ldrh.w	r6, [r2, #2]!
 8001a40:	0235      	lsls	r5, r6, #8
 8001a42:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8001a46:	4293      	cmp	r3, r2
    AppPDM[index] = HTONS(PDMBuf[index]);
 8001a48:	f821 5b02 	strh.w	r5, [r1], #2
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8001a4c:	d1f6      	bne.n	8001a3c <BSP_AUDIO_IN_PDMToPCM+0x10>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
    PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <BSP_AUDIO_IN_PDMToPCM+0x44>)
 8001a50:	4621      	mov	r1, r4
 8001a52:	f004 fe69 	bl	8006728 <PDM_Filter>
  }
  
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8001a56:	2300      	movs	r3, #0
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8001a58:	1ca2      	adds	r2, r4, #2
 8001a5a:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
 8001a5e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8001a62:	3301      	adds	r3, #1
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d1f8      	bne.n	8001a5a <BSP_AUDIO_IN_PDMToPCM+0x2e>
  }
	
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 8001a68:	2000      	movs	r0, #0
 8001a6a:	b020      	add	sp, #128	; 0x80
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000998 	.word	0x20000998

08001a74 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8001a74:	b510      	push	{r4, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;
  
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001a7a:	4668      	mov	r0, sp
 8001a7c:	f002 f97a 	bl	8003d74 <HAL_RCCEx_GetPeriphCLKConfig>
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8001a80:	2308      	movs	r3, #8
  if ((AudioFreq & 0x7) == 0)
 8001a82:	f014 0f07 	tst.w	r4, #7
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8001a86:	f04f 0201 	mov.w	r2, #1
 8001a8a:	e9cd 2300 	strd	r2, r3, [sp]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8001a8e:	bf0b      	itete	eq
 8001a90:	23c0      	moveq	r3, #192	; 0xc0
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001a92:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8001a96:	9302      	streq	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001a98:	9302      	strne	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8001a9e:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001aa0:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8001aa2:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001aa4:	f002 f8c6 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001aa8:	b006      	add	sp, #24
 8001aaa:	bd10      	pop	{r4, pc}

08001aac <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8001aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab0:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8001ab2:	4c3b      	ldr	r4, [pc, #236]	; (8001ba0 <BSP_AUDIO_IN_MspInit+0xf4>)
 8001ab4:	2500      	movs	r5, #0
 8001ab6:	9501      	str	r5, [sp, #4]
 8001ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abe:	6423      	str	r3, [r4, #64]	; 0x40
 8001ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8001aca:	9502      	str	r5, [sp, #8]
 8001acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8001ade:	9503      	str	r5, [sp, #12]
 8001ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	9303      	str	r3, [sp, #12]
 8001af0:	9b03      	ldr	r3, [sp, #12]
{
 8001af2:	4606      	mov	r6, r0
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001af6:	482b      	ldr	r0, [pc, #172]	; (8001ba4 <BSP_AUDIO_IN_MspInit+0xf8>)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001af8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 8001afa:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001afe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 8001b00:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 8001b08:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 8001b0a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001b0e:	f000 fbfb 	bl	8002308 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 8001b12:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001b14:	4824      	ldr	r0, [pc, #144]	; (8001ba8 <BSP_AUDIO_IN_MspInit+0xfc>)
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 8001b16:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001b18:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
 8001b1a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8001b1e:	f000 fbf3 	bl	8002308 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 8001b22:	9504      	str	r5, [sp, #16]
 8001b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 8001b26:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2c:	6323      	str	r3, [r4, #48]	; 0x30
 8001b2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	9304      	str	r3, [sp, #16]
 8001b36:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <BSP_AUDIO_IN_MspInit+0x100>)
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d124      	bne.n	8001b88 <BSP_AUDIO_IN_MspInit+0xdc>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b48:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8001b54:	461c      	mov	r4, r3
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b56:	e9c3 0220 	strd	r0, r2, [r3, #128]	; 0x80
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001b5a:	2203      	movs	r2, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001b5c:	e9c3 2523 	strd	r2, r5, [r3, #140]	; 0x8c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <BSP_AUDIO_IN_MspInit+0x108>)
 8001b62:	f844 2f64 	str.w	r2, [r4, #100]!
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8001b66:	63f4      	str	r4, [r6, #60]	; 0x3c
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8001b68:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001b6a:	e9c3 551a 	strd	r5, r5, [r3, #104]	; 0x68
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8001b6e:	e9c3 571c 	strd	r5, r7, [r3, #112]	; 0x70
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001b72:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8001b76:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8001b7a:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
    HAL_DMA_DeInit(&hdma_i2sRx);
 8001b7e:	f000 fa5d 	bl	800203c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8001b82:	4620      	mov	r0, r4
 8001b84:	f000 f9da 	bl	8001f3c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	200e      	movs	r0, #14
 8001b8e:	f000 f969 	bl	8001e64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8001b92:	200e      	movs	r0, #14
 8001b94:	f000 f998 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
}
 8001b98:	b00a      	add	sp, #40	; 0x28
 8001b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40003800 	.word	0x40003800
 8001bb0:	20000764 	.word	0x20000764
 8001bb4:	40026058 	.word	0x40026058

08001bb8 <BSP_AUDIO_IN_Init>:
{  
 8001bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	4691      	mov	r9, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	482d      	ldr	r0, [pc, #180]	; (8001c7c <BSP_AUDIO_IN_Init+0xc4>)
 8001bc6:	4c2e      	ldr	r4, [pc, #184]	; (8001c80 <BSP_AUDIO_IN_Init+0xc8>)
 8001bc8:	4e2e      	ldr	r6, [pc, #184]	; (8001c84 <BSP_AUDIO_IN_Init+0xcc>)
 8001bca:	f7ff ff53 	bl	8001a74 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8001bce:	2700      	movs	r7, #0
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <BSP_AUDIO_IN_Init+0xd0>)
 8001bd2:	9701      	str	r7, [sp, #4]
 8001bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	9b01      	ldr	r3, [sp, #4]
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <BSP_AUDIO_IN_Init+0xd4>)
 8001be8:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001bec:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8001bf0:	fb0a 4a09 	mla	sl, sl, r9, r4
 8001bf4:	fbb5 f8f8 	udiv	r8, r5, r8
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001bf8:	f04f 0b02 	mov.w	fp, #2
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001bfc:	fa1f f888 	uxth.w	r8, r8
  for(index = 0; index < ChnlNbrIn; index++)
 8001c00:	4554      	cmp	r4, sl
 8001c02:	d123      	bne.n	8001c4c <BSP_AUDIO_IN_Init+0x94>
  hAudioInI2s.Instance = I2S2;
 8001c04:	4c1d      	ldr	r4, [pc, #116]	; (8001c7c <BSP_AUDIO_IN_Init+0xc4>)
 8001c06:	4e22      	ldr	r6, [pc, #136]	; (8001c90 <BSP_AUDIO_IN_Init+0xd8>)
 8001c08:	6026      	str	r6, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f001 fc63 	bl	80034d6 <HAL_I2S_GetState>
 8001c10:	4601      	mov	r1, r0
 8001c12:	b910      	cbnz	r0, 8001c1a <BSP_AUDIO_IN_Init+0x62>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff ff49 	bl	8001aac <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001c1a:	69f3      	ldr	r3, [r6, #28]
  hAudioInI2s.Instance          = I2S2;
 8001c1c:	6026      	str	r6, [r4, #0]
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8001c22:	006d      	lsls	r5, r5, #1
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001c24:	61f3      	str	r3, [r6, #28]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8001c26:	6165      	str	r5, [r4, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8001c28:	2308      	movs	r3, #8
 8001c2a:	2500      	movs	r5, #0
 8001c2c:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001c30:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c34:	2320      	movs	r3, #32
  
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001c36:	4811      	ldr	r0, [pc, #68]	; (8001c7c <BSP_AUDIO_IN_Init+0xc4>)
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8001c38:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001c3c:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001c40:	f001 f8ac 	bl	8002d9c <HAL_I2S_Init>
}
 8001c44:	4628      	mov	r0, r5
 8001c46:	b003      	add	sp, #12
 8001c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001c4c:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8001c4e:	8027      	strh	r7, [r4, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8001c50:	8067      	strh	r7, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001c52:	f8a4 b00a 	strh.w	fp, [r4, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001c56:	f8a4 9008 	strh.w	r9, [r4, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f004 fbe8 	bl	8006430 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 8001c60:	2218      	movs	r2, #24
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001c62:	f8a6 8002 	strh.w	r8, [r6, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 8001c66:	80b2      	strh	r2, [r6, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001c68:	f8a6 b000 	strh.w	fp, [r6]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001c6c:	4631      	mov	r1, r6
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f004 fc68 	bl	8006544 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8001c74:	344c      	adds	r4, #76	; 0x4c
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <BSP_AUDIO_IN_Init+0xd4>)
 8001c78:	3606      	adds	r6, #6
 8001c7a:	e7c1      	b.n	8001c00 <BSP_AUDIO_IN_Init+0x48>
 8001c7c:	20000a78 	.word	0x20000a78
 8001c80:	20000998 	.word	0x20000998
 8001c84:	2000098c 	.word	0x2000098c
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	7e809d48 	.word	0x7e809d48
 8001c90:	40003800 	.word	0x40003800

08001c94 <HAL_I2S_RxCpltCallback>:
{
 8001c94:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001c96:	f002 fcc5 	bl	8004624 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001c9a:	bd08      	pop	{r3, pc}

08001c9c <HAL_I2S_RxHalfCpltCallback>:
{
 8001c9c:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001c9e:	f002 fcc7 	bl	8004630 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001ca2:	bd08      	pop	{r3, pc}

08001ca4 <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8001ca4:	6802      	ldr	r2, [r0, #0]
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_I2S_ErrorCallback+0x20>)
 8001ca8:	429a      	cmp	r2, r3
{
 8001caa:	b510      	push	{r4, lr}
 8001cac:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001cb0:	f002 fbde 	bl	8004470 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001cb4:	6822      	ldr	r2, [r4, #0]
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_I2S_ErrorCallback+0x24>)
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d101      	bne.n	8001cc0 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001cbc:	f002 fcbe 	bl	800463c <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001cc0:	bd10      	pop	{r4, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40003c00 	.word	0x40003c00
 8001cc8:	40003800 	.word	0x40003800

08001ccc <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001ccc:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001cce:	4c10      	ldr	r4, [pc, #64]	; (8001d10 <BSP_GYRO_Init+0x44>)
 8001cd0:	68a3      	ldr	r3, [r4, #8]
 8001cd2:	4798      	blx	r3
 8001cd4:	28d4      	cmp	r0, #212	; 0xd4
 8001cd6:	4625      	mov	r5, r4
 8001cd8:	d10f      	bne.n	8001cfa <BSP_GYRO_Init+0x2e>
    ret = GYRO_OK;
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8001cda:	4c0e      	ldr	r4, [pc, #56]	; (8001d14 <BSP_GYRO_Init+0x48>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001cdc:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &I3g4250Drv;
 8001cde:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 8001ce0:	f241 003f 	movw	r0, #4159	; 0x103f
 8001ce4:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	2000      	movs	r0, #0
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	2010      	movs	r0, #16
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	4798      	blx	r3

    ret = GYRO_OK;
 8001cf6:	2000      	movs	r0, #0
  }

  return ret;
}
 8001cf8:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001cfa:	68a3      	ldr	r3, [r4, #8]
 8001cfc:	4798      	blx	r3
 8001cfe:	28d5      	cmp	r0, #213	; 0xd5
 8001d00:	d0eb      	beq.n	8001cda <BSP_GYRO_Init+0xe>
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8001d02:	4d05      	ldr	r5, [pc, #20]	; (8001d18 <BSP_GYRO_Init+0x4c>)
 8001d04:	68ab      	ldr	r3, [r5, #8]
 8001d06:	4798      	blx	r3
 8001d08:	28d3      	cmp	r0, #211	; 0xd3
 8001d0a:	d0e6      	beq.n	8001cda <BSP_GYRO_Init+0xe>
  uint8_t ret = GYRO_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7f3      	b.n	8001cf8 <BSP_GYRO_Init+0x2c>
 8001d10:	20000068 	.word	0x20000068
 8001d14:	20000828 	.word	0x20000828
 8001d18:	20000034 	.word	0x20000034

08001d1c <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <BSP_GYRO_GetXYZ+0xc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	b103      	cbz	r3, 8001d26 <BSP_GYRO_GetXYZ+0xa>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001d24:	4718      	bx	r3
  }
}
 8001d26:	4770      	bx	lr
 8001d28:	20000828 	.word	0x20000828

08001d2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <SystemInit+0x40>)
 8001d2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001d32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <SystemInit+0x44>)
 8001d3c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d3e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001d46:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d52:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <SystemInit+0x48>)
 8001d56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d60:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d66:	608b      	str	r3, [r1, #8]
#endif
}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	24003010 	.word	0x24003010

08001d78 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_InitTick+0x3c>)
 8001d80:	4e0e      	ldr	r6, [pc, #56]	; (8001dbc <HAL_InitTick+0x40>)
{
 8001d82:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d88:	7830      	ldrb	r0, [r6, #0]
 8001d8a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d8e:	6810      	ldr	r0, [r2, #0]
 8001d90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d94:	f000 f8a6 	bl	8001ee4 <HAL_SYSTICK_Config>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	b950      	cbnz	r0, 8001db2 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9c:	2d0f      	cmp	r5, #15
 8001d9e:	d808      	bhi.n	8001db2 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da0:	4602      	mov	r2, r0
 8001da2:	4629      	mov	r1, r5
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295
 8001da8:	f000 f85c 	bl	8001e64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dac:	6075      	str	r5, [r6, #4]
 8001dae:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	e7fc      	b.n	8001db0 <HAL_InitTick+0x34>
 8001db6:	bf00      	nop
 8001db8:	20000120 	.word	0x20000120
 8001dbc:	20000124 	.word	0x20000124

08001dc0 <HAL_Init>:
{
 8001dc0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_Init+0x30>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dd2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dda:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 f82f 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f7ff ffca 	bl	8001d7c <HAL_InitTick>
  HAL_MspInit();
 8001de8:	f7ff ffc6 	bl	8001d78 <HAL_MspInit>
}
 8001dec:	2000      	movs	r0, #0
 8001dee:	bd08      	pop	{r3, pc}
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <HAL_IncTick+0x10>)
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_IncTick+0x14>)
 8001df8:	6811      	ldr	r1, [r2, #0]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000ac0 	.word	0x20000ac0
 8001e08:	20000124 	.word	0x20000124

08001e0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e0c:	4b01      	ldr	r3, [pc, #4]	; (8001e14 <HAL_GetTick+0x8>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000ac0 	.word	0x20000ac0

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b538      	push	{r3, r4, r5, lr}
 8001e1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff fff6 	bl	8001e0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e20:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e22:	bf1c      	itt	ne
 8001e24:	4b05      	ldrne	r3, [pc, #20]	; (8001e3c <HAL_Delay+0x24>)
 8001e26:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001e2a:	bf18      	it	ne
 8001e2c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e2e:	f7ff ffed 	bl	8001e0c <HAL_GetTick>
 8001e32:	1b43      	subs	r3, r0, r5
 8001e34:	42a3      	cmp	r3, r4
 8001e36:	d3fa      	bcc.n	8001e2e <HAL_Delay+0x16>
  {
  }
}
 8001e38:	bd38      	pop	{r3, r4, r5, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000124 	.word	0x20000124

08001e40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e50:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b530      	push	{r4, r5, lr}
 8001e68:	68dc      	ldr	r4, [r3, #12]
 8001e6a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	2d04      	cmp	r5, #4
 8001e76:	bf28      	it	cs
 8001e78:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e80:	bf8c      	ite	hi
 8001e82:	3c03      	subhi	r4, #3
 8001e84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e86:	fa03 f505 	lsl.w	r5, r3, r5
 8001e8a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8e:	40a3      	lsls	r3, r4
 8001e90:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001e96:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	bfac      	ite	ge
 8001e9e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	4a08      	ldrlt	r2, [pc, #32]	; (8001ec4 <HAL_NVIC_SetPriority+0x60>)
 8001ea4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ea8:	bfb8      	it	lt
 8001eaa:	f000 000f 	andlt.w	r0, r0, #15
 8001eae:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	bfaa      	itet	ge
 8001eb2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ebc:	bd30      	pop	{r4, r5, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	e000ed14 	.word	0xe000ed14

08001ec8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	db08      	blt.n	8001ede <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ecc:	0942      	lsrs	r2, r0, #5
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f000 001f 	and.w	r0, r0, #31
 8001ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ed8:	4b01      	ldr	r3, [pc, #4]	; (8001ee0 <HAL_NVIC_EnableIRQ+0x18>)
 8001eda:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001eea:	d20a      	bcs.n	8001f02 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	21f0      	movs	r1, #240	; 0xf0
 8001ef4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f10:	6803      	ldr	r3, [r0, #0]
{
 8001f12:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f14:	4c08      	ldr	r4, [pc, #32]	; (8001f38 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001f16:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f18:	b2d9      	uxtb	r1, r3
 8001f1a:	3910      	subs	r1, #16
 8001f1c:	2018      	movs	r0, #24
 8001f1e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f22:	5c20      	ldrb	r0, [r4, r0]
 8001f24:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f26:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001f2a:	f020 0003 	bic.w	r0, r0, #3
 8001f2e:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f30:	bf88      	it	hi
 8001f32:	3004      	addhi	r0, #4
 8001f34:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	080071b0 	.word	0x080071b0

08001f3c <HAL_DMA_Init>:
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ff64 	bl	8001e0c <HAL_GetTick>
 8001f44:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001f46:	2c00      	cmp	r4, #0
 8001f48:	d073      	beq.n	8002032 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001f50:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001f52:	2300      	movs	r3, #0
 8001f54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001f58:	6813      	ldr	r3, [r2, #0]
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f60:	6821      	ldr	r1, [r4, #0]
 8001f62:	680b      	ldr	r3, [r1, #0]
 8001f64:	07d8      	lsls	r0, r3, #31
 8001f66:	d42f      	bmi.n	8001fc8 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001f68:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f6a:	4d33      	ldr	r5, [pc, #204]	; (8002038 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6c:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f6e:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f70:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	68e2      	ldr	r2, [r4, #12]
 8001f78:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7a:	6922      	ldr	r2, [r4, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	6962      	ldr	r2, [r4, #20]
 8001f80:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f82:	69e2      	ldr	r2, [r4, #28]
 8001f84:	4303      	orrs	r3, r0
 8001f86:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f88:	6a22      	ldr	r2, [r4, #32]
 8001f8a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f8e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f90:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f94:	bf02      	ittt	eq
 8001f96:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001f9a:	4335      	orreq	r5, r6
 8001f9c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001f9e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001fa0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fa4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001fa8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fac:	d133      	bne.n	8002016 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8001fae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001fb2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb4:	b37d      	cbz	r5, 8002016 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fb6:	b990      	cbnz	r0, 8001fde <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001fb8:	2a01      	cmp	r2, #1
 8001fba:	d021      	beq.n	8002000 <HAL_DMA_Init+0xc4>
 8001fbc:	f032 0202 	bics.w	r2, r2, #2
 8001fc0:	d129      	bne.n	8002016 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc2:	01ea      	lsls	r2, r5, #7
 8001fc4:	d527      	bpl.n	8002016 <HAL_DMA_Init+0xda>
 8001fc6:	e01e      	b.n	8002006 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc8:	f7ff ff20 	bl	8001e0c <HAL_GetTick>
 8001fcc:	1b40      	subs	r0, r0, r5
 8001fce:	2805      	cmp	r0, #5
 8001fd0:	d9c6      	bls.n	8001f60 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd6:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fde:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001fe2:	d114      	bne.n	800200e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001fe4:	2a03      	cmp	r2, #3
 8001fe6:	d816      	bhi.n	8002016 <HAL_DMA_Init+0xda>
 8001fe8:	a001      	add	r0, pc, #4	; (adr r0, 8001ff0 <HAL_DMA_Init+0xb4>)
 8001fea:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002007 	.word	0x08002007
 8001ff4:	08001fc3 	.word	0x08001fc3
 8001ff8:	08002007 	.word	0x08002007
 8001ffc:	08002001 	.word	0x08002001
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002000:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002004:	d107      	bne.n	8002016 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002006:	2340      	movs	r3, #64	; 0x40
 8002008:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800200a:	2001      	movs	r0, #1
 800200c:	e7e4      	b.n	8001fd8 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800200e:	2a02      	cmp	r2, #2
 8002010:	d9f9      	bls.n	8002006 <HAL_DMA_Init+0xca>
 8002012:	2a03      	cmp	r2, #3
 8002014:	d0d5      	beq.n	8001fc2 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002016:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff ff79 	bl	8001f10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002020:	233f      	movs	r3, #63	; 0x3f
 8002022:	4093      	lsls	r3, r2
 8002024:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002026:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002028:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800202c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002030:	e7d4      	b.n	8001fdc <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
 8002034:	e7d2      	b.n	8001fdc <HAL_DMA_Init+0xa0>
 8002036:	bf00      	nop
 8002038:	f010803f 	.word	0xf010803f

0800203c <HAL_DMA_DeInit>:
{
 800203c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800203e:	4605      	mov	r5, r0
 8002040:	b320      	cbz	r0, 800208c <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002042:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002046:	2b02      	cmp	r3, #2
 8002048:	b2dc      	uxtb	r4, r3
 800204a:	d01d      	beq.n	8002088 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8002054:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002056:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002058:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800205a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800205c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800205e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002060:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002062:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002064:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002066:	f7ff ff53 	bl	8001f10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800206c:	233f      	movs	r3, #63	; 0x3f
 800206e:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8002070:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002074:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8002078:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800207c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002080:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002084:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8002088:	4620      	mov	r0, r4
 800208a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800208c:	2401      	movs	r4, #1
 800208e:	e7fb      	b.n	8002088 <HAL_DMA_DeInit+0x4c>

08002090 <HAL_DMA_Start_IT>:
{
 8002090:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002092:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002098:	2c01      	cmp	r4, #1
 800209a:	d031      	beq.n	8002100 <HAL_DMA_Start_IT+0x70>
 800209c:	2401      	movs	r4, #1
 800209e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020a2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80020a6:	2c01      	cmp	r4, #1
 80020a8:	f04f 0500 	mov.w	r5, #0
 80020ac:	f04f 0402 	mov.w	r4, #2
 80020b0:	d124      	bne.n	80020fc <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020b6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ba:	6825      	ldr	r5, [r4, #0]
 80020bc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80020c0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80020c2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020c4:	6883      	ldr	r3, [r0, #8]
 80020c6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80020c8:	bf0e      	itee	eq
 80020ca:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80020cc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80020ce:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80020d2:	bf08      	it	eq
 80020d4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d6:	233f      	movs	r3, #63	; 0x3f
 80020d8:	4093      	lsls	r3, r2
 80020da:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f043 0316 	orr.w	r3, r3, #22
 80020e2:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80020e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020e6:	b11b      	cbz	r3, 80020f0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2000      	movs	r0, #0
}
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80020fc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002100:	2002      	movs	r0, #2
 8002102:	e7fa      	b.n	80020fa <HAL_DMA_Start_IT+0x6a>

08002104 <HAL_DMA_Abort>:
{
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002108:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800210a:	f7ff fe7f 	bl	8001e0c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800210e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002112:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002114:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002116:	d006      	beq.n	8002126 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800211c:	2300      	movs	r3, #0
 800211e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
}
 8002124:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	f022 0216 	bic.w	r2, r2, #22
 800212e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002136:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002138:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800213a:	b90a      	cbnz	r2, 8002140 <HAL_DMA_Abort+0x3c>
 800213c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800213e:	b11a      	cbz	r2, 8002148 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f022 0208 	bic.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f013 0301 	ands.w	r3, r3, #1
 8002158:	d10a      	bne.n	8002170 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800215c:	223f      	movs	r2, #63	; 0x3f
 800215e:	408a      	lsls	r2, r1
 8002160:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002162:	2201      	movs	r2, #1
 8002164:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002168:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800216c:	4618      	mov	r0, r3
 800216e:	e7d9      	b.n	8002124 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002170:	f7ff fe4c 	bl	8001e0c <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	2805      	cmp	r0, #5
 8002178:	d9ea      	bls.n	8002150 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217a:	2320      	movs	r3, #32
 800217c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8002180:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002182:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002186:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800218a:	e7cb      	b.n	8002124 <HAL_DMA_Abort+0x20>

0800218c <HAL_DMA_IRQHandler>:
{
 800218c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002192:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002194:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002196:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002198:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800219a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800219c:	2208      	movs	r2, #8
 800219e:	409a      	lsls	r2, r3
 80021a0:	4232      	tst	r2, r6
{
 80021a2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a4:	d00c      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021a6:	6801      	ldr	r1, [r0, #0]
 80021a8:	6808      	ldr	r0, [r1, #0]
 80021aa:	0740      	lsls	r0, r0, #29
 80021ac:	d508      	bpl.n	80021c0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021ae:	6808      	ldr	r0, [r1, #0]
 80021b0:	f020 0004 	bic.w	r0, r0, #4
 80021b4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c0:	2201      	movs	r2, #1
 80021c2:	409a      	lsls	r2, r3
 80021c4:	4232      	tst	r2, r6
 80021c6:	d008      	beq.n	80021da <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c8:	6821      	ldr	r1, [r4, #0]
 80021ca:	6949      	ldr	r1, [r1, #20]
 80021cc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ce:	bf41      	itttt	mi
 80021d0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021d2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80021d4:	f042 0202 	orrmi.w	r2, r2, #2
 80021d8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021da:	2204      	movs	r2, #4
 80021dc:	409a      	lsls	r2, r3
 80021de:	4232      	tst	r2, r6
 80021e0:	d008      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021e2:	6821      	ldr	r1, [r4, #0]
 80021e4:	6809      	ldr	r1, [r1, #0]
 80021e6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021e8:	bf41      	itttt	mi
 80021ea:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021ec:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80021ee:	f042 0204 	orrmi.w	r2, r2, #4
 80021f2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	2210      	movs	r2, #16
 80021f6:	409a      	lsls	r2, r3
 80021f8:	4232      	tst	r2, r6
 80021fa:	d010      	beq.n	800221e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	0709      	lsls	r1, r1, #28
 8002202:	d50c      	bpl.n	800221e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002204:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	0350      	lsls	r0, r2, #13
 800220a:	d537      	bpl.n	800227c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	0319      	lsls	r1, r3, #12
 8002210:	d401      	bmi.n	8002216 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002214:	e000      	b.n	8002218 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002216:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002218:	b10b      	cbz	r3, 800221e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800221a:	4620      	mov	r0, r4
 800221c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800221e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002220:	2220      	movs	r2, #32
 8002222:	408a      	lsls	r2, r1
 8002224:	4232      	tst	r2, r6
 8002226:	d03a      	beq.n	800229e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	06c6      	lsls	r6, r0, #27
 800222e:	d536      	bpl.n	800229e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002230:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002232:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002236:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002238:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223a:	d127      	bne.n	800228c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800223c:	f022 0216 	bic.w	r2, r2, #22
 8002240:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002248:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800224c:	b90a      	cbnz	r2, 8002252 <HAL_DMA_IRQHandler+0xc6>
 800224e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002250:	b11a      	cbz	r2, 800225a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	f022 0208 	bic.w	r2, r2, #8
 8002258:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	233f      	movs	r3, #63	; 0x3f
 800225c:	408b      	lsls	r3, r1
 800225e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002260:	2301      	movs	r3, #1
 8002262:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002266:	2300      	movs	r3, #0
 8002268:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 800226c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800226e:	2b00      	cmp	r3, #0
 8002270:	d045      	beq.n	80022fe <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002272:	4620      	mov	r0, r4
}
 8002274:	b003      	add	sp, #12
 8002276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800227a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002280:	bf5e      	ittt	pl
 8002282:	681a      	ldrpl	r2, [r3, #0]
 8002284:	f022 0208 	bicpl.w	r2, r2, #8
 8002288:	601a      	strpl	r2, [r3, #0]
 800228a:	e7c2      	b.n	8002212 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228c:	0350      	lsls	r0, r2, #13
 800228e:	d527      	bpl.n	80022e0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0319      	lsls	r1, r3, #12
 8002294:	d431      	bmi.n	80022fa <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002296:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002298:	b10b      	cbz	r3, 800229e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800229a:	4620      	mov	r0, r4
 800229c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800229e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022a0:	b36b      	cbz	r3, 80022fe <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022a4:	07da      	lsls	r2, r3, #31
 80022a6:	d519      	bpl.n	80022dc <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 80022a8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80022ae:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	2305      	movs	r3, #5
 80022b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	3301      	adds	r3, #1
 80022c4:	42bb      	cmp	r3, r7
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	d802      	bhi.n	80022d0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	07db      	lsls	r3, r3, #31
 80022ce:	d4f7      	bmi.n	80022c0 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80022d6:	2300      	movs	r3, #0
 80022d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80022dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022de:	e7c6      	b.n	800226e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80022e6:	d108      	bne.n	80022fa <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	f021 0110 	bic.w	r1, r1, #16
 80022ee:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80022f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80022fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022fc:	e7cc      	b.n	8002298 <HAL_DMA_IRQHandler+0x10c>
}
 80022fe:	b003      	add	sp, #12
 8002300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002302:	bf00      	nop
 8002304:	20000120 	.word	0x20000120

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002494 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4a5e      	ldr	r2, [pc, #376]	; (800248c <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002314:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002316:	2401      	movs	r4, #1
 8002318:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800231e:	43ac      	bics	r4, r5
 8002320:	f040 80a5 	bne.w	800246e <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002324:	684d      	ldr	r5, [r1, #4]
 8002326:	f005 0403 	and.w	r4, r5, #3
 800232a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800232e:	2603      	movs	r6, #3
 8002330:	1e67      	subs	r7, r4, #1
 8002332:	fa06 f608 	lsl.w	r6, r6, r8
 8002336:	2f01      	cmp	r7, #1
 8002338:	ea6f 0606 	mvn.w	r6, r6
 800233c:	d834      	bhi.n	80023a8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800233e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002344:	68cf      	ldr	r7, [r1, #12]
 8002346:	fa07 f708 	lsl.w	r7, r7, r8
 800234a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800234e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002350:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002352:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002356:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800235a:	409f      	lsls	r7, r3
 800235c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002360:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002362:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002364:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	688f      	ldr	r7, [r1, #8]
 800236a:	fa07 f708 	lsl.w	r7, r7, r8
 800236e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002372:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002374:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002376:	d119      	bne.n	80023ac <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002378:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800237c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002380:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002384:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002388:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800238c:	f04f 0e0f 	mov.w	lr, #15
 8002390:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002394:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002398:	690f      	ldr	r7, [r1, #16]
 800239a:	fa07 f70b 	lsl.w	r7, r7, fp
 800239e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	f8ca 7020 	str.w	r7, [sl, #32]
 80023a6:	e001      	b.n	80023ac <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a8:	2c03      	cmp	r4, #3
 80023aa:	d1da      	bne.n	8002362 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80023ac:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ae:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80023ba:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023bc:	d057      	beq.n	800246e <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	f04f 0a00 	mov.w	sl, #0
 80023c2:	f8cd a004 	str.w	sl, [sp, #4]
 80023c6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ca:	4c31      	ldr	r4, [pc, #196]	; (8002490 <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023cc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80023d0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80023d4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80023d8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80023dc:	9601      	str	r6, [sp, #4]
 80023de:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80023e0:	f023 0603 	bic.w	r6, r3, #3
 80023e4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80023e8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ec:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80023f0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80023f8:	270f      	movs	r7, #15
 80023fa:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002400:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002404:	d03a      	beq.n	800247c <HAL_GPIO_Init+0x174>
 8002406:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800240a:	42a0      	cmp	r0, r4
 800240c:	d038      	beq.n	8002480 <HAL_GPIO_Init+0x178>
 800240e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002412:	42a0      	cmp	r0, r4
 8002414:	d036      	beq.n	8002484 <HAL_GPIO_Init+0x17c>
 8002416:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800241a:	42a0      	cmp	r0, r4
 800241c:	d034      	beq.n	8002488 <HAL_GPIO_Init+0x180>
 800241e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002422:	42a0      	cmp	r0, r4
 8002424:	bf0c      	ite	eq
 8002426:	2404      	moveq	r4, #4
 8002428:	2407      	movne	r4, #7
 800242a:	fa04 f40e 	lsl.w	r4, r4, lr
 800242e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002432:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002434:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002438:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800243a:	bf54      	ite	pl
 800243c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800243e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002442:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002444:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002446:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002448:	bf54      	ite	pl
 800244a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800244c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002450:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002454:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002456:	bf54      	ite	pl
 8002458:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800245a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800245e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002462:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002464:	bf54      	ite	pl
 8002466:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002468:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800246c:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	3301      	adds	r3, #1
 8002470:	2b10      	cmp	r3, #16
 8002472:	f47f af4f 	bne.w	8002314 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002476:	b003      	add	sp, #12
 8002478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247c:	4654      	mov	r4, sl
 800247e:	e7d4      	b.n	800242a <HAL_GPIO_Init+0x122>
 8002480:	2401      	movs	r4, #1
 8002482:	e7d2      	b.n	800242a <HAL_GPIO_Init+0x122>
 8002484:	2402      	movs	r4, #2
 8002486:	e7d0      	b.n	800242a <HAL_GPIO_Init+0x122>
 8002488:	2403      	movs	r4, #3
 800248a:	e7ce      	b.n	800242a <HAL_GPIO_Init+0x122>
 800248c:	40013c00 	.word	0x40013c00
 8002490:	40020000 	.word	0x40020000
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002498:	6903      	ldr	r3, [r0, #16]
 800249a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800249c:	bf14      	ite	ne
 800249e:	2001      	movne	r0, #1
 80024a0:	2000      	moveq	r0, #0
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	b10a      	cbz	r2, 80024aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a6:	6181      	str	r1, [r0, #24]
  }
}
 80024a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024aa:	0409      	lsls	r1, r1, #16
 80024ac:	e7fb      	b.n	80024a6 <HAL_GPIO_WritePin+0x2>

080024ae <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024ae:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b0:	ea01 0203 	and.w	r2, r1, r3
 80024b4:	ea21 0103 	bic.w	r1, r1, r3
 80024b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80024bc:	6181      	str	r1, [r0, #24]
}
 80024be:	4770      	bx	lr

080024c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80024c2:	6951      	ldr	r1, [r2, #20]
 80024c4:	4201      	tst	r1, r0
{
 80024c6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c8:	d002      	beq.n	80024d0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ca:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024cc:	f002 f8b8 	bl	8004640 <HAL_GPIO_EXTI_Callback>
  }
}
 80024d0:	bd08      	pop	{r3, pc}
 80024d2:	bf00      	nop
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d8:	6801      	ldr	r1, [r0, #0]
 80024da:	694b      	ldr	r3, [r1, #20]
 80024dc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	d010      	beq.n	8002508 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80024ea:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ec:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80024ee:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f8:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002504:	2001      	movs	r0, #1
 8002506:	4770      	bx	lr
  }
  return HAL_OK;
 8002508:	4618      	mov	r0, r3
}
 800250a:	4770      	bx	lr

0800250c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002510:	4604      	mov	r4, r0
 8002512:	460f      	mov	r7, r1
 8002514:	4616      	mov	r6, r2
 8002516:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	6825      	ldr	r5, [r4, #0]
 800251a:	6968      	ldr	r0, [r5, #20]
 800251c:	ea27 0000 	bic.w	r0, r7, r0
 8002520:	b280      	uxth	r0, r0
 8002522:	b1b8      	cbz	r0, 8002554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002524:	696b      	ldr	r3, [r5, #20]
 8002526:	055a      	lsls	r2, r3, #21
 8002528:	d516      	bpl.n	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	682b      	ldr	r3, [r5, #0]
 800252c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002530:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002532:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002536:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800253e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002542:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002546:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002548:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800254e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002552:	2001      	movs	r0, #1
}
 8002554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002558:	1c73      	adds	r3, r6, #1
 800255a:	d0de      	beq.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255c:	f7ff fc56 	bl	8001e0c <HAL_GetTick>
 8002560:	eba0 0008 	sub.w	r0, r0, r8
 8002564:	42b0      	cmp	r0, r6
 8002566:	d801      	bhi.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002568:	2e00      	cmp	r6, #0
 800256a:	d1d5      	bne.n	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800256c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002570:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002572:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002576:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	e7e4      	b.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002582 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002582:	b570      	push	{r4, r5, r6, lr}
 8002584:	4604      	mov	r4, r0
 8002586:	460d      	mov	r5, r1
 8002588:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800258a:	6823      	ldr	r3, [r4, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	075b      	lsls	r3, r3, #29
 8002590:	d501      	bpl.n	8002596 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002592:	2000      	movs	r0, #0
}
 8002594:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff ff9e 	bl	80024d8 <I2C_IsAcknowledgeFailed>
 800259c:	b9a8      	cbnz	r0, 80025ca <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800259e:	1c6a      	adds	r2, r5, #1
 80025a0:	d0f3      	beq.n	800258a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a2:	f7ff fc33 	bl	8001e0c <HAL_GetTick>
 80025a6:	1b80      	subs	r0, r0, r6
 80025a8:	42a8      	cmp	r0, r5
 80025aa:	d801      	bhi.n	80025b0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	d1ec      	bne.n	800258a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025b0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80025b2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025b4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025be:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
 80025cc:	e7e2      	b.n	8002594 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080025ce <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80025ce:	b570      	push	{r4, r5, r6, lr}
 80025d0:	4604      	mov	r4, r0
 80025d2:	460d      	mov	r5, r1
 80025d4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025d6:	6821      	ldr	r1, [r4, #0]
 80025d8:	694b      	ldr	r3, [r1, #20]
 80025da:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80025de:	d001      	beq.n	80025e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80025e0:	2000      	movs	r0, #0
 80025e2:	e010      	b.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025e4:	694a      	ldr	r2, [r1, #20]
 80025e6:	06d2      	lsls	r2, r2, #27
 80025e8:	d50e      	bpl.n	8002608 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	f06f 0210 	mvn.w	r2, #16
 80025ee:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025fe:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002600:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002604:	2001      	movs	r0, #1
}
 8002606:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002608:	f7ff fc00 	bl	8001e0c <HAL_GetTick>
 800260c:	1b80      	subs	r0, r0, r6
 800260e:	42a8      	cmp	r0, r5
 8002610:	d801      	bhi.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002612:	2d00      	cmp	r5, #0
 8002614:	d1df      	bne.n	80025d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002616:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002618:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800261a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800261c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002620:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002626:	f042 0220 	orr.w	r2, r2, #32
 800262a:	e7e8      	b.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800262c <I2C_WaitOnFlagUntilTimeout>:
{
 800262c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002630:	4606      	mov	r6, r0
 8002632:	460f      	mov	r7, r1
 8002634:	4691      	mov	r9, r2
 8002636:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002638:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800263c:	6833      	ldr	r3, [r6, #0]
 800263e:	f1ba 0f01 	cmp.w	sl, #1
 8002642:	bf0c      	ite	eq
 8002644:	695c      	ldreq	r4, [r3, #20]
 8002646:	699c      	ldrne	r4, [r3, #24]
 8002648:	ea27 0404 	bic.w	r4, r7, r4
 800264c:	b2a4      	uxth	r4, r4
 800264e:	fab4 f484 	clz	r4, r4
 8002652:	0964      	lsrs	r4, r4, #5
 8002654:	45a1      	cmp	r9, r4
 8002656:	d001      	beq.n	800265c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002658:	2000      	movs	r0, #0
 800265a:	e017      	b.n	800268c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800265c:	1c6a      	adds	r2, r5, #1
 800265e:	d0ee      	beq.n	800263e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002660:	f7ff fbd4 	bl	8001e0c <HAL_GetTick>
 8002664:	9b08      	ldr	r3, [sp, #32]
 8002666:	1ac0      	subs	r0, r0, r3
 8002668:	42a8      	cmp	r0, r5
 800266a:	d801      	bhi.n	8002670 <I2C_WaitOnFlagUntilTimeout+0x44>
 800266c:	2d00      	cmp	r5, #0
 800266e:	d1e5      	bne.n	800263c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002670:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002672:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002674:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002676:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800267a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002680:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	f042 0220 	orr.w	r2, r2, #32
 8002688:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800268a:	2001      	movs	r0, #1
}
 800268c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002690 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	4604      	mov	r4, r0
 8002694:	460d      	mov	r5, r1
 8002696:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	d501      	bpl.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80026a0:	2000      	movs	r0, #0
}
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7ff ff17 	bl	80024d8 <I2C_IsAcknowledgeFailed>
 80026aa:	b9a8      	cbnz	r0, 80026d8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80026ac:	1c6a      	adds	r2, r5, #1
 80026ae:	d0f3      	beq.n	8002698 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b0:	f7ff fbac 	bl	8001e0c <HAL_GetTick>
 80026b4:	1b80      	subs	r0, r0, r6
 80026b6:	42a8      	cmp	r0, r5
 80026b8:	d801      	bhi.n	80026be <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	d1ec      	bne.n	8002698 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026be:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80026c0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026c2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80026ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7e2      	b.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080026dc <I2C_RequestMemoryWrite>:
{
 80026dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026e0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e2:	6802      	ldr	r2, [r0, #0]
{
 80026e4:	b085      	sub	sp, #20
 80026e6:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80026ea:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
{
 80026f4:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f6:	463b      	mov	r3, r7
 80026f8:	f8cd 8000 	str.w	r8, [sp]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002702:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002704:	f7ff ff92 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	b138      	cbz	r0, 800271c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	d502      	bpl.n	8002718 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002716:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002718:	2003      	movs	r0, #3
 800271a:	e00a      	b.n	8002732 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002720:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002722:	4919      	ldr	r1, [pc, #100]	; (8002788 <I2C_RequestMemoryWrite+0xac>)
 8002724:	4643      	mov	r3, r8
 8002726:	463a      	mov	r2, r7
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff feef 	bl	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800272e:	b118      	cbz	r0, 8002738 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
}
 8002732:	b005      	add	sp, #20
 8002734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	9003      	str	r0, [sp, #12]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	9203      	str	r2, [sp, #12]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002744:	4642      	mov	r2, r8
 8002746:	4639      	mov	r1, r7
 8002748:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274c:	f7ff ffa0 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002750:	b140      	cbz	r0, 8002764 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002754:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	bf01      	itttt	eq
 8002758:	6822      	ldreq	r2, [r4, #0]
 800275a:	6813      	ldreq	r3, [r2, #0]
 800275c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002760:	6013      	streq	r3, [r2, #0]
 8002762:	e7e5      	b.n	8002730 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002764:	f1b9 0f01 	cmp.w	r9, #1
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	d102      	bne.n	8002772 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800276c:	b2ed      	uxtb	r5, r5
 800276e:	611d      	str	r5, [r3, #16]
 8002770:	e7df      	b.n	8002732 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002772:	0a2a      	lsrs	r2, r5, #8
 8002774:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	4639      	mov	r1, r7
 8002778:	4642      	mov	r2, r8
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff ff88 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002780:	2800      	cmp	r0, #0
 8002782:	d1e6      	bne.n	8002752 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	e7f1      	b.n	800276c <I2C_RequestMemoryWrite+0x90>
 8002788:	00010002 	.word	0x00010002

0800278c <I2C_RequestMemoryRead>:
{
 800278c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002790:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002792:	6803      	ldr	r3, [r0, #0]
{
 8002794:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800279e:	681a      	ldr	r2, [r3, #0]
{
 80027a0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a8:	601a      	str	r2, [r3, #0]
{
 80027aa:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ac:	463b      	mov	r3, r7
 80027ae:	f8cd 8000 	str.w	r8, [sp]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80027b8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ba:	f7ff ff37 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	b148      	cbz	r0, 80027d6 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c4:	05db      	lsls	r3, r3, #23
 80027c6:	d502      	bpl.n	80027ce <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027cc:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80027ce:	2003      	movs	r0, #3
}
 80027d0:	b004      	add	sp, #16
 80027d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	fa5f f986 	uxtb.w	r9, r6
 80027da:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80027de:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e0:	492a      	ldr	r1, [pc, #168]	; (800288c <I2C_RequestMemoryRead+0x100>)
 80027e2:	4643      	mov	r3, r8
 80027e4:	463a      	mov	r2, r7
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fe90 	bl	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ec:	b108      	cbz	r0, 80027f2 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
 80027f0:	e7ee      	b.n	80027d0 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	9003      	str	r0, [sp, #12]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	9203      	str	r2, [sp, #12]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fe:	4642      	mov	r2, r8
 8002800:	4639      	mov	r1, r7
 8002802:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002804:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	f7ff ff43 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 800280a:	b140      	cbz	r0, 800281e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800280e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	bf01      	itttt	eq
 8002812:	6822      	ldreq	r2, [r4, #0]
 8002814:	6813      	ldreq	r3, [r2, #0]
 8002816:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800281a:	6013      	streq	r3, [r2, #0]
 800281c:	e7e7      	b.n	80027ee <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281e:	f1ba 0f01 	cmp.w	sl, #1
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	d11a      	bne.n	800285c <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	b2ed      	uxtb	r5, r5
 8002828:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	4642      	mov	r2, r8
 800282c:	4639      	mov	r1, r7
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff ff2e 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	2800      	cmp	r0, #0
 8002836:	d1e9      	bne.n	800280c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	6813      	ldr	r3, [r2, #0]
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002846:	4602      	mov	r2, r0
 8002848:	f8cd 8000 	str.w	r8, [sp]
 800284c:	463b      	mov	r3, r7
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff feec 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002854:	6822      	ldr	r2, [r4, #0]
 8002856:	b160      	cbz	r0, 8002872 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	e7b3      	b.n	80027c4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800285c:	0a2a      	lsrs	r2, r5, #8
 800285e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002860:	4639      	mov	r1, r7
 8002862:	4642      	mov	r2, r8
 8002864:	4620      	mov	r0, r4
 8002866:	f7ff ff13 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 800286a:	2800      	cmp	r0, #0
 800286c:	d1ce      	bne.n	800280c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	e7d9      	b.n	8002826 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002872:	f049 0301 	orr.w	r3, r9, #1
 8002876:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002878:	4904      	ldr	r1, [pc, #16]	; (800288c <I2C_RequestMemoryRead+0x100>)
 800287a:	4643      	mov	r3, r8
 800287c:	463a      	mov	r2, r7
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fe44 	bl	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8002884:	3800      	subs	r0, #0
 8002886:	bf18      	it	ne
 8002888:	2001      	movne	r0, #1
 800288a:	e7a1      	b.n	80027d0 <I2C_RequestMemoryRead+0x44>
 800288c:	00010002 	.word	0x00010002

08002890 <HAL_I2C_MspInit>:
}
 8002890:	4770      	bx	lr
	...

08002894 <HAL_I2C_Init>:
{
 8002894:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002896:	4604      	mov	r4, r0
 8002898:	b908      	cbnz	r0, 800289e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
}
 800289c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028a6:	b91b      	cbnz	r3, 80028b0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80028a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80028ac:	f7ff fff0 	bl	8002890 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b0:	2324      	movs	r3, #36	; 0x24
 80028b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f022 0201 	bic.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d0:	f001 f9a0 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d4:	4a3f      	ldr	r2, [pc, #252]	; (80029d4 <HAL_I2C_Init+0x140>)
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	4a3e      	ldrls	r2, [pc, #248]	; (80029d8 <HAL_I2C_Init+0x144>)
 80028de:	4a3f      	ldrhi	r2, [pc, #252]	; (80029dc <HAL_I2C_Init+0x148>)
 80028e0:	4290      	cmp	r0, r2
 80028e2:	bf8c      	ite	hi
 80028e4:	2200      	movhi	r2, #0
 80028e6:	2201      	movls	r2, #1
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d1d6      	bne.n	800289a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ec:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80028ee:	4e3c      	ldr	r6, [pc, #240]	; (80029e0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f0:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80028f2:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80028fa:	4332      	orrs	r2, r6
 80028fc:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fe:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <HAL_I2C_Init+0x140>)
 8002900:	6a0d      	ldr	r5, [r1, #32]
 8002902:	4293      	cmp	r3, r2
 8002904:	bf84      	itt	hi
 8002906:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 800290a:	4372      	mulhi	r2, r6
 800290c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002910:	bf91      	iteee	ls
 8002912:	1c72      	addls	r2, r6, #1
 8002914:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002918:	fbb2 f2f6 	udivhi	r2, r2, r6
 800291c:	3201      	addhi	r2, #1
 800291e:	432a      	orrs	r2, r5
 8002920:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002922:	69cd      	ldr	r5, [r1, #28]
 8002924:	1e42      	subs	r2, r0, #1
 8002926:	482b      	ldr	r0, [pc, #172]	; (80029d4 <HAL_I2C_Init+0x140>)
 8002928:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800292c:	4283      	cmp	r3, r0
 800292e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002932:	d832      	bhi.n	800299a <HAL_I2C_Init+0x106>
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800293e:	3301      	adds	r3, #1
 8002940:	4213      	tst	r3, r2
 8002942:	d042      	beq.n	80029ca <HAL_I2C_Init+0x136>
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	432b      	orrs	r3, r5
 800294a:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800294c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002950:	680a      	ldr	r2, [r1, #0]
 8002952:	4303      	orrs	r3, r0
 8002954:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800295c:	688a      	ldr	r2, [r1, #8]
 800295e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002962:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8002966:	4303      	orrs	r3, r0
 8002968:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002970:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002974:	68ca      	ldr	r2, [r1, #12]
 8002976:	4303      	orrs	r3, r0
 8002978:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800297c:	4313      	orrs	r3, r2
 800297e:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002980:	680b      	ldr	r3, [r1, #0]
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800298a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002998:	e780      	b.n	800289c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800299a:	68a0      	ldr	r0, [r4, #8]
 800299c:	b950      	cbnz	r0, 80029b4 <HAL_I2C_Init+0x120>
 800299e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	b17b      	cbz	r3, 80029ce <HAL_I2C_Init+0x13a>
 80029ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b2:	e7c9      	b.n	8002948 <HAL_I2C_Init+0xb4>
 80029b4:	2019      	movs	r0, #25
 80029b6:	4343      	muls	r3, r0
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	b123      	cbz	r3, 80029ce <HAL_I2C_Init+0x13a>
 80029c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c8:	e7be      	b.n	8002948 <HAL_I2C_Init+0xb4>
 80029ca:	2304      	movs	r3, #4
 80029cc:	e7bc      	b.n	8002948 <HAL_I2C_Init+0xb4>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e7ba      	b.n	8002948 <HAL_I2C_Init+0xb4>
 80029d2:	bf00      	nop
 80029d4:	000186a0 	.word	0x000186a0
 80029d8:	001e847f 	.word	0x001e847f
 80029dc:	003d08ff 	.word	0x003d08ff
 80029e0:	000f4240 	.word	0x000f4240

080029e4 <HAL_I2C_MspDeInit>:
 80029e4:	4770      	bx	lr

080029e6 <HAL_I2C_DeInit>:
{
 80029e6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80029e8:	4604      	mov	r4, r0
 80029ea:	b198      	cbz	r0, 8002a14 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80029ec:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ee:	2324      	movs	r3, #36	; 0x24
 80029f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80029f4:	6813      	ldr	r3, [r2, #0]
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80029fc:	f7ff fff2 	bl	80029e4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002a00:	2000      	movs	r0, #0
 8002a02:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8002a04:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002a08:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a0e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002a12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
 8002a16:	e7fc      	b.n	8002a12 <HAL_I2C_DeInit+0x2c>

08002a18 <HAL_I2C_Mem_Write>:
{
 8002a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4699      	mov	r9, r3
 8002a20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002a22:	460f      	mov	r7, r1
 8002a24:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002a26:	f7ff f9f1 	bl	8001e0c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002a2e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002a30:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	d003      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002a34:	2002      	movs	r0, #2
}
 8002a36:	b003      	add	sp, #12
 8002a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	493c      	ldr	r1, [pc, #240]	; (8002b30 <HAL_I2C_Mem_Write+0x118>)
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff fdf1 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d1f2      	bne.n	8002a34 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002a4e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d0ee      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a56:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a62:	bf5e      	ittt	pl
 8002a64:	6803      	ldrpl	r3, [r0, #0]
 8002a66:	f043 0301 	orrpl.w	r3, r3, #1
 8002a6a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6c:	6803      	ldr	r3, [r0, #0]
 8002a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a72:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a74:	2321      	movs	r3, #33	; 0x21
 8002a76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a86:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a88:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8002a8c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a90:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_I2C_Mem_Write+0x11c>)
 8002a94:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a96:	e9cd 6500 	strd	r6, r5, [sp]
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	4639      	mov	r1, r7
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7ff fe1b 	bl	80026dc <I2C_RequestMemoryWrite>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d02a      	beq.n	8002b00 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8002aaa:	2001      	movs	r0, #1
 8002aac:	e7c3      	b.n	8002a36 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	f7ff fdef 	bl	8002690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab2:	b140      	cbz	r0, 8002ac6 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab6:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	bf01      	itttt	eq
 8002aba:	6822      	ldreq	r2, [r4, #0]
 8002abc:	6813      	ldreq	r3, [r2, #0]
 8002abe:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002ac2:	6013      	streq	r3, [r2, #0]
 8002ac4:	e7f1      	b.n	8002aaa <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ac8:	6827      	ldr	r7, [r4, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002ad0:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8002ad2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002ad4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	b292      	uxth	r2, r2
 8002adc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ade:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002ae0:	1e48      	subs	r0, r1, #1
 8002ae2:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae4:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002ae6:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ae8:	d50a      	bpl.n	8002b00 <HAL_I2C_Mem_Write+0xe8>
 8002aea:	b148      	cbz	r0, 8002b00 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aec:	785a      	ldrb	r2, [r3, #1]
 8002aee:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002af0:	3302      	adds	r3, #2
 8002af2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002af6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8002af8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8002afa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002afc:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002afe:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b02:	462a      	mov	r2, r5
 8002b04:	4631      	mov	r1, r6
 8002b06:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1d0      	bne.n	8002aae <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	f7ff fd39 	bl	8002582 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d1cf      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002b24:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8002b2c:	e783      	b.n	8002a36 <HAL_I2C_Mem_Write+0x1e>
 8002b2e:	bf00      	nop
 8002b30:	00100002 	.word	0x00100002
 8002b34:	ffff0000 	.word	0xffff0000

08002b38 <HAL_I2C_Mem_Read>:
{
 8002b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	b087      	sub	sp, #28
 8002b40:	4699      	mov	r9, r3
 8002b42:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8002b44:	460d      	mov	r5, r1
 8002b46:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff f960 	bl	8001e0c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002b50:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002b52:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	d004      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002b56:	2502      	movs	r5, #2
}
 8002b58:	4628      	mov	r0, r5
 8002b5a:	b007      	add	sp, #28
 8002b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b60:	9000      	str	r0, [sp, #0]
 8002b62:	4976      	ldr	r1, [pc, #472]	; (8002d3c <HAL_I2C_Mem_Read+0x204>)
 8002b64:	2319      	movs	r3, #25
 8002b66:	2201      	movs	r2, #1
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7ff fd5f 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d1f1      	bne.n	8002b56 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8002b72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d0ed      	beq.n	8002b56 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b7a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b82:	6803      	ldr	r3, [r0, #0]
 8002b84:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002b86:	bf5e      	ittt	pl
 8002b88:	6803      	ldrpl	r3, [r0, #0]
 8002b8a:	f043 0301 	orrpl.w	r3, r3, #1
 8002b8e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b90:	6803      	ldr	r3, [r0, #0]
 8002b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b96:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b98:	2322      	movs	r3, #34	; 0x22
 8002b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002baa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bac:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002bb0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bb4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb6:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_I2C_Mem_Read+0x208>)
 8002bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bba:	4629      	mov	r1, r5
 8002bbc:	e9cd 7600 	strd	r7, r6, [sp]
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	4642      	mov	r2, r8
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fde1 	bl	800278c <I2C_RequestMemoryRead>
 8002bca:	4605      	mov	r5, r0
 8002bcc:	b108      	cbz	r0, 8002bd2 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8002bce:	2501      	movs	r5, #1
 8002bd0:	e7c2      	b.n	8002b58 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8002bd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b9b2      	cbnz	r2, 8002c06 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd8:	9002      	str	r0, [sp, #8]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	9202      	str	r2, [sp, #8]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	9202      	str	r2, [sp, #8]
 8002be2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bea:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bec:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8002d44 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8002bf0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d12c      	bne.n	8002c50 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002bfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002c04:	e7a8      	b.n	8002b58 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8002c06:	2a01      	cmp	r2, #1
 8002c08:	d10a      	bne.n	8002c20 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c10:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	9003      	str	r0, [sp, #12]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	9203      	str	r2, [sp, #12]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	9203      	str	r2, [sp, #12]
 8002c1c:	9a03      	ldr	r2, [sp, #12]
 8002c1e:	e7e1      	b.n	8002be4 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8002c20:	2a02      	cmp	r2, #2
 8002c22:	d10e      	bne.n	8002c42 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c32:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c34:	9004      	str	r0, [sp, #16]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	9204      	str	r2, [sp, #16]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	9304      	str	r3, [sp, #16]
 8002c3e:	9b04      	ldr	r3, [sp, #16]
 8002c40:	e7d4      	b.n	8002bec <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	9005      	str	r0, [sp, #20]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	9205      	str	r2, [sp, #20]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	9305      	str	r3, [sp, #20]
 8002c4c:	9b05      	ldr	r3, [sp, #20]
 8002c4e:	e7cd      	b.n	8002bec <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d856      	bhi.n	8002d02 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d115      	bne.n	8002c84 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c58:	4632      	mov	r2, r6
 8002c5a:	4639      	mov	r1, r7
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff fcb6 	bl	80025ce <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d1b3      	bne.n	8002bce <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c6c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002c74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002c7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002c82:	e7b5      	b.n	8002bf0 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8002c84:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	9600      	str	r6, [sp, #0]
 8002c88:	463b      	mov	r3, r7
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	4641      	mov	r1, r8
 8002c90:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8002c92:	d119      	bne.n	8002cc8 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c94:	f7ff fcca 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d198      	bne.n	8002bce <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002caa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cae:	1c53      	adds	r3, r2, #1
 8002cb0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002cb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002cb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	7053      	strb	r3, [r2, #1]
 8002cc6:	e7d2      	b.n	8002c6e <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc8:	f7ff fcb0 	bl	800262c <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	f47f af7e 	bne.w	8002bce <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cda:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ce0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ce4:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002cea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002cf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	4620      	mov	r0, r4
 8002d00:	e7c8      	b.n	8002c94 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d02:	4632      	mov	r2, r6
 8002d04:	4639      	mov	r1, r7
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fc61 	bl	80025ce <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	f47f af5e 	bne.w	8002bce <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d1c:	1c53      	adds	r3, r2, #1
 8002d1e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002d20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002d26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	6959      	ldr	r1, [r3, #20]
 8002d32:	0749      	lsls	r1, r1, #29
 8002d34:	f57f af5c 	bpl.w	8002bf0 <HAL_I2C_Mem_Read+0xb8>
 8002d38:	e7c3      	b.n	8002cc2 <HAL_I2C_Mem_Read+0x18a>
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000
 8002d44:	00010004 	.word	0x00010004

08002d48 <HAL_I2C_GetState>:
  return hi2c->State;
 8002d48:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002d4c:	4770      	bx	lr

08002d4e <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d52:	4604      	mov	r4, r0
 8002d54:	460f      	mov	r7, r1
 8002d56:	4616      	mov	r6, r2
 8002d58:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d5a:	f7ff f857 	bl	8001e0c <HAL_GetTick>
 8002d5e:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	6893      	ldr	r3, [r2, #8]
 8002d64:	ea37 0303 	bics.w	r3, r7, r3
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	42b3      	cmp	r3, r6
 8002d70:	d101      	bne.n	8002d76 <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d72:	2000      	movs	r0, #0
 8002d74:	e00e      	b.n	8002d94 <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	1c6b      	adds	r3, r5, #1
 8002d78:	d0f3      	beq.n	8002d62 <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002d7a:	f7ff f847 	bl	8001e0c <HAL_GetTick>
 8002d7e:	eba0 0008 	sub.w	r0, r0, r8
 8002d82:	42a8      	cmp	r0, r5
 8002d84:	d3ec      	bcc.n	8002d60 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002d92:	2003      	movs	r0, #3
}
 8002d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d98 <HAL_I2S_MspInit>:
}
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_I2S_Init>:
{
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 8002d9e:	4604      	mov	r4, r0
 8002da0:	2800      	cmp	r0, #0
 8002da2:	f000 8087 	beq.w	8002eb4 <HAL_I2S_Init+0x118>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002da6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002daa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002dae:	b92b      	cbnz	r3, 8002dbc <HAL_I2S_Init+0x20>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002db0:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <HAL_I2S_Init+0x120>)
    hi2s->Lock = HAL_UNLOCKED;
 8002db2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002db6:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8002db8:	f7ff ffee 	bl	8002d98 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002dbc:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002dc4:	69d3      	ldr	r3, [r2, #28]
 8002dc6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002dca:	f023 030f 	bic.w	r3, r3, #15
 8002dce:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dd0:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8002dd2:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	d06f      	beq.n	8002eb8 <HAL_I2S_Init+0x11c>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002dd8:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8002dda:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ddc:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8002dde:	bf0c      	ite	eq
 8002de0:	2510      	moveq	r5, #16
 8002de2:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002de4:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002de6:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002de8:	bf98      	it	ls
 8002dea:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002dec:	f000 ffe4 	bl	8003db8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	6961      	ldr	r1, [r4, #20]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df8:	d153      	bne.n	8002ea2 <HAL_I2S_Init+0x106>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002dfa:	68e3      	ldr	r3, [r4, #12]
 8002dfc:	220a      	movs	r2, #10
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d04d      	beq.n	8002e9e <HAL_I2S_Init+0x102>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e02:	00ab      	lsls	r3, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e08:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8002e0a:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e10:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002e12:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e16:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e1a:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e1c:	1e99      	subs	r1, r3, #2
 8002e1e:	29fd      	cmp	r1, #253	; 0xfd
 8002e20:	d844      	bhi.n	8002eac <HAL_I2S_Init+0x110>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e22:	0212      	lsls	r2, r2, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e24:	4313      	orrs	r3, r2
 8002e26:	6922      	ldr	r2, [r4, #16]
 8002e28:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e2a:	4f25      	ldr	r7, [pc, #148]	; (8002ec0 <HAL_I2S_Init+0x124>)
 8002e2c:	68e5      	ldr	r5, [r4, #12]
 8002e2e:	69a0      	ldr	r0, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e30:	4313      	orrs	r3, r2
 8002e32:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e34:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8002e38:	69ca      	ldr	r2, [r1, #28]
 8002e3a:	ea46 0c03 	orr.w	ip, r6, r3
 8002e3e:	403a      	ands	r2, r7
 8002e40:	ea42 020c 	orr.w	r2, r2, ip
 8002e44:	432a      	orrs	r2, r5
 8002e46:	4302      	orrs	r2, r0
 8002e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4c:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002e4e:	6a22      	ldr	r2, [r4, #32]
 8002e50:	2a01      	cmp	r2, #1
 8002e52:	d11e      	bne.n	8002e92 <HAL_I2S_Init+0xf6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_I2S_Init+0x128>)
 8002e56:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e58:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002ecc <HAL_I2S_Init+0x130>
 8002e5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ec8 <HAL_I2S_Init+0x12c>)
 8002e5e:	4561      	cmp	r1, ip
 8002e60:	bf18      	it	ne
 8002e62:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8002e66:	f436 7600 	bics.w	r6, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e6a:	69d1      	ldr	r1, [r2, #28]
 8002e6c:	ea01 0107 	and.w	r1, r1, r7
 8002e70:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002e72:	f04f 0102 	mov.w	r1, #2
 8002e76:	6211      	str	r1, [r2, #32]
      tmp = I2S_MODE_SLAVE_TX;
 8002e78:	bf0c      	ite	eq
 8002e7a:	f44f 7680 	moveq.w	r6, #256	; 0x100
 8002e7e:	2600      	movne	r6, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002e80:	432b      	orrs	r3, r5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002e82:	69d1      	ldr	r1, [r2, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002e84:	4333      	orrs	r3, r6
 8002e86:	4303      	orrs	r3, r0
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e90:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e92:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002e94:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002e96:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002e98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e9e:	00eb      	lsls	r3, r5, #3
 8002ea0:	e7b0      	b.n	8002e04 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ea2:	230a      	movs	r3, #10
 8002ea4:	fbb0 f0f5 	udiv	r0, r0, r5
 8002ea8:	4343      	muls	r3, r0
 8002eaa:	e7ae      	b.n	8002e0a <HAL_I2S_Init+0x6e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002eac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	e7f1      	b.n	8002e9c <HAL_I2S_Init+0x100>
    i2sodd = 0U;
 8002eb8:	2200      	movs	r2, #0
 8002eba:	e7b3      	b.n	8002e24 <HAL_I2S_Init+0x88>
 8002ebc:	080033b5 	.word	0x080033b5
 8002ec0:	fffff040 	.word	0xfffff040
 8002ec4:	080034e1 	.word	0x080034e1
 8002ec8:	40003400 	.word	0x40003400
 8002ecc:	40003800 	.word	0x40003800

08002ed0 <HAL_I2S_Transmit_DMA>:
{
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d056      	beq.n	8002f86 <HAL_I2S_Transmit_DMA+0xb6>
 8002ed8:	2a00      	cmp	r2, #0
 8002eda:	d054      	beq.n	8002f86 <HAL_I2S_Transmit_DMA+0xb6>
  __HAL_LOCK(hi2s);
 8002edc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d00b      	beq.n	8002efc <HAL_I2S_Transmit_DMA+0x2c>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002eea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	b2dd      	uxtb	r5, r3
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_I2S_Transmit_DMA+0x30>
    __HAL_UNLOCK(hi2s);
 8002ef8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8002efc:	2502      	movs	r5, #2
 8002efe:	e028      	b.n	8002f52 <HAL_I2S_Transmit_DMA+0x82>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002f00:	2003      	movs	r0, #3
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f02:	6826      	ldr	r6, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002f04:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f08:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f0a:	69f3      	ldr	r3, [r6, #28]
  hi2s->pTxBuffPtr = pData;
 8002f0c:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f0e:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f12:	4283      	cmp	r3, r0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2S_Transmit_DMA+0x4a>
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d11d      	bne.n	8002f56 <HAL_I2S_Transmit_DMA+0x86>
    hi2s->TxXferSize = (Size << 1U);
 8002f1a:	0053      	lsls	r3, r2, #1
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002f20:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002f22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_I2S_Transmit_DMA+0xbc>)
 8002f26:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_I2S_Transmit_DMA+0xc0>)
 8002f2a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_I2S_Transmit_DMA+0xc4>)
 8002f2e:	64c3      	str	r3, [r0, #76]	; 0x4c
                                 hi2s->TxXferSize))
 8002f30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002f32:	f106 020c 	add.w	r2, r6, #12
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f7ff f8aa 	bl	8002090 <HAL_DMA_Start_IT>
 8002f3c:	b170      	cbz	r0, 8002f5c <HAL_I2S_Transmit_DMA+0x8c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002f52:	4628      	mov	r0, r5
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->TxXferSize = Size;
 8002f56:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002f58:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002f5a:	e7e2      	b.n	8002f22 <HAL_I2S_Transmit_DMA+0x52>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002f62:	bf5e      	ittt	pl
 8002f64:	69da      	ldrpl	r2, [r3, #28]
 8002f66:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002f6a:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f70:	bf58      	it	pl
 8002f72:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002f74:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f78:	bf5c      	itt	pl
 8002f7a:	f042 0202 	orrpl.w	r2, r2, #2
 8002f7e:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002f80:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8002f84:	e7e5      	b.n	8002f52 <HAL_I2S_Transmit_DMA+0x82>
    return  HAL_ERROR;
 8002f86:	2501      	movs	r5, #1
 8002f88:	e7e3      	b.n	8002f52 <HAL_I2S_Transmit_DMA+0x82>
 8002f8a:	bf00      	nop
 8002f8c:	0800335d 	.word	0x0800335d
 8002f90:	08003367 	.word	0x08003367
 8002f94:	080034af 	.word	0x080034af

08002f98 <HAL_I2S_Receive_DMA>:
{
 8002f98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	d062      	beq.n	8003068 <HAL_I2S_Receive_DMA+0xd0>
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	d060      	beq.n	8003068 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 8002fa6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	d00b      	beq.n	8002fc6 <HAL_I2S_Receive_DMA+0x2e>
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002fb4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002fb8:	2a01      	cmp	r2, #1
 8002fba:	b2d5      	uxtb	r5, r2
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8002fc2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8002fc6:	2502      	movs	r5, #2
 8002fc8:	e036      	b.n	8003038 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002fca:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8002fcc:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002fce:	2004      	movs	r0, #4
 8002fd0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fd4:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002fd6:	69f2      	ldr	r2, [r6, #28]
 8002fd8:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002fdc:	2a03      	cmp	r2, #3
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2S_Receive_DMA+0x4c>
 8002fe0:	2a05      	cmp	r2, #5
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002fe8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8002fea:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002fec:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_I2S_Receive_DMA+0xd4>)
 8002ff0:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_I2S_Receive_DMA+0xd8>)
 8002ff4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_I2S_Receive_DMA+0xdc>)
 8002ff8:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002ffa:	69f3      	ldr	r3, [r6, #28]
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003004:	d106      	bne.n	8003014 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	68f3      	ldr	r3, [r6, #12]
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	68b3      	ldr	r3, [r6, #8]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8003014:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003016:	460a      	mov	r2, r1
 8003018:	b29b      	uxth	r3, r3
 800301a:	f106 010c 	add.w	r1, r6, #12
 800301e:	f7ff f837 	bl	8002090 <HAL_DMA_Start_IT>
 8003022:	b160      	cbz	r0, 800303e <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003024:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800302c:	2301      	movs	r3, #1
 800302e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8003032:	2300      	movs	r3, #0
 8003034:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003038:	4628      	mov	r0, r5
 800303a:	b002      	add	sp, #8
 800303c:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003044:	bf5e      	ittt	pl
 8003046:	69da      	ldrpl	r2, [r3, #28]
 8003048:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800304c:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003052:	bf58      	it	pl
 8003054:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003056:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800305a:	bf5c      	itt	pl
 800305c:	f042 0201 	orrpl.w	r2, r2, #1
 8003060:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003062:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8003066:	e7e7      	b.n	8003038 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8003068:	2501      	movs	r5, #1
 800306a:	e7e5      	b.n	8003038 <HAL_I2S_Receive_DMA+0xa0>
 800306c:	08003389 	.word	0x08003389
 8003070:	08003393 	.word	0x08003393
 8003074:	080034af 	.word	0x080034af

08003078 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8003078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800307c:	2b01      	cmp	r3, #1
 800307e:	d02d      	beq.n	80030dc <HAL_I2S_DMAPause+0x64>
 8003080:	2301      	movs	r3, #1
 8003082:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003086:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800308a:	2b03      	cmp	r3, #3
 800308c:	d109      	bne.n	80030a2 <HAL_I2S_DMAPause+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800308e:	6802      	ldr	r2, [r0, #0]
 8003090:	6853      	ldr	r3, [r2, #4]
 8003092:	f023 0302 	bic.w	r3, r3, #2
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003096:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 8003098:	2300      	movs	r3, #0
 800309a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 800309e:	4618      	mov	r0, r3
 80030a0:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80030a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d104      	bne.n	80030b4 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80030aa:	6802      	ldr	r2, [r0, #0]
 80030ac:	6853      	ldr	r3, [r2, #4]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	e7f0      	b.n	8003096 <HAL_I2S_DMAPause+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80030b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d1ed      	bne.n	8003098 <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030bc:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030c0:	6853      	ldr	r3, [r2, #4]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_I2S_DMAPause+0x6c>)
 80030ca:	428a      	cmp	r2, r1
 80030cc:	bf18      	it	ne
 80030ce:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	f022 0203 	bic.w	r2, r2, #3
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e7dd      	b.n	8003098 <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 80030dc:	2002      	movs	r0, #2
}
 80030de:	4770      	bx	lr
 80030e0:	40003800 	.word	0x40003800
 80030e4:	40003400 	.word	0x40003400

080030e8 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 80030e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d039      	beq.n	8003164 <HAL_I2S_DMAResume+0x7c>
 80030f0:	2301      	movs	r3, #1
 80030f2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80030f6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80030fa:	6803      	ldr	r3, [r0, #0]
 80030fc:	2a03      	cmp	r2, #3
 80030fe:	d10f      	bne.n	8003120 <HAL_I2S_DMAResume+0x38>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	f042 0202 	orr.w	r2, r2, #2
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003106:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 800310c:	bf5e      	ittt	pl
 800310e:	69da      	ldrpl	r2, [r3, #28]
 8003110:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003114:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8003116:	2300      	movs	r3, #0
 8003118:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 800311c:	4618      	mov	r0, r3
 800311e:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003120:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003124:	2a04      	cmp	r2, #4
 8003126:	d103      	bne.n	8003130 <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	e7ea      	b.n	8003106 <HAL_I2S_DMAResume+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003130:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003134:	2a05      	cmp	r2, #5
 8003136:	d1e7      	bne.n	8003108 <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003138:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800313a:	490b      	ldr	r1, [pc, #44]	; (8003168 <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800313c:	f042 0203 	orr.w	r2, r2, #3
 8003140:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_I2S_DMAResume+0x84>)
 8003144:	428b      	cmp	r3, r1
 8003146:	bf18      	it	ne
 8003148:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800314c:	6851      	ldr	r1, [r2, #4]
 800314e:	f041 0103 	orr.w	r1, r1, #3
 8003152:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8003154:	69d1      	ldr	r1, [r2, #28]
 8003156:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8003158:	bf5e      	ittt	pl
 800315a:	69d1      	ldrpl	r1, [r2, #28]
 800315c:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8003160:	61d1      	strpl	r1, [r2, #28]
 8003162:	e7d1      	b.n	8003108 <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8003164:	2002      	movs	r0, #2
}
 8003166:	4770      	bx	lr
 8003168:	40003800 	.word	0x40003800
 800316c:	40003400 	.word	0x40003400

08003170 <HAL_I2S_DMAStop>:
{
 8003170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003174:	6843      	ldr	r3, [r0, #4]
 8003176:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 800317a:	b085      	sub	sp, #20
 800317c:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800317e:	d16c      	bne.n	800325a <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 8003180:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003182:	2800      	cmp	r0, #0
 8003184:	d15f      	bne.n	8003246 <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003186:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003188:	2364      	movs	r3, #100	; 0x64
 800318a:	2201      	movs	r2, #1
 800318c:	2102      	movs	r1, #2
 800318e:	4620      	mov	r0, r4
 8003190:	f7ff fddd 	bl	8002d4e <I2S_WaitFlagStateUntilTimeout>
 8003194:	b130      	cbz	r0, 80031a4 <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003196:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003198:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80031a0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80031a4:	2364      	movs	r3, #100	; 0x64
 80031a6:	2200      	movs	r2, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7ff fdcf 	bl	8002d4e <I2S_WaitFlagStateUntilTimeout>
 80031b0:	b130      	cbz	r0, 80031c0 <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80031b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80031b4:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80031bc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031ca:	2200      	movs	r2, #0
 80031cc:	9200      	str	r2, [sp, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	9200      	str	r2, [sp, #0]
 80031d2:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	f022 0202 	bic.w	r2, r2, #2
 80031da:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80031dc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d129      	bne.n	8003238 <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 80031e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80031e6:	b138      	cbz	r0, 80031f8 <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80031e8:	f7fe ff8c 	bl	8002104 <HAL_DMA_Abort>
 80031ec:	b120      	cbz	r0, 80031f8 <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80031ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 80031f6:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	4a56      	ldr	r2, [pc, #344]	; (8003354 <HAL_I2S_DMAStop+0x1e4>)
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_I2S_DMAStop+0x1e8>)
 80031fe:	4291      	cmp	r1, r2
 8003200:	bf18      	it	ne
 8003202:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 800320e:	2200      	movs	r2, #0
 8003210:	9201      	str	r2, [sp, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	9201      	str	r2, [sp, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	9201      	str	r2, [sp, #4]
 800321a:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8003224:	6862      	ldr	r2, [r4, #4]
 8003226:	2a00      	cmp	r2, #0
 8003228:	d16c      	bne.n	8003304 <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800322a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800322c:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800322e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003232:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003234:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8003238:	2301      	movs	r3, #1
}
 800323a:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 800323c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003240:	b005      	add	sp, #20
 8003242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003246:	f7fe ff5d 	bl	8002104 <HAL_DMA_Abort>
 800324a:	2800      	cmp	r0, #0
 800324c:	d09b      	beq.n	8003186 <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800324e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003256:	2501      	movs	r5, #1
 8003258:	e796      	b.n	8003188 <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800325a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325e:	d177      	bne.n	8003350 <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 8003260:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003262:	2800      	cmp	r0, #0
 8003264:	d150      	bne.n	8003308 <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003266:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003268:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800326c:	2b05      	cmp	r3, #5
 800326e:	d135      	bne.n	80032dc <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 8003270:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003272:	b138      	cbz	r0, 8003284 <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8003274:	f7fe ff46 	bl	8002104 <HAL_DMA_Abort>
 8003278:	b120      	cbz	r0, 8003284 <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800327a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8003282:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8003284:	f7fe fdc2 	bl	8001e0c <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003288:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003354 <HAL_I2S_DMAStop+0x1e4>
 800328c:	4f32      	ldr	r7, [pc, #200]	; (8003358 <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 800328e:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8003290:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003294:	6823      	ldr	r3, [r4, #0]
 8003296:	4543      	cmp	r3, r8
 8003298:	bf0c      	ite	eq
 800329a:	463b      	moveq	r3, r7
 800329c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	079b      	lsls	r3, r3, #30
 80032a4:	d53a      	bpl.n	800331c <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80032a6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003354 <HAL_I2S_DMAStop+0x1e4>
 80032aa:	4f2b      	ldr	r7, [pc, #172]	; (8003358 <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 80032ac:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	4543      	cmp	r3, r8
 80032b4:	bf0c      	ite	eq
 80032b6:	463b      	moveq	r3, r7
 80032b8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 80032c2:	d138      	bne.n	8003336 <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 80032c4:	69d9      	ldr	r1, [r3, #28]
 80032c6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80032ca:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80032cc:	9202      	str	r2, [sp, #8]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	9202      	str	r2, [sp, #8]
 80032d2:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	f022 0202 	bic.w	r2, r2, #2
 80032da:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e4:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032e6:	2200      	movs	r2, #0
 80032e8:	9203      	str	r2, [sp, #12]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	9203      	str	r2, [sp, #12]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	9203      	str	r2, [sp, #12]
 80032f2:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80032fc:	6862      	ldr	r2, [r4, #4]
 80032fe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003302:	d092      	beq.n	800322a <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	e797      	b.n	8003238 <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003308:	f7fe fefc 	bl	8002104 <HAL_DMA_Abort>
 800330c:	2800      	cmp	r0, #0
 800330e:	d0aa      	beq.n	8003266 <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003310:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003312:	f043 0308 	orr.w	r3, r3, #8
 8003316:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8003318:	2501      	movs	r5, #1
 800331a:	e7a5      	b.n	8003268 <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800331c:	f7fe fd76 	bl	8001e0c <HAL_GetTick>
 8003320:	1b80      	subs	r0, r0, r6
 8003322:	2864      	cmp	r0, #100	; 0x64
 8003324:	d9b6      	bls.n	8003294 <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 800332e:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8003330:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8003334:	e7ae      	b.n	8003294 <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003336:	f7fe fd69 	bl	8001e0c <HAL_GetTick>
 800333a:	1b80      	subs	r0, r0, r6
 800333c:	2864      	cmp	r0, #100	; 0x64
 800333e:	d9b7      	bls.n	80032b0 <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003340:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8003348:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 800334a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800334e:	e7af      	b.n	80032b0 <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003350:	2500      	movs	r5, #0
 8003352:	e771      	b.n	8003238 <HAL_I2S_DMAStop+0xc8>
 8003354:	40003800 	.word	0x40003800
 8003358:	40003400 	.word	0x40003400

0800335c <I2S_DMATxHalfCplt>:
{
 800335c:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800335e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003360:	f7fe fb48 	bl	80019f4 <HAL_I2S_TxHalfCpltCallback>
}
 8003364:	bd08      	pop	{r3, pc}

08003366 <I2S_DMATxCplt>:
{
 8003366:	b508      	push	{r3, lr}
 8003368:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800336a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	b942      	cbnz	r2, 8003382 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003370:	6801      	ldr	r1, [r0, #0]
 8003372:	684b      	ldr	r3, [r1, #4]
 8003374:	f023 0302 	bic.w	r3, r3, #2
 8003378:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800337a:	2301      	movs	r3, #1
    hi2s->TxXferCount = 0U;
 800337c:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800337e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8003382:	f7fe fb2b 	bl	80019dc <HAL_I2S_TxCpltCallback>
}
 8003386:	bd08      	pop	{r3, pc}

08003388 <I2S_DMARxHalfCplt>:
{
 8003388:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800338a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800338c:	f7fe fc86 	bl	8001c9c <HAL_I2S_RxHalfCpltCallback>
}
 8003390:	bd08      	pop	{r3, pc}

08003392 <I2S_DMARxCplt>:
{
 8003392:	b508      	push	{r3, lr}
 8003394:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003396:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	b942      	cbnz	r2, 80033ae <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800339c:	6801      	ldr	r1, [r0, #0]
 800339e:	684b      	ldr	r3, [r1, #4]
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80033a6:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 80033a8:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80033aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 80033ae:	f7fe fc71 	bl	8001c94 <HAL_I2S_RxCpltCallback>
}
 80033b2:	bd08      	pop	{r3, pc}

080033b4 <I2S_IRQHandler>:
{
 80033b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033b6:	6803      	ldr	r3, [r0, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033bc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80033c0:	2a04      	cmp	r2, #4
{
 80033c2:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033c4:	d136      	bne.n	8003434 <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033c6:	9a01      	ldr	r2, [sp, #4]
 80033c8:	07d1      	lsls	r1, r2, #31
 80033ca:	d517      	bpl.n	80033fc <I2S_IRQHandler+0x48>
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	0652      	lsls	r2, r2, #25
 80033d0:	d514      	bpl.n	80033fc <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80033da:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033dc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80033de:	3a01      	subs	r2, #1
 80033e0:	b292      	uxth	r2, r2
 80033e2:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80033e4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80033e6:	b292      	uxth	r2, r2
 80033e8:	b942      	cbnz	r2, 80033fc <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033f0:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80033f8:	f7fe fc4c 	bl	8001c94 <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	0659      	lsls	r1, r3, #25
 8003400:	d518      	bpl.n	8003434 <I2S_IRQHandler+0x80>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	0692      	lsls	r2, r2, #26
 8003408:	d514      	bpl.n	8003434 <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003410:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003412:	2200      	movs	r2, #0
 8003414:	9202      	str	r2, [sp, #8]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	9202      	str	r2, [sp, #8]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003420:	2301      	movs	r3, #1
 8003422:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003426:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800342e:	4620      	mov	r0, r4
 8003430:	f7fe fc38 	bl	8001ca4 <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003434:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003438:	2b03      	cmp	r3, #3
 800343a:	d136      	bne.n	80034aa <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800343c:	9b01      	ldr	r3, [sp, #4]
 800343e:	079b      	lsls	r3, r3, #30
 8003440:	d519      	bpl.n	8003476 <I2S_IRQHandler+0xc2>
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	6853      	ldr	r3, [r2, #4]
 8003446:	0618      	lsls	r0, r3, #24
 8003448:	d515      	bpl.n	8003476 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800344a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003450:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8003452:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8003454:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003456:	3b01      	subs	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800345c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	b94b      	cbnz	r3, 8003476 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003462:	6853      	ldr	r3, [r2, #4]
 8003464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003468:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800346a:	2301      	movs	r3, #1
 800346c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003470:	4620      	mov	r0, r4
 8003472:	f7fe fab3 	bl	80019dc <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003476:	9b01      	ldr	r3, [sp, #4]
 8003478:	0719      	lsls	r1, r3, #28
 800347a:	d516      	bpl.n	80034aa <I2S_IRQHandler+0xf6>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	0692      	lsls	r2, r2, #26
 8003482:	d512      	bpl.n	80034aa <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800348a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800348c:	2200      	movs	r2, #0
 800348e:	9203      	str	r2, [sp, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8003496:	2301      	movs	r3, #1
 8003498:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800349c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800349e:	f043 0304 	orr.w	r3, r3, #4
 80034a2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7fe fbfd 	bl	8001ca4 <HAL_I2S_ErrorCallback>
}
 80034aa:	b004      	add	sp, #16
 80034ac:	bd10      	pop	{r4, pc}

080034ae <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80034b0:	6802      	ldr	r2, [r0, #0]
{
 80034b2:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80034b4:	6853      	ldr	r3, [r2, #4]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80034c0:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80034c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034ca:	f043 0308 	orr.w	r3, r3, #8
 80034ce:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80034d0:	f7fe fbe8 	bl	8001ca4 <HAL_I2S_ErrorCallback>
}
 80034d4:	bd08      	pop	{r3, pc}

080034d6 <HAL_I2S_GetState>:
  return hi2s->State;
 80034d6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80034da:	4770      	bx	lr

080034dc <HAL_I2SEx_TxRxCpltCallback>:
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034e0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034e2:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034e4:	498e      	ldr	r1, [pc, #568]	; (8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034e6:	6893      	ldr	r3, [r2, #8]
{
 80034e8:	b086      	sub	sp, #24
 80034ea:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034ec:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034ee:	4b8d      	ldr	r3, [pc, #564]	; (8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80034f0:	428a      	cmp	r2, r1
 80034f2:	bf18      	it	ne
 80034f4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034fc:	6851      	ldr	r1, [r2, #4]
 80034fe:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003504:	6841      	ldr	r1, [r0, #4]
 8003506:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 800350a:	f040 8093 	bne.w	8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800350e:	9b00      	ldr	r3, [sp, #0]
 8003510:	0799      	lsls	r1, r3, #30
 8003512:	d51a      	bpl.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8003514:	9b02      	ldr	r3, [sp, #8]
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	d517      	bpl.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800351a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800351c:	1c99      	adds	r1, r3, #2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	6241      	str	r1, [r0, #36]	; 0x24
 8003522:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003524:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003526:	3b01      	subs	r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800352c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	b95b      	cbnz	r3, 800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003532:	6853      	ldr	r3, [r2, #4]
 8003534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003538:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 800353a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800353c:	b29b      	uxth	r3, r3
 800353e:	b923      	cbnz	r3, 800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003540:	2301      	movs	r3, #1
 8003542:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003546:	f7ff ffc9 	bl	80034dc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	07d8      	lsls	r0, r3, #31
 800354e:	d522      	bpl.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8003550:	9b03      	ldr	r3, [sp, #12]
 8003552:	0659      	lsls	r1, r3, #25
 8003554:	d51f      	bpl.n	8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003556:	6821      	ldr	r1, [r4, #0]
 8003558:	4a71      	ldr	r2, [pc, #452]	; (8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800355a:	4b72      	ldr	r3, [pc, #456]	; (8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800355c:	4291      	cmp	r1, r2
 800355e:	bf18      	it	ne
 8003560:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003564:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003566:	68d9      	ldr	r1, [r3, #12]
 8003568:	1c90      	adds	r0, r2, #2
 800356a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800356c:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 800356e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003570:	3a01      	subs	r2, #1
 8003572:	b292      	uxth	r2, r2
 8003574:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003576:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003578:	b292      	uxth	r2, r2
 800357a:	b962      	cbnz	r2, 8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003582:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003584:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	b92b      	cbnz	r3, 8003596 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800358a:	2301      	movs	r3, #1
 800358c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff ffa3 	bl	80034dc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003596:	9b01      	ldr	r3, [sp, #4]
 8003598:	065a      	lsls	r2, r3, #25
 800359a:	d522      	bpl.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	d51f      	bpl.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	495e      	ldr	r1, [pc, #376]	; (8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80035a6:	4a5f      	ldr	r2, [pc, #380]	; (8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf18      	it	ne
 80035ac:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80035b0:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b2:	6851      	ldr	r1, [r2, #4]
 80035b4:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80035b8:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c0:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035c2:	2200      	movs	r2, #0
 80035c4:	9204      	str	r2, [sp, #16]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	9204      	str	r2, [sp, #16]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	9304      	str	r3, [sp, #16]
 80035ce:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80035de:	f7fe fb61 	bl	8001ca4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035e2:	9b00      	ldr	r3, [sp, #0]
 80035e4:	0718      	lsls	r0, r3, #28
 80035e6:	f140 8098 	bpl.w	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80035ea:	9b02      	ldr	r3, [sp, #8]
 80035ec:	0699      	lsls	r1, r3, #26
 80035ee:	f140 8094 	bpl.w	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f2:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f4:	494a      	ldr	r1, [pc, #296]	; (8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fc:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035fe:	4a49      	ldr	r2, [pc, #292]	; (8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003600:	428b      	cmp	r3, r1
 8003602:	bf18      	it	ne
 8003604:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003608:	6851      	ldr	r1, [r2, #4]
 800360a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800360e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003610:	2200      	movs	r2, #0
 8003612:	9205      	str	r2, [sp, #20]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	9305      	str	r3, [sp, #20]
 8003618:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 800361a:	2301      	movs	r3, #1
 800361c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003620:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003622:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6463      	str	r3, [r4, #68]	; 0x44
}
 800362a:	b006      	add	sp, #24
 800362c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8003630:	f7fe bb38 	b.w	8001ca4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003634:	9a01      	ldr	r2, [sp, #4]
 8003636:	0792      	lsls	r2, r2, #30
 8003638:	d51a      	bpl.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 800363a:	9a03      	ldr	r2, [sp, #12]
 800363c:	0611      	lsls	r1, r2, #24
 800363e:	d517      	bpl.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003640:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003642:	1c91      	adds	r1, r2, #2
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	6241      	str	r1, [r0, #36]	; 0x24
 8003648:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800364a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800364c:	3a01      	subs	r2, #1
 800364e:	b292      	uxth	r2, r2
 8003650:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003652:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003654:	b292      	uxth	r2, r2
 8003656:	b95a      	cbnz	r2, 8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800365e:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8003660:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003662:	b29b      	uxth	r3, r3
 8003664:	b923      	cbnz	r3, 8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8003666:	2301      	movs	r3, #1
 8003668:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800366c:	f7ff ff36 	bl	80034dc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003670:	9b00      	ldr	r3, [sp, #0]
 8003672:	07da      	lsls	r2, r3, #31
 8003674:	d51c      	bpl.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8003676:	9b02      	ldr	r3, [sp, #8]
 8003678:	065b      	lsls	r3, r3, #25
 800367a:	d519      	bpl.n	80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800367c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	1c98      	adds	r0, r3, #2
 8003682:	68d1      	ldr	r1, [r2, #12]
 8003684:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003686:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8003688:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800368a:	3b01      	subs	r3, #1
 800368c:	b29b      	uxth	r3, r3
 800368e:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003690:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003692:	b29b      	uxth	r3, r3
 8003694:	b963      	cbnz	r3, 80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003696:	6853      	ldr	r3, [r2, #4]
 8003698:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800369c:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800369e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b92b      	cbnz	r3, 80036b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff ff16 	bl	80034dc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036b0:	9b00      	ldr	r3, [sp, #0]
 80036b2:	0658      	lsls	r0, r3, #25
 80036b4:	d51b      	bpl.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 80036b6:	9b02      	ldr	r3, [sp, #8]
 80036b8:	0699      	lsls	r1, r3, #26
 80036ba:	d518      	bpl.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036bc:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036be:	4918      	ldr	r1, [pc, #96]	; (8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c0:	6853      	ldr	r3, [r2, #4]
 80036c2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80036c6:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80036ca:	428a      	cmp	r2, r1
 80036cc:	bf18      	it	ne
 80036ce:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80036d2:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036da:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	2301      	movs	r3, #1
 80036de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80036ea:	f7fe fadb 	bl	8001ca4 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	071a      	lsls	r2, r3, #28
 80036f2:	d512      	bpl.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	d50f      	bpl.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fa:	6822      	ldr	r2, [r4, #0]
 80036fc:	4908      	ldr	r1, [pc, #32]	; (8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003700:	428a      	cmp	r2, r1
 8003702:	bf18      	it	ne
 8003704:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 800370e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003710:	6853      	ldr	r3, [r2, #4]
 8003712:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003716:	6053      	str	r3, [r2, #4]
 8003718:	e77f      	b.n	800361a <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 800371a:	b006      	add	sp, #24
 800371c:	bd10      	pop	{r4, pc}
 800371e:	bf00      	nop
 8003720:	40003800 	.word	0x40003800
 8003724:	40003400 	.word	0x40003400

08003728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800372c:	4604      	mov	r4, r0
 800372e:	b340      	cbz	r0, 8003782 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003730:	6803      	ldr	r3, [r0, #0]
 8003732:	07dd      	lsls	r5, r3, #31
 8003734:	d410      	bmi.n	8003758 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	0798      	lsls	r0, r3, #30
 800373a:	d45e      	bmi.n	80037fa <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	071a      	lsls	r2, r3, #28
 8003740:	f100 80a0 	bmi.w	8003884 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	075b      	lsls	r3, r3, #29
 8003748:	f100 80be 	bmi.w	80038c8 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	69a0      	ldr	r0, [r4, #24]
 800374e:	2800      	cmp	r0, #0
 8003750:	f040 811f 	bne.w	8003992 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2000      	movs	r0, #0
 8003756:	e02b      	b.n	80037b0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003758:	4ba6      	ldr	r3, [pc, #664]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	f002 020c 	and.w	r2, r2, #12
 8003760:	2a04      	cmp	r2, #4
 8003762:	d007      	beq.n	8003774 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	2a08      	cmp	r2, #8
 800376c:	d10b      	bne.n	8003786 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	0251      	lsls	r1, r2, #9
 8003772:	d508      	bpl.n	8003786 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	4b9f      	ldr	r3, [pc, #636]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	039a      	lsls	r2, r3, #14
 800377a:	d5dc      	bpl.n	8003736 <HAL_RCC_OscConfig+0xe>
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1d9      	bne.n	8003736 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003782:	2001      	movs	r0, #1
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003786:	6862      	ldr	r2, [r4, #4]
 8003788:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800378c:	d113      	bne.n	80037b6 <HAL_RCC_OscConfig+0x8e>
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003794:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003796:	f7fe fb39 	bl	8001e0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	4e96      	ldr	r6, [pc, #600]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800379c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	6833      	ldr	r3, [r6, #0]
 80037a0:	039b      	lsls	r3, r3, #14
 80037a2:	d4c8      	bmi.n	8003736 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fe fb32 	bl	8001e0c <HAL_GetTick>
 80037a8:	1b40      	subs	r0, r0, r5
 80037aa:	2864      	cmp	r0, #100	; 0x64
 80037ac:	d9f7      	bls.n	800379e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80037ae:	2003      	movs	r0, #3
}
 80037b0:	b002      	add	sp, #8
 80037b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b6:	4d8f      	ldr	r5, [pc, #572]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80037b8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	d107      	bne.n	80037d0 <HAL_RCC_OscConfig+0xa8>
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ce:	e7e2      	b.n	8003796 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	682b      	ldr	r3, [r5, #0]
 80037d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037dc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037de:	2a00      	cmp	r2, #0
 80037e0:	d1d9      	bne.n	8003796 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80037e2:	f7fe fb13 	bl	8001e0c <HAL_GetTick>
 80037e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	039f      	lsls	r7, r3, #14
 80037ec:	d5a3      	bpl.n	8003736 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ee:	f7fe fb0d 	bl	8001e0c <HAL_GetTick>
 80037f2:	1b80      	subs	r0, r0, r6
 80037f4:	2864      	cmp	r0, #100	; 0x64
 80037f6:	d9f7      	bls.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 80037f8:	e7d9      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	f012 0f0c 	tst.w	r2, #12
 8003802:	d007      	beq.n	8003814 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380a:	2a08      	cmp	r2, #8
 800380c:	d111      	bne.n	8003832 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	025e      	lsls	r6, r3, #9
 8003812:	d40e      	bmi.n	8003832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003814:	4b77      	ldr	r3, [pc, #476]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	0795      	lsls	r5, r2, #30
 800381a:	d502      	bpl.n	8003822 <HAL_RCC_OscConfig+0xfa>
 800381c:	68e2      	ldr	r2, [r4, #12]
 800381e:	2a01      	cmp	r2, #1
 8003820:	d1af      	bne.n	8003782 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	6921      	ldr	r1, [r4, #16]
 8003826:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800382a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800382e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003830:	e784      	b.n	800373c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003832:	68e2      	ldr	r2, [r4, #12]
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_OscConfig+0x2d0>)
 8003836:	b1b2      	cbz	r2, 8003866 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800383c:	f7fe fae6 	bl	8001e0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4d6c      	ldr	r5, [pc, #432]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003842:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	0798      	lsls	r0, r3, #30
 8003848:	d507      	bpl.n	800385a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	682b      	ldr	r3, [r5, #0]
 800384c:	6922      	ldr	r2, [r4, #16]
 800384e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003852:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	e770      	b.n	800373c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe fad7 	bl	8001e0c <HAL_GetTick>
 800385e:	1b80      	subs	r0, r0, r6
 8003860:	2802      	cmp	r0, #2
 8003862:	d9ef      	bls.n	8003844 <HAL_RCC_OscConfig+0x11c>
 8003864:	e7a3      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8003866:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003868:	f7fe fad0 	bl	8001e0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386c:	4e61      	ldr	r6, [pc, #388]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800386e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	0799      	lsls	r1, r3, #30
 8003874:	f57f af62 	bpl.w	800373c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe fac8 	bl	8001e0c <HAL_GetTick>
 800387c:	1b40      	subs	r0, r0, r5
 800387e:	2802      	cmp	r0, #2
 8003880:	d9f6      	bls.n	8003870 <HAL_RCC_OscConfig+0x148>
 8003882:	e794      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003884:	6962      	ldr	r2, [r4, #20]
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <HAL_RCC_OscConfig+0x2d4>)
 8003888:	b17a      	cbz	r2, 80038aa <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800388e:	f7fe fabd 	bl	8001e0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	4e58      	ldr	r6, [pc, #352]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003894:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003898:	079f      	lsls	r7, r3, #30
 800389a:	f53f af53 	bmi.w	8003744 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389e:	f7fe fab5 	bl	8001e0c <HAL_GetTick>
 80038a2:	1b40      	subs	r0, r0, r5
 80038a4:	2802      	cmp	r0, #2
 80038a6:	d9f6      	bls.n	8003896 <HAL_RCC_OscConfig+0x16e>
 80038a8:	e781      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80038aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038ac:	f7fe faae 	bl	8001e0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4e50      	ldr	r6, [pc, #320]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80038b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80038b6:	0798      	lsls	r0, r3, #30
 80038b8:	f57f af44 	bpl.w	8003744 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038bc:	f7fe faa6 	bl	8001e0c <HAL_GetTick>
 80038c0:	1b40      	subs	r0, r0, r5
 80038c2:	2802      	cmp	r0, #2
 80038c4:	d9f6      	bls.n	80038b4 <HAL_RCC_OscConfig+0x18c>
 80038c6:	e772      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c8:	4b4a      	ldr	r3, [pc, #296]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80038ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80038d0:	d128      	bne.n	8003924 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	9201      	str	r2, [sp, #4]
 80038d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80038e6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4d45      	ldr	r5, [pc, #276]	; (8003a00 <HAL_RCC_OscConfig+0x2d8>)
 80038ea:	682b      	ldr	r3, [r5, #0]
 80038ec:	05d9      	lsls	r1, r3, #23
 80038ee:	d51b      	bpl.n	8003928 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	68a3      	ldr	r3, [r4, #8]
 80038f2:	4d40      	ldr	r5, [pc, #256]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d127      	bne.n	8003948 <HAL_RCC_OscConfig+0x220>
 80038f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003900:	f7fe fa84 	bl	8001e0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4e3b      	ldr	r6, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003906:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003908:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800390e:	079b      	lsls	r3, r3, #30
 8003910:	d539      	bpl.n	8003986 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8003912:	2f00      	cmp	r7, #0
 8003914:	f43f af1a 	beq.w	800374c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4a36      	ldr	r2, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 800391a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800391c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	e713      	b.n	800374c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003924:	2700      	movs	r7, #0
 8003926:	e7df      	b.n	80038e8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003930:	f7fe fa6c 	bl	8001e0c <HAL_GetTick>
 8003934:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	05da      	lsls	r2, r3, #23
 800393a:	d4d9      	bmi.n	80038f0 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393c:	f7fe fa66 	bl	8001e0c <HAL_GetTick>
 8003940:	1b80      	subs	r0, r0, r6
 8003942:	2802      	cmp	r0, #2
 8003944:	d9f7      	bls.n	8003936 <HAL_RCC_OscConfig+0x20e>
 8003946:	e732      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	2b05      	cmp	r3, #5
 800394a:	d104      	bne.n	8003956 <HAL_RCC_OscConfig+0x22e>
 800394c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	672b      	str	r3, [r5, #112]	; 0x70
 8003954:	e7d0      	b.n	80038f8 <HAL_RCC_OscConfig+0x1d0>
 8003956:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	672a      	str	r2, [r5, #112]	; 0x70
 800395e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003960:	f022 0204 	bic.w	r2, r2, #4
 8003964:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ca      	bne.n	8003900 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 800396a:	f7fe fa4f 	bl	8001e0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003972:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003976:	0798      	lsls	r0, r3, #30
 8003978:	d5cb      	bpl.n	8003912 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fe fa47 	bl	8001e0c <HAL_GetTick>
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	4540      	cmp	r0, r8
 8003982:	d9f7      	bls.n	8003974 <HAL_RCC_OscConfig+0x24c>
 8003984:	e713      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fe fa41 	bl	8001e0c <HAL_GetTick>
 800398a:	1b40      	subs	r0, r0, r5
 800398c:	4540      	cmp	r0, r8
 800398e:	d9bd      	bls.n	800390c <HAL_RCC_OscConfig+0x1e4>
 8003990:	e70d      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003992:	4d18      	ldr	r5, [pc, #96]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
 8003994:	68ab      	ldr	r3, [r5, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b08      	cmp	r3, #8
 800399c:	d047      	beq.n	8003a2e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399e:	4e19      	ldr	r6, [pc, #100]	; (8003a04 <HAL_RCC_OscConfig+0x2dc>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80039a4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a6:	d135      	bne.n	8003a14 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80039a8:	f7fe fa30 	bl	8001e0c <HAL_GetTick>
 80039ac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	682b      	ldr	r3, [r5, #0]
 80039b0:	0199      	lsls	r1, r3, #6
 80039b2:	d429      	bmi.n	8003a08 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80039bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80039c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80039c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80039c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80039c8:	0852      	lsrs	r2, r2, #1
 80039ca:	3a01      	subs	r2, #1
 80039cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80039d2:	2301      	movs	r3, #1
 80039d4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80039d6:	f7fe fa19 	bl	8001e0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039da:	4d06      	ldr	r5, [pc, #24]	; (80039f4 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80039dc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	682b      	ldr	r3, [r5, #0]
 80039e0:	019a      	lsls	r2, r3, #6
 80039e2:	f53f aeb7 	bmi.w	8003754 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fa11 	bl	8001e0c <HAL_GetTick>
 80039ea:	1b00      	subs	r0, r0, r4
 80039ec:	2802      	cmp	r0, #2
 80039ee:	d9f6      	bls.n	80039de <HAL_RCC_OscConfig+0x2b6>
 80039f0:	e6dd      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	42470000 	.word	0x42470000
 80039fc:	42470e80 	.word	0x42470e80
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fa00 	bl	8001e0c <HAL_GetTick>
 8003a0c:	1bc0      	subs	r0, r0, r7
 8003a0e:	2802      	cmp	r0, #2
 8003a10:	d9cd      	bls.n	80039ae <HAL_RCC_OscConfig+0x286>
 8003a12:	e6cc      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003a14:	f7fe f9fa 	bl	8001e0c <HAL_GetTick>
 8003a18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	f57f ae99 	bpl.w	8003754 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fe f9f3 	bl	8001e0c <HAL_GetTick>
 8003a26:	1b00      	subs	r0, r0, r4
 8003a28:	2802      	cmp	r0, #2
 8003a2a:	d9f6      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2f2>
 8003a2c:	e6bf      	b.n	80037ae <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2e:	2801      	cmp	r0, #1
 8003a30:	f43f aebe 	beq.w	80037b0 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8003a34:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a36:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a38:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3c:	4291      	cmp	r1, r2
 8003a3e:	f47f aea0 	bne.w	8003782 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a48:	428a      	cmp	r2, r1
 8003a4a:	f47f ae9a 	bne.w	8003782 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a50:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003a54:	401a      	ands	r2, r3
 8003a56:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003a5a:	f47f ae92 	bne.w	8003782 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a60:	0852      	lsrs	r2, r2, #1
 8003a62:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003a66:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003a6c:	f47f ae89 	bne.w	8003782 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a72:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a76:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003a7a:	f43f ae6b 	beq.w	8003754 <HAL_RCC_OscConfig+0x2c>
 8003a7e:	e680      	b.n	8003782 <HAL_RCC_OscConfig+0x5a>

08003a80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a80:	4913      	ldr	r1, [pc, #76]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003a82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a84:	688b      	ldr	r3, [r1, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d01c      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x48>
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11c      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a94:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	bf14      	ite	ne
 8003a9e:	480d      	ldrne	r0, [pc, #52]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa0:	480d      	ldreq	r0, [pc, #52]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003aa6:	bf18      	it	ne
 8003aa8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aaa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aae:	fba1 0100 	umull	r0, r1, r1, r0
 8003ab2:	f7fc fb91 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x50>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003abe:	3301      	adds	r3, #1
 8003ac0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003ac2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003ac6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x54>)
 8003aca:	e7fc      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003ace:	e7fa      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	007a1200 	.word	0x007a1200
 8003ad8:	00f42400 	.word	0x00f42400

08003adc <HAL_RCC_ClockConfig>:
{
 8003adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	b910      	cbnz	r0, 8003aec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003ae6:	2001      	movs	r0, #1
}
 8003ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b44      	ldr	r3, [pc, #272]	; (8003c00 <HAL_RCC_ClockConfig+0x124>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f002 0207 	and.w	r2, r2, #7
 8003af4:	428a      	cmp	r2, r1
 8003af6:	d328      	bcc.n	8003b4a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	0797      	lsls	r7, r2, #30
 8003afc:	d42d      	bmi.n	8003b5a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afe:	07d0      	lsls	r0, r2, #31
 8003b00:	d441      	bmi.n	8003b86 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b02:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_ClockConfig+0x124>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f002 0207 	and.w	r2, r2, #7
 8003b0a:	42aa      	cmp	r2, r5
 8003b0c:	d866      	bhi.n	8003bdc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	0751      	lsls	r1, r2, #29
 8003b12:	d46c      	bmi.n	8003bee <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	0713      	lsls	r3, r2, #28
 8003b16:	d507      	bpl.n	8003b28 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003b1a:	6921      	ldr	r1, [r4, #16]
 8003b1c:	6893      	ldr	r3, [r2, #8]
 8003b1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b28:	f7ff ffaa 	bl	8003a80 <HAL_RCC_GetSysClockFreq>
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003b2e:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_RCC_ClockConfig+0x12c>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	40d8      	lsrs	r0, r3
 8003b3a:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <HAL_RCC_ClockConfig+0x130>)
 8003b3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003b3e:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_ClockConfig+0x134>)
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f7fe f91b 	bl	8001d7c <HAL_InitTick>
  return HAL_OK;
 8003b46:	2000      	movs	r0, #0
 8003b48:	e7ce      	b.n	8003ae8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	b2ca      	uxtb	r2, r1
 8003b4c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d1c6      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xa>
 8003b58:	e7ce      	b.n	8003af8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003b5c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	bf1e      	ittt	ne
 8003b62:	6899      	ldrne	r1, [r3, #8]
 8003b64:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8003b68:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	bf42      	ittt	mi
 8003b6e:	6899      	ldrmi	r1, [r3, #8]
 8003b70:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8003b74:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b76:	4923      	ldr	r1, [pc, #140]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003b78:	68a0      	ldr	r0, [r4, #8]
 8003b7a:	688b      	ldr	r3, [r1, #8]
 8003b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b80:	4303      	orrs	r3, r0
 8003b82:	608b      	str	r3, [r1, #8]
 8003b84:	e7bb      	b.n	8003afe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b86:	6862      	ldr	r2, [r4, #4]
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003b8a:	2a01      	cmp	r2, #1
 8003b8c:	d11c      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	d0a7      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b96:	4e1b      	ldr	r6, [pc, #108]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003b98:	68b3      	ldr	r3, [r6, #8]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003ba2:	f7fe f933 	bl	8001e0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003baa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bac:	68b3      	ldr	r3, [r6, #8]
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003bb8:	d0a3      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bba:	f7fe f927 	bl	8001e0c <HAL_GetTick>
 8003bbe:	1bc0      	subs	r0, r0, r7
 8003bc0:	4540      	cmp	r0, r8
 8003bc2:	d9f3      	bls.n	8003bac <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8003bc4:	2003      	movs	r0, #3
 8003bc6:	e78f      	b.n	8003ae8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc8:	1e91      	subs	r1, r2, #2
 8003bca:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bcc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	d802      	bhi.n	8003bd6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bd4:	e7de      	b.n	8003b94 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd6:	f013 0f02 	tst.w	r3, #2
 8003bda:	e7db      	b.n	8003b94 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bdc:	b2ea      	uxtb	r2, r5
 8003bde:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	42ab      	cmp	r3, r5
 8003be8:	f47f af7d 	bne.w	8003ae6 <HAL_RCC_ClockConfig+0xa>
 8003bec:	e78f      	b.n	8003b0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bee:	4905      	ldr	r1, [pc, #20]	; (8003c04 <HAL_RCC_ClockConfig+0x128>)
 8003bf0:	68e0      	ldr	r0, [r4, #12]
 8003bf2:	688b      	ldr	r3, [r1, #8]
 8003bf4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003bf8:	4303      	orrs	r3, r0
 8003bfa:	608b      	str	r3, [r1, #8]
 8003bfc:	e78a      	b.n	8003b14 <HAL_RCC_ClockConfig+0x38>
 8003bfe:	bf00      	nop
 8003c00:	40023c00 	.word	0x40023c00
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08007198 	.word	0x08007198
 8003c0c:	20000120 	.word	0x20000120
 8003c10:	20000128 	.word	0x20000128

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003c16:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c22:	6810      	ldr	r0, [r2, #0]
}
 8003c24:	40d8      	lsrs	r0, r3
 8003c26:	4770      	bx	lr
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	080071a8 	.word	0x080071a8
 8003c30:	20000120 	.word	0x20000120

08003c34 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c34:	6803      	ldr	r3, [r0, #0]
 8003c36:	f013 0f05 	tst.w	r3, #5
{
 8003c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c3e:	d13c      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	079a      	lsls	r2, r3, #30
 8003c44:	d530      	bpl.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c4c:	4d45      	ldr	r5, [pc, #276]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fe f8d0 	bl	8001e0c <HAL_GetTick>
 8003c6c:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	05d9      	lsls	r1, r3, #23
 8003c72:	d54c      	bpl.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xda>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c74:	4d3a      	ldr	r5, [pc, #232]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003c76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c78:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003c7c:	d14d      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003c84:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003c88:	4a35      	ldr	r2, [pc, #212]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003c8a:	d165      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003c8c:	6891      	ldr	r1, [r2, #8]
 8003c8e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003c92:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003c96:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003c9a:	4301      	orrs	r1, r0
 8003c9c:	6091      	str	r1, [r2, #8]
 8003c9e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cae:	bf1f      	itttt	ne
 8003cb0:	4b2d      	ldrne	r3, [pc, #180]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb2:	7d22      	ldrbne	r2, [r4, #20]
 8003cb4:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003cb6:	2000      	movne	r0, #0
 8003cb8:	e027      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 8003cba:	4f2c      	ldr	r7, [pc, #176]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x138>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cbc:	4e28      	ldr	r6, [pc, #160]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003cc2:	f7fe f8a3 	bl	8001e0c <HAL_GetTick>
 8003cc6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc8:	6833      	ldr	r3, [r6, #0]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	d417      	bmi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xca>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8003cd2:	071b      	lsls	r3, r3, #28
 8003cd4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003cd8:	6862      	ldr	r2, [r4, #4]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003ce4:	f7fe f892 	bl	8001e0c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce8:	4e1d      	ldr	r6, [pc, #116]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    tickstart = HAL_GetTick();
 8003cea:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cec:	6833      	ldr	r3, [r6, #0]
 8003cee:	0118      	lsls	r0, r3, #4
 8003cf0:	d4a6      	bmi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cf2:	f7fe f88b 	bl	8001e0c <HAL_GetTick>
 8003cf6:	1b40      	subs	r0, r0, r5
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d9f7      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cfe:	f7fe f885 	bl	8001e0c <HAL_GetTick>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	2802      	cmp	r0, #2
 8003d06:	d9df      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 8003d08:	2003      	movs	r0, #3
}
 8003d0a:	b003      	add	sp, #12
 8003d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d0e:	f7fe f87d 	bl	8001e0c <HAL_GetTick>
 8003d12:	1b80      	subs	r0, r0, r6
 8003d14:	2802      	cmp	r0, #2
 8003d16:	d9aa      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003d18:	e7f6      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d1a:	6922      	ldr	r2, [r4, #16]
 8003d1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d0ac      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d30:	2100      	movs	r1, #0
 8003d32:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8003d34:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d38:	07da      	lsls	r2, r3, #31
 8003d3a:	d5a0      	bpl.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8003d3c:	f7fe f866 	bl	8001e0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d46:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d48:	079b      	lsls	r3, r3, #30
 8003d4a:	d498      	bmi.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fe f85e 	bl	8001e0c <HAL_GetTick>
 8003d50:	1b80      	subs	r0, r0, r6
 8003d52:	42b8      	cmp	r0, r7
 8003d54:	d9f7      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003d56:	e7d7      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d58:	6891      	ldr	r1, [r2, #8]
 8003d5a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003d5e:	e79d      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40007000 	.word	0x40007000
 8003d68:	424711e0 	.word	0x424711e0
 8003d6c:	42470068 	.word	0x42470068
 8003d70:	42470e40 	.word	0x42470e40

08003d74 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003d74:	2303      	movs	r3, #3
 8003d76:	6003      	str	r3, [r0, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCCEx_GetPeriphCLKConfig+0x40>)
 8003d7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d7e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003d82:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d88:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8003d8c:	60c2      	str	r2, [r0, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8003d8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003d96:	6042      	str	r2, [r0, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003d98:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003d9c:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003da0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003da4:	430a      	orrs	r2, r1
 8003da6:	6102      	str	r2, [r0, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8003da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dac:	f3c3 6300 	ubfx	r3, r3, #24, #1
 8003db0:	7503      	strb	r3, [r0, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8003db2:	4770      	bx	lr
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003db8:	2801      	cmp	r0, #1
 8003dba:	d11b      	bne.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003dbe:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003dc0:	0212      	lsls	r2, r2, #8
 8003dc2:	d417      	bmi.n	8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dc4:	685a      	ldr	r2, [r3, #4]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003dc6:	490c      	ldr	r1, [pc, #48]	; (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dc8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dcc:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003dce:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dd2:	bf4c      	ite	mi
 8003dd4:	4b09      	ldrmi	r3, [pc, #36]	; (8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dd6:	4b0a      	ldrpl	r3, [pc, #40]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003dd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003ddc:	fbb3 f3f0 	udiv	r3, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003de0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003de4:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003de8:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003dea:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8003dee:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8003df2:	4770      	bx	lr
 8003df4:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8003df6:	4770      	bx	lr
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	007a1200 	.word	0x007a1200
 8003e00:	00f42400 	.word	0x00f42400

08003e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	461f      	mov	r7, r3
 8003e0a:	4689      	mov	r9, r1
 8003e0c:	4690      	mov	r8, r2
 8003e0e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e10:	f7fd fffc 	bl	8001e0c <HAL_GetTick>
 8003e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e16:	443b      	add	r3, r7
 8003e18:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003e1a:	f7fd fff7 	bl	8001e0c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e1e:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8003e20:	681e      	ldr	r6, [r3, #0]
 8003e22:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8003e26:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8003e28:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e2a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	6893      	ldr	r3, [r2, #8]
 8003e30:	ea39 0303 	bics.w	r3, r9, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	4543      	cmp	r3, r8
 8003e3c:	d101      	bne.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e02e      	b.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	1c7b      	adds	r3, r7, #1
 8003e44:	d0f3      	beq.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e46:	f7fd ffe1 	bl	8001e0c <HAL_GetTick>
 8003e4a:	eba0 000a 	sub.w	r0, r0, sl
 8003e4e:	42a8      	cmp	r0, r5
 8003e50:	d329      	bcc.n	8003ea6 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e5a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5c:	6862      	ldr	r2, [r4, #4]
 8003e5e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003e62:	d10a      	bne.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x76>
 8003e64:	68a2      	ldr	r2, [r4, #8]
 8003e66:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003e6a:	d002      	beq.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e6c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003e70:	d103      	bne.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e78:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e7c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003e80:	d107      	bne.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e90:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003e9e:	2003      	movs	r0, #3
}
 8003ea0:	b002      	add	sp, #8
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8003ea6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003ea8:	2b00      	cmp	r3, #0
      count--;
 8003eaa:	9b01      	ldr	r3, [sp, #4]
 8003eac:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8003eb0:	bf08      	it	eq
 8003eb2:	2500      	moveq	r5, #0
      count--;
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	e7b9      	b.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0x28>
 8003eb8:	20000120 	.word	0x20000120

08003ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b530      	push	{r4, r5, lr}
 8003ebe:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ec0:	4913      	ldr	r1, [pc, #76]	; (8003f10 <SPI_EndRxTxTransaction+0x54>)
 8003ec2:	4d14      	ldr	r5, [pc, #80]	; (8003f14 <SPI_EndRxTxTransaction+0x58>)
 8003ec4:	6809      	ldr	r1, [r1, #0]
 8003ec6:	fbb1 f5f5 	udiv	r5, r1, r5
{
 8003eca:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ed0:	4369      	muls	r1, r5
 8003ed2:	9103      	str	r1, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed4:	6841      	ldr	r1, [r0, #4]
 8003ed6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8003eda:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003edc:	d10c      	bne.n	8003ef8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ede:	9200      	str	r2, [sp, #0]
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f7ff ff8e 	bl	8003e04 <SPI_WaitFlagStateUntilTimeout>
 8003ee8:	b178      	cbz	r0, 8003f0a <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003eec:	f043 0320 	orr.w	r3, r3, #32
 8003ef0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ef2:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8003ef4:	b005      	add	sp, #20
 8003ef6:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	b133      	cbz	r3, 8003f0a <SPI_EndRxTxTransaction+0x4e>
      count--;
 8003efc:	9b03      	ldr	r3, [sp, #12]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	d4f6      	bmi.n	8003ef8 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	e7f2      	b.n	8003ef4 <SPI_EndRxTxTransaction+0x38>
 8003f0e:	bf00      	nop
 8003f10:	20000120 	.word	0x20000120
 8003f14:	016e3600 	.word	0x016e3600

08003f18 <HAL_SPI_MspInit>:
}
 8003f18:	4770      	bx	lr

08003f1a <HAL_SPI_Init>:
{
 8003f1a:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d05a      	beq.n	8003fd8 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d153      	bne.n	8003fd0 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f28:	6842      	ldr	r2, [r0, #4]
 8003f2a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003f2e:	d000      	beq.n	8003f32 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f30:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f32:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f3a:	b923      	cbnz	r3, 8003f46 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8003f3c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff ffe9 	bl	8003f18 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003f46:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f48:	68a5      	ldr	r5, [r4, #8]
 8003f4a:	69a2      	ldr	r2, [r4, #24]
 8003f4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003f54:	680b      	ldr	r3, [r1, #0]
 8003f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8003f62:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003f66:	432b      	orrs	r3, r5
 8003f68:	68e5      	ldr	r5, [r4, #12]
 8003f6a:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 8003f6e:	432b      	orrs	r3, r5
 8003f70:	6925      	ldr	r5, [r4, #16]
 8003f72:	f005 0502 	and.w	r5, r5, #2
 8003f76:	432b      	orrs	r3, r5
 8003f78:	6965      	ldr	r5, [r4, #20]
 8003f7a:	f005 0501 	and.w	r5, r5, #1
 8003f7e:	432b      	orrs	r3, r5
 8003f80:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8003f84:	432b      	orrs	r3, r5
 8003f86:	69e5      	ldr	r5, [r4, #28]
 8003f88:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8003f8c:	432b      	orrs	r3, r5
 8003f8e:	6a25      	ldr	r5, [r4, #32]
 8003f90:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8003f94:	432b      	orrs	r3, r5
 8003f96:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8003f9a:	432b      	orrs	r3, r5
 8003f9c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fa0:	0c12      	lsrs	r2, r2, #16
 8003fa2:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003faa:	f002 0204 	and.w	r2, r2, #4
 8003fae:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003fb2:	bf08      	it	eq
 8003fb4:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fb6:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003fb8:	bf08      	it	eq
 8003fba:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fbc:	69cb      	ldr	r3, [r1, #28]
 8003fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fd6:	e7ac      	b.n	8003f32 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003fd8:	2001      	movs	r0, #1
 8003fda:	e7f8      	b.n	8003fce <HAL_SPI_Init+0xb4>

08003fdc <HAL_SPI_MspDeInit>:
 8003fdc:	4770      	bx	lr

08003fde <HAL_SPI_DeInit>:
{
 8003fde:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	b180      	cbz	r0, 8004006 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003fe4:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003ff4:	f7ff fff2 	bl	8003fdc <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8003ffc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8004000:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8004004:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004006:	2001      	movs	r0, #1
 8004008:	e7fc      	b.n	8004004 <HAL_SPI_DeInit+0x26>

0800400a <HAL_SPI_TransmitReceive>:
{
 800400a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800400e:	b085      	sub	sp, #20
 8004010:	4698      	mov	r8, r3
  __IO uint32_t tmpreg = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8004016:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800401a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800401c:	2b01      	cmp	r3, #1
{
 800401e:	4604      	mov	r4, r0
 8004020:	460d      	mov	r5, r1
 8004022:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004024:	f000 8133 	beq.w	800428e <HAL_SPI_TransmitReceive+0x284>
 8004028:	2301      	movs	r3, #1
 800402a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800402e:	f7fd feed 	bl	8001e0c <HAL_GetTick>
  tmp_state           = hspi->State;
 8004032:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004036:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004038:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800403a:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800403c:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800403e:	d00a      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x4c>
 8004040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004044:	f040 8121 	bne.w	800428a <HAL_SPI_TransmitReceive+0x280>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004048:	68a2      	ldr	r2, [r4, #8]
 800404a:	2a00      	cmp	r2, #0
 800404c:	f040 811d 	bne.w	800428a <HAL_SPI_TransmitReceive+0x280>
 8004050:	2904      	cmp	r1, #4
 8004052:	f040 811a 	bne.w	800428a <HAL_SPI_TransmitReceive+0x280>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004056:	2d00      	cmp	r5, #0
 8004058:	f000 8109 	beq.w	800426e <HAL_SPI_TransmitReceive+0x264>
 800405c:	f1b9 0f00 	cmp.w	r9, #0
 8004060:	f000 8105 	beq.w	800426e <HAL_SPI_TransmitReceive+0x264>
 8004064:	f1b8 0f00 	cmp.w	r8, #0
 8004068:	f000 8101 	beq.w	800426e <HAL_SPI_TransmitReceive+0x264>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800406c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004070:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004072:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004076:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004078:	bf1c      	itt	ne
 800407a:	2205      	movne	r2, #5
 800407c:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004080:	2200      	movs	r2, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004082:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004086:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004088:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800408c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004096:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004098:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800409c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a0:	d107      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 80040a2:	6811      	ldr	r1, [r2, #0]
 80040a4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	6811      	ldr	r1, [r2, #0]
 80040ac:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80040b0:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b2:	6811      	ldr	r1, [r2, #0]
 80040b4:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80040b6:	bf5e      	ittt	pl
 80040b8:	6811      	ldrpl	r1, [r2, #0]
 80040ba:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 80040be:	6011      	strpl	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040c0:	68e1      	ldr	r1, [r4, #12]
 80040c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80040c6:	d168      	bne.n	800419a <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c8:	b113      	cbz	r3, 80040d0 <HAL_SPI_TransmitReceive+0xc6>
 80040ca:	f1b8 0f01 	cmp.w	r8, #1
 80040ce:	d107      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80040d4:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80040d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d8:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29b      	uxth	r3, r3
 80040de:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80040e0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	b9b3      	cbnz	r3, 8004116 <HAL_SPI_TransmitReceive+0x10c>
 80040e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b99b      	cbnz	r3, 8004116 <HAL_SPI_TransmitReceive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f4:	f040 80a6 	bne.w	8004244 <HAL_SPI_TransmitReceive+0x23a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80040f8:	2201      	movs	r2, #1
 80040fa:	9700      	str	r7, [sp, #0]
 80040fc:	4633      	mov	r3, r6
 80040fe:	4611      	mov	r1, r2
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff fe7f 	bl	8003e04 <SPI_WaitFlagStateUntilTimeout>
 8004106:	2800      	cmp	r0, #0
 8004108:	f000 8098 	beq.w	800423c <HAL_SPI_TransmitReceive+0x232>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800410c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	6563      	str	r3, [r4, #84]	; 0x54
 8004114:	e020      	b.n	8004158 <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	6893      	ldr	r3, [r2, #8]
 800411a:	079b      	lsls	r3, r3, #30
 800411c:	d504      	bpl.n	8004128 <HAL_SPI_TransmitReceive+0x11e>
 800411e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	b10b      	cbz	r3, 8004128 <HAL_SPI_TransmitReceive+0x11e>
 8004124:	bb1d      	cbnz	r5, 800416e <HAL_SPI_TransmitReceive+0x164>
{
 8004126:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004128:	6891      	ldr	r1, [r2, #8]
 800412a:	f011 0101 	ands.w	r1, r1, #1
 800412e:	d00c      	beq.n	800414a <HAL_SPI_TransmitReceive+0x140>
 8004130:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	b14b      	cbz	r3, 800414a <HAL_SPI_TransmitReceive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800413e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004142:	3b01      	subs	r3, #1
 8004144:	b29b      	uxth	r3, r3
 8004146:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004148:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800414a:	f7fd fe5f 	bl	8001e0c <HAL_GetTick>
 800414e:	1bc0      	subs	r0, r0, r7
 8004150:	42b0      	cmp	r0, r6
 8004152:	d3c6      	bcc.n	80040e2 <HAL_SPI_TransmitReceive+0xd8>
 8004154:	1c70      	adds	r0, r6, #1
 8004156:	d0c4      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8004158:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800415a:	2301      	movs	r3, #1
 800415c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004160:	2300      	movs	r3, #0
 8004162:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004166:	4628      	mov	r0, r5
 8004168:	b005      	add	sp, #20
 800416a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004170:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004174:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004176:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004178:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800417a:	3b01      	subs	r3, #1
 800417c:	b29b      	uxth	r3, r3
 800417e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004180:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004182:	b2ad      	uxth	r5, r5
 8004184:	2d00      	cmp	r5, #0
 8004186:	d1ce      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x11c>
 8004188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418e:	d1ca      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x11c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004190:	6813      	ldr	r3, [r2, #0]
 8004192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e7c6      	b.n	8004128 <HAL_SPI_TransmitReceive+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419a:	b113      	cbz	r3, 80041a2 <HAL_SPI_TransmitReceive+0x198>
 800419c:	f1b8 0f01 	cmp.w	r8, #1
 80041a0:	d108      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x1aa>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a2:	782b      	ldrb	r3, [r5, #0]
 80041a4:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a8:	3301      	adds	r3, #1
 80041aa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80041ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80041b4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	b91b      	cbnz	r3, 80041c4 <HAL_SPI_TransmitReceive+0x1ba>
 80041bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d094      	beq.n	80040ee <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6893      	ldr	r3, [r2, #8]
 80041c8:	0799      	lsls	r1, r3, #30
 80041ca:	d504      	bpl.n	80041d6 <HAL_SPI_TransmitReceive+0x1cc>
 80041cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	b10b      	cbz	r3, 80041d6 <HAL_SPI_TransmitReceive+0x1cc>
 80041d2:	b9dd      	cbnz	r5, 800420c <HAL_SPI_TransmitReceive+0x202>
        txallowed = 1U;
 80041d4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	6891      	ldr	r1, [r2, #8]
 80041da:	f011 0101 	ands.w	r1, r1, #1
 80041de:	d00d      	beq.n	80041fc <HAL_SPI_TransmitReceive+0x1f2>
 80041e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	b153      	cbz	r3, 80041fc <HAL_SPI_TransmitReceive+0x1f2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80041ee:	3301      	adds	r3, #1
 80041f0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80041f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80041fa:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041fc:	f7fd fe06 	bl	8001e0c <HAL_GetTick>
 8004200:	1bc0      	subs	r0, r0, r7
 8004202:	42b0      	cmp	r0, r6
 8004204:	d3d7      	bcc.n	80041b6 <HAL_SPI_TransmitReceive+0x1ac>
 8004206:	1c73      	adds	r3, r6, #1
 8004208:	d0d5      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x1ac>
 800420a:	e7a5      	b.n	8004158 <HAL_SPI_TransmitReceive+0x14e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800420c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004212:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004214:	3301      	adds	r3, #1
 8004216:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004218:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004220:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8004222:	b2ad      	uxth	r5, r5
 8004224:	2d00      	cmp	r5, #0
 8004226:	d1d5      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x1ca>
 8004228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800422a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422e:	d1d1      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x1ca>
 8004230:	6822      	ldr	r2, [r4, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e7cc      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x1cc>
    tmpreg = READ_REG(hspi->Instance->DR);
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8004242:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	6895      	ldr	r5, [r2, #8]
 8004248:	f015 0510 	ands.w	r5, r5, #16
 800424c:	d007      	beq.n	800425e <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800424e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004256:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800425a:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800425c:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800425e:	463a      	mov	r2, r7
 8004260:	4631      	mov	r1, r6
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff fe2a 	bl	8003ebc <SPI_EndRxTxTransaction>
 8004268:	b118      	cbz	r0, 8004272 <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800426a:	2320      	movs	r3, #32
 800426c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800426e:	2501      	movs	r5, #1
 8004270:	e773      	b.n	800415a <HAL_SPI_TransmitReceive+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004272:	68a3      	ldr	r3, [r4, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f af70 	bne.w	800415a <HAL_SPI_TransmitReceive+0x150>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427a:	9303      	str	r3, [sp, #12]
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	9203      	str	r2, [sp, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	9303      	str	r3, [sp, #12]
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	e767      	b.n	800415a <HAL_SPI_TransmitReceive+0x150>
    errorcode = HAL_BUSY;
 800428a:	2502      	movs	r5, #2
 800428c:	e765      	b.n	800415a <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 800428e:	2502      	movs	r5, #2
 8004290:	e769      	b.n	8004166 <HAL_SPI_TransmitReceive+0x15c>

08004292 <HAL_SPI_GetState>:
  return hspi->State;
 8004292:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004296:	4770      	bx	lr

08004298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800429c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800429e:	e003      	b.n	80042a8 <LoopCopyDataInit>

080042a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042a6:	3104      	adds	r1, #4

080042a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042a8:	480b      	ldr	r0, [pc, #44]	; (80042d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042b0:	d3f6      	bcc.n	80042a0 <CopyDataInit>
  ldr  r2, =_sbss
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042b4:	e002      	b.n	80042bc <LoopFillZerobss>

080042b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042b8:	f842 3b04 	str.w	r3, [r2], #4

080042bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042c0:	d3f9      	bcc.n	80042b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042c2:	f7fd fd33 	bl	8001d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042c6:	f002 fa8f 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ca:	f000 f9f9 	bl	80046c0 <main>
  bx  lr    
 80042ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80042d4:	08007224 	.word	0x08007224
  ldr  r0, =_sdata
 80042d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042dc:	20000694 	.word	0x20000694
  ldr  r2, =_sbss
 80042e0:	20000694 	.word	0x20000694
  ldr  r3, = _ebss
 80042e4:	2000eafc 	.word	0x2000eafc

080042e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042e8:	e7fe      	b.n	80042e8 <ADC_IRQHandler>
	...

080042ec <AudioPlay_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioPlay_Test(void)
{  
 80042ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Initial volume level (from 0 (Mute) to 100 (Max)) */
  __IO uint8_t volume = 70;
 80042ee:	2346      	movs	r3, #70	; 0x46
 80042f0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Initialize MEMS Accelerometer mounted on STM32F4-Discovery board */
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 80042f4:	f7fd f9b2 	bl	800165c <BSP_ACCELERO_Init>
 80042f8:	b108      	cbz	r0, 80042fe <AudioPlay_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler();
 80042fa:	f000 f9dc 	bl	80046b6 <Error_Handler>
  }
  
  /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
  BSP_ACCELERO_Click_ITConfig();
 80042fe:	f7fd f9cd 	bl	800169c <BSP_ACCELERO_Click_ITConfig>
  
  /* Turn ON LED6: start of Audio file play */
  BSP_LED_On(LED6);
 8004302:	2003      	movs	r0, #3
 8004304:	f7fd f834 	bl	8001370 <BSP_LED_On>
  
  /* Retrieve Wave Sample rate*/
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8004308:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <AudioPlay_Test+0xb8>)
 800430a:	4c27      	ldr	r4, [pc, #156]	; (80043a8 <AudioPlay_Test+0xbc>)
  
  /* Initialize Audio Device */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 800430c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004310:	699a      	ldr	r2, [r3, #24]
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8004312:	6023      	str	r3, [r4, #0]
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8004314:	2004      	movs	r0, #4
 8004316:	f7fd fb25 	bl	8001964 <BSP_AUDIO_OUT_Init>
 800431a:	b108      	cbz	r0, 8004320 <AudioPlay_Test+0x34>
  {
    Error_Handler();
 800431c:	f000 f9cb 	bl	80046b6 <Error_Handler>
  }
  
  /*Set variable used to stop player before starting */
  UserPressButton = 0;
 8004320:	4d22      	ldr	r5, [pc, #136]	; (80043ac <AudioPlay_Test+0xc0>)
  AudioTest = 0;
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8004322:	4e23      	ldr	r6, [pc, #140]	; (80043b0 <AudioPlay_Test+0xc4>)
  /* Set the current audio pointer position */
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8004324:	481f      	ldr	r0, [pc, #124]	; (80043a4 <AudioPlay_Test+0xb8>)
  UserPressButton = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	702b      	strb	r3, [r5, #0]
  AudioTest = 0;
 800432a:	6063      	str	r3, [r4, #4]
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 800432c:	4c21      	ldr	r4, [pc, #132]	; (80043b4 <AudioPlay_Test+0xc8>)
  AudioTotalSize = AUDIO_FILE_SIZE;  
 800432e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004332:	6031      	str	r1, [r6, #0]
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8004334:	6020      	str	r0, [r4, #0]
  /* Start the audio player */
  BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);  
 8004336:	f7fd f9ed 	bl	8001714 <BSP_AUDIO_OUT_Play>
  /* Update the remaining number of data to be played */
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);   
 800433a:	6833      	ldr	r3, [r6, #0]
 800433c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004340:	429a      	cmp	r2, r3
 8004342:	bf28      	it	cs
 8004344:	461a      	movcs	r2, r3
 8004346:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  /* Update the current audio pointer position */
  CurrentPos += DMA_MAX(AudioTotalSize);
 800434a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);   
 800434e:	6072      	str	r2, [r6, #4]
  CurrentPos += DMA_MAX(AudioTotalSize);
 8004350:	bf28      	it	cs
 8004352:	4b19      	ldrcs	r3, [pc, #100]	; (80043b8 <AudioPlay_Test+0xcc>)
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	bf38      	it	cc
 8004358:	005b      	lslcc	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	6023      	str	r3, [r4, #0]
  
  /* Infinite loop */
  while(!UserPressButton)
  { 
    if (PauseResumeStatus == PAUSE_STATUS)
 800435e:	4c17      	ldr	r4, [pc, #92]	; (80043bc <AudioPlay_Test+0xd0>)
      /* Turn OFF LED4: Audio play running */
      BSP_LED_Off(LED4);
      
      /* Resume playing */
      BSP_AUDIO_OUT_Resume();
      PauseResumeStatus = IDLE_STATUS;
 8004360:	2602      	movs	r6, #2
  while(!UserPressButton)
 8004362:	782b      	ldrb	r3, [r5, #0]
 8004364:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004368:	b143      	cbz	r3, 800437c <AudioPlay_Test+0x90>
    }
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 800436a:	2001      	movs	r0, #1
 800436c:	f7fd fa20 	bl	80017b0 <BSP_AUDIO_OUT_Stop>
 8004370:	b1a8      	cbz	r0, 800439e <AudioPlay_Test+0xb2>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8004372:	b002      	add	sp, #8
 8004374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8004378:	f000 b99d 	b.w	80046b6 <Error_Handler>
    if (PauseResumeStatus == PAUSE_STATUS)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	b933      	cbnz	r3, 800438e <AudioPlay_Test+0xa2>
      BSP_LED_On(LED4);
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc fff5 	bl	8001370 <BSP_LED_On>
      BSP_AUDIO_OUT_Pause();
 8004386:	f7fd f9eb 	bl	8001760 <BSP_AUDIO_OUT_Pause>
      PauseResumeStatus = IDLE_STATUS;
 800438a:	6026      	str	r6, [r4, #0]
 800438c:	e7e9      	b.n	8004362 <AudioPlay_Test+0x76>
    else if (PauseResumeStatus == RESUME_STATUS)
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d1e6      	bne.n	8004362 <AudioPlay_Test+0x76>
      BSP_LED_Off(LED4);
 8004394:	f7fc fffa 	bl	800138c <BSP_LED_Off>
      BSP_AUDIO_OUT_Resume();
 8004398:	f7fd f9f6 	bl	8001788 <BSP_AUDIO_OUT_Resume>
 800439c:	e7f5      	b.n	800438a <AudioPlay_Test+0x9e>
}
 800439e:	b002      	add	sp, #8
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	bf00      	nop
 80043a4:	08020000 	.word	0x08020000
 80043a8:	2000082c 	.word	0x2000082c
 80043ac:	20000980 	.word	0x20000980
 80043b0:	2000012c 	.word	0x2000012c
 80043b4:	20000ac4 	.word	0x20000ac4
 80043b8:	0001fffe 	.word	0x0001fffe
 80043bc:	20000134 	.word	0x20000134

080043c0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @brief  Calculates the remaining file size and new position of the pointer.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack()
{
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t replay = 0;
  
  if (AudioRemSize > 0)
 80043c2:	4c25      	ldr	r4, [pc, #148]	; (8004458 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x98>)
 80043c4:	6861      	ldr	r1, [r4, #4]
 80043c6:	2900      	cmp	r1, #0
 80043c8:	d042      	beq.n	8004450 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>
  {
    /* Replay from the current position */
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)CurrentPos, DMA_MAX(AudioRemSize/AUDIODATA_SIZE));
 80043ca:	4d24      	ldr	r5, [pc, #144]	; (800445c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 80043cc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80043d0:	bf34      	ite	cc
 80043d2:	f3c1 014f 	ubfxcc	r1, r1, #1, #16
 80043d6:	f64f 71ff 	movwcs	r1, #65535	; 0xffff
 80043da:	6828      	ldr	r0, [r5, #0]
 80043dc:	f7fd f9b8 	bl	8001750 <BSP_AUDIO_OUT_ChangeBuffer>
    
    /* Update the current pointer position */
    CurrentPos += DMA_MAX(AudioRemSize);        
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	682a      	ldr	r2, [r5, #0]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	bf2c      	ite	cs
 80043ea:	491d      	ldrcs	r1, [pc, #116]	; (8004460 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
 80043ec:	0059      	lslcc	r1, r3, #1
 80043ee:	440a      	add	r2, r1
    
    /* Update the remaining number of data to be played */
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 80043f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    CurrentPos += DMA_MAX(AudioRemSize);        
 80043f4:	602a      	str	r2, [r5, #0]
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 80043f6:	bf2c      	ite	cs
 80043f8:	4a19      	ldrcs	r2, [pc, #100]	; (8004460 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
 80043fa:	f023 0201 	biccc.w	r2, r3, #1
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	6063      	str	r3, [r4, #4]
  uint32_t replay = 0;
 8004402:	2700      	movs	r7, #0
    /* Request to replay audio file from beginning */
    replay = 1;
  }

  /* Audio sample used for play */
  if((AudioTest == 0) && (replay == 1))
 8004404:	4e17      	ldr	r6, [pc, #92]	; (8004464 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa4>)
 8004406:	6873      	ldr	r3, [r6, #4]
 8004408:	b9c3      	cbnz	r3, 800443c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x7c>
 800440a:	b1bf      	cbz	r7, 800443c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x7c>
  {
    /* Replay from the beginning */
    /* Set the current audio pointer position */
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 800440c:	4d13      	ldr	r5, [pc, #76]	; (800445c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 800440e:	4816      	ldr	r0, [pc, #88]	; (8004468 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa8>)
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8004410:	6821      	ldr	r1, [r4, #0]
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8004412:	6028      	str	r0, [r5, #0]
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8004414:	f7fd f97e 	bl	8001714 <BSP_AUDIO_OUT_Play>
    /* Update the remaining number of data to be played */
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800441e:	429a      	cmp	r2, r3
 8004420:	bf28      	it	cs
 8004422:	461a      	movcs	r2, r3
 8004424:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    /* Update the current audio pointer position */
    CurrentPos += DMA_MAX(AudioTotalSize);
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442c:	bf28      	it	cs
 800442e:	4b0c      	ldrcs	r3, [pc, #48]	; (8004460 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8004430:	6062      	str	r2, [r4, #4]
    CurrentPos += DMA_MAX(AudioTotalSize);
 8004432:	682a      	ldr	r2, [r5, #0]
 8004434:	bf38      	it	cc
 8004436:	005b      	lslcc	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	602b      	str	r3, [r5, #0]
  }
  
  /* Audio sample saved during record */
  if((AudioTest == 1) && (replay == 1))
 800443c:	6873      	ldr	r3, [r6, #4]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d108      	bne.n	8004454 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>
 8004442:	b13f      	cbz	r7, 8004454 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>
  {
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8004444:	6821      	ldr	r1, [r4, #0]
 8004446:	4809      	ldr	r0, [pc, #36]	; (800446c <BSP_AUDIO_OUT_TransferComplete_CallBack+0xac>)
  }
}
 8004448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 800444c:	f7fd b962 	b.w	8001714 <BSP_AUDIO_OUT_Play>
    replay = 1;
 8004450:	2701      	movs	r7, #1
 8004452:	e7d7      	b.n	8004404 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x44>
}
 8004454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004456:	bf00      	nop
 8004458:	2000012c 	.word	0x2000012c
 800445c:	20000ac4 	.word	0x20000ac4
 8004460:	0001fffe 	.word	0x0001fffe
 8004464:	2000082c 	.word	0x2000082c
 8004468:	08020000 	.word	0x08020000
 800446c:	20000afc 	.word	0x20000afc

08004470 <BSP_AUDIO_OUT_Error_CallBack>:
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 8004470:	f000 b921 	b.w	80046b6 <Error_Handler>

08004474 <AudioRecord_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioRecord_Test(void)
{
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8004478:	4d60      	ldr	r5, [pc, #384]	; (80045fc <AudioRecord_Test+0x188>)
 800447a:	2300      	movs	r3, #0
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 800447c:	2201      	movs	r2, #1
 800447e:	2110      	movs	r1, #16
 8004480:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8004484:	602b      	str	r3, [r5, #0]
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8004486:	f7fd fb97 	bl	8001bb8 <BSP_AUDIO_IN_Init>
 800448a:	b108      	cbz	r0, 8004490 <AudioRecord_Test+0x1c>
  {
    /* Record Error */
    Error_Handler();
 800448c:	f000 f913 	bl	80046b6 <Error_Handler>
  }  

  /* Turn ON LED3: start record */
  BSP_LED_On(LED3);
 8004490:	2001      	movs	r0, #1
 8004492:	f7fc ff6d 	bl	8001370 <BSP_LED_On>
  
  /* Start the record */
  if (BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE) != AUDIO_OK)
 8004496:	485a      	ldr	r0, [pc, #360]	; (8004600 <AudioRecord_Test+0x18c>)
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	f7fd fab5 	bl	8001a08 <BSP_AUDIO_IN_Record>
 800449e:	b108      	cbz	r0, 80044a4 <AudioRecord_Test+0x30>
  {
    /* Record Error */
    Error_Handler();
 80044a0:	f000 f909 	bl	80046b6 <Error_Handler>
  }
  BufferCtl.fptr = 0;
  
  AUDIODataReady = 0; 
 80044a4:	4c56      	ldr	r4, [pc, #344]	; (8004600 <AudioRecord_Test+0x18c>)
    {
      /* PDM to PCM data convert */
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);

      /* Copy PCM data in internal buffer */
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 80044a6:	4e57      	ldr	r6, [pc, #348]	; (8004604 <AudioRecord_Test+0x190>)
  BufferCtl.fptr = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	606b      	str	r3, [r5, #4]
  AUDIODataReady = 0; 
 80044ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 80044b0:	f504 7882 	add.w	r8, r4, #260	; 0x104
      
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 80044b4:	2700      	movs	r7, #0
 80044b6:	e034      	b.n	8004522 <AudioRecord_Test+0xae>
    if(BufferCtl.offset == BUFFER_OFFSET_HALF)
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d163      	bne.n	8004586 <AudioRecord_Test+0x112>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 80044be:	4641      	mov	r1, r8
 80044c0:	484f      	ldr	r0, [pc, #316]	; (8004600 <AudioRecord_Test+0x18c>)
 80044c2:	f7fd fab3 	bl	8001a2c <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 80044c6:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80044ca:	4b4f      	ldr	r3, [pc, #316]	; (8004608 <AudioRecord_Test+0x194>)
 80044cc:	eb06 1282 	add.w	r2, r6, r2, lsl #6
 80044d0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80044d4:	f853 0b04 	ldr.w	r0, [r3], #4
 80044d8:	f842 0b04 	str.w	r0, [r2], #4
 80044dc:	428b      	cmp	r3, r1
 80044de:	d1f9      	bne.n	80044d4 <AudioRecord_Test+0x60>
      
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 80044e0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 80044e4:	602f      	str	r7, [r5, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 80044e6:	f240 13bf 	movw	r3, #447	; 0x1bf
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10a      	bne.n	8004504 <AudioRecord_Test+0x90>
      {
        AUDIODataReady = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        AUDIOBuffOffset = 0;
 80044f4:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
        ITCounter = 0;
      }
      else
      {
        ITCounter++;
 80044f8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80044fc:	3301      	adds	r3, #1
 80044fe:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8004502:	e00e      	b.n	8004522 <AudioRecord_Test+0xae>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8004504:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004508:	f240 337f 	movw	r3, #895	; 0x37f
 800450c:	429a      	cmp	r2, r3
 800450e:	d1f3      	bne.n	80044f8 <AudioRecord_Test+0x84>
        AUDIODataReady = 2;
 8004510:	2302      	movs	r3, #2
 8004512:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8004516:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800451a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
        ITCounter = 0;
 800451e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
  while (AUDIODataReady != 2) 
 8004522:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004526:	2b02      	cmp	r3, #2
 8004528:	d1c6      	bne.n	80044b8 <AudioRecord_Test+0x44>
      } 
    }   
  };
  
  /* Stop audio record */
  if (BSP_AUDIO_IN_Stop() != AUDIO_OK)
 800452a:	f7fd fa77 	bl	8001a1c <BSP_AUDIO_IN_Stop>
 800452e:	b108      	cbz	r0, 8004534 <AudioRecord_Test+0xc0>
  {
    /* Record Error */
    Error_Handler();
 8004530:	f000 f8c1 	bl	80046b6 <Error_Handler>
  }

  /* Turn OFF LED3: record stopped */
  BSP_LED_Off(LED3);
 8004534:	2001      	movs	r0, #1
 8004536:	f7fc ff29 	bl	800138c <BSP_LED_Off>
  /* Turn ON LED6: play recorded file */
  BSP_LED_On(LED6);
 800453a:	2003      	movs	r0, #3
 800453c:	f7fc ff18 	bl	8001370 <BSP_LED_On>
  
  /* Play in the loop the recorded file */

  /* Set variable to indicate play from record buffer */ 
  AudioTest = 1;
 8004540:	4b32      	ldr	r3, [pc, #200]	; (800460c <AudioRecord_Test+0x198>)
  
  /* Set variable used to stop player before starting */
  UserPressButton = 0;
 8004542:	4c33      	ldr	r4, [pc, #204]	; (8004610 <AudioRecord_Test+0x19c>)
  AudioTest = 1;
 8004544:	2201      	movs	r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  UserPressButton = 0;
 8004548:	2500      	movs	r5, #0

  /* Initialize audio IN at REC_FREQ */ 
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);
 800454a:	2146      	movs	r1, #70	; 0x46
 800454c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004550:	2004      	movs	r0, #4
  UserPressButton = 0;
 8004552:	7025      	strb	r5, [r4, #0]
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);
 8004554:	f7fd fa06 	bl	8001964 <BSP_AUDIO_OUT_Init>

  /* Set the total number of data to be played */
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8004558:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <AudioRecord_Test+0x1a0>)
  /* Update the remaining number of data to be played */
  AudioRemSize = 0;  
  /* Update the WrBuffer audio pointer position */
  CurrentPos = (uint16_t *)(WrBuffer);
 800455a:	482a      	ldr	r0, [pc, #168]	; (8004604 <AudioRecord_Test+0x190>)
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 800455c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004560:	6019      	str	r1, [r3, #0]
  AudioRemSize = 0;  
 8004562:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <AudioRecord_Test+0x1a4>)
 8004564:	601d      	str	r5, [r3, #0]
  CurrentPos = (uint16_t *)(WrBuffer);
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <AudioRecord_Test+0x1a8>)
 8004568:	6018      	str	r0, [r3, #0]
  
  /* Play the recorded buffer */
  BSP_AUDIO_OUT_Play(WrBuffer , AudioTotalSize);
 800456a:	f7fd f8d3 	bl	8001714 <BSP_AUDIO_OUT_Play>
  
  while(!UserPressButton)
 800456e:	7823      	ldrb	r3, [r4, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0fc      	beq.n	800456e <AudioRecord_Test+0xfa>
  { 
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW) != AUDIO_OK)
 8004574:	2002      	movs	r0, #2
 8004576:	f7fd f91b 	bl	80017b0 <BSP_AUDIO_OUT_Stop>
 800457a:	2800      	cmp	r0, #0
 800457c:	d03b      	beq.n	80045f6 <AudioRecord_Test+0x182>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 800457e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8004582:	f000 b898 	b.w	80046b6 <Error_Handler>
    if(BufferCtl.offset == BUFFER_OFFSET_FULL)
 8004586:	2b02      	cmp	r3, #2
 8004588:	d1cb      	bne.n	8004522 <AudioRecord_Test+0xae>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 800458a:	4641      	mov	r1, r8
 800458c:	4824      	ldr	r0, [pc, #144]	; (8004620 <AudioRecord_Test+0x1ac>)
 800458e:	f7fd fa4d 	bl	8001a2c <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8004592:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004596:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <AudioRecord_Test+0x194>)
 8004598:	eb06 1383 	add.w	r3, r6, r3, lsl #6
 800459c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 80045a0:	f852 0b04 	ldr.w	r0, [r2], #4
 80045a4:	f843 0b04 	str.w	r0, [r3], #4
 80045a8:	428a      	cmp	r2, r1
 80045aa:	d1f9      	bne.n	80045a0 <AudioRecord_Test+0x12c>
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 80045ac:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 80045b0:	f240 12bf 	movw	r2, #447	; 0x1bf
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 80045b4:	2300      	movs	r3, #0
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 80045b6:	4291      	cmp	r1, r2
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 80045b8:	602b      	str	r3, [r5, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 80045ba:	d10a      	bne.n	80045d2 <AudioRecord_Test+0x15e>
        AUDIODataReady = 1;
 80045bc:	2201      	movs	r2, #1
 80045be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
        AUDIOBuffOffset = 0;
 80045c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
        ITCounter++;
 80045c6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80045ca:	4413      	add	r3, r2
        ITCounter++;
 80045cc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 80045d0:	e770      	b.n	80044b4 <AudioRecord_Test+0x40>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 80045d2:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 80045d6:	f240 327f 	movw	r2, #895	; 0x37f
 80045da:	4291      	cmp	r1, r2
        AUDIODataReady = 2;
 80045dc:	bf09      	itett	eq
 80045de:	2202      	moveq	r2, #2
        ITCounter++;
 80045e0:	f8d4 3144 	ldrne.w	r3, [r4, #324]	; 0x144
        AUDIODataReady = 2;
 80045e4:	f8c4 2100 	streq.w	r2, [r4, #256]	; 0x100
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 80045e8:	f44f 5260 	moveq.w	r2, #14336	; 0x3800
 80045ec:	bf0c      	ite	eq
 80045ee:	f8c4 2148 	streq.w	r2, [r4, #328]	; 0x148
        ITCounter++;
 80045f2:	3301      	addne	r3, #1
 80045f4:	e7ea      	b.n	80045cc <AudioRecord_Test+0x158>
}
 80045f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045fa:	bf00      	nop
 80045fc:	20000af4 	.word	0x20000af4
 8004600:	20000834 	.word	0x20000834
 8004604:	20000afc 	.word	0x20000afc
 8004608:	20000938 	.word	0x20000938
 800460c:	20000830 	.word	0x20000830
 8004610:	20000980 	.word	0x20000980
 8004614:	2000012c 	.word	0x2000012c
 8004618:	20000130 	.word	0x20000130
 800461c:	20000ac4 	.word	0x20000ac4
 8004620:	200008b4 	.word	0x200008b4

08004624 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{ 
  BufferCtl.offset = BUFFER_OFFSET_FULL;
 8004624:	4b01      	ldr	r3, [pc, #4]	; (800462c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8004626:	2202      	movs	r2, #2
 8004628:	601a      	str	r2, [r3, #0]
}
 800462a:	4770      	bx	lr
 800462c:	20000af4 	.word	0x20000af4

08004630 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_HALF;
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	4770      	bx	lr
 8004638:	20000af4 	.word	0x20000af4

0800463c <BSP_AUDIO_IN_Error_Callback>:
  * @retval None
  */
void BSP_AUDIO_IN_Error_Callback(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 800463c:	f000 b83b 	b.w	80046b6 <Error_Handler>

08004640 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8004640:	2801      	cmp	r0, #1
{
 8004642:	b508      	push	{r3, lr}
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8004644:	d108      	bne.n	8004658 <HAL_GPIO_EXTI_Callback+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8004646:	2000      	movs	r0, #0
 8004648:	f7fc fef6 	bl	8001438 <BSP_PB_GetState>
 800464c:	2800      	cmp	r0, #0
 800464e:	d1fa      	bne.n	8004646 <HAL_GPIO_EXTI_Callback+0x6>
    UserPressButton = 1;
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_GPIO_EXTI_Callback+0x38>)
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
}
 8004656:	bd08      	pop	{r3, pc}
  if(ACCELERO_INT1_PIN == GPIO_Pin)
 8004658:	2810      	cmp	r0, #16
 800465a:	d1fc      	bne.n	8004656 <HAL_GPIO_EXTI_Callback+0x16>
    if (PressCount == 1)
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_GPIO_EXTI_Callback+0x38>)
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <HAL_GPIO_EXTI_Callback+0x3c>)
 8004660:	6858      	ldr	r0, [r3, #4]
 8004662:	2100      	movs	r1, #0
 8004664:	2801      	cmp	r0, #1
      PauseResumeStatus = PAUSE_STATUS;
 8004666:	bf1b      	ittet	ne
 8004668:	6011      	strne	r1, [r2, #0]
      PressCount = 1;
 800466a:	2201      	movne	r2, #1
      PauseResumeStatus = RESUME_STATUS;
 800466c:	6010      	streq	r0, [r2, #0]
      PressCount = 1;
 800466e:	605a      	strne	r2, [r3, #4]
      PressCount = 0;
 8004670:	bf08      	it	eq
 8004672:	6059      	streq	r1, [r3, #4]
}
 8004674:	e7ef      	b.n	8004656 <HAL_GPIO_EXTI_Callback+0x16>
 8004676:	bf00      	nop
 8004678:	20000980 	.word	0x20000980
 800467c:	20000134 	.word	0x20000134

08004680 <Toggle_Leds>:
  * @brief  Toggle LEDs
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8004680:	b508      	push	{r3, lr}
  BSP_LED_Toggle(LED3);
 8004682:	2001      	movs	r0, #1
 8004684:	f7fc fe90 	bl	80013a8 <BSP_LED_Toggle>
  HAL_Delay(100);
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	f7fd fbc5 	bl	8001e18 <HAL_Delay>
  BSP_LED_Toggle(LED4);
 800468e:	2000      	movs	r0, #0
 8004690:	f7fc fe8a 	bl	80013a8 <BSP_LED_Toggle>
  HAL_Delay(100);
 8004694:	2064      	movs	r0, #100	; 0x64
 8004696:	f7fd fbbf 	bl	8001e18 <HAL_Delay>
  BSP_LED_Toggle(LED5);
 800469a:	2002      	movs	r0, #2
 800469c:	f7fc fe84 	bl	80013a8 <BSP_LED_Toggle>
  HAL_Delay(100);
 80046a0:	2064      	movs	r0, #100	; 0x64
 80046a2:	f7fd fbb9 	bl	8001e18 <HAL_Delay>
  BSP_LED_Toggle(LED6);
 80046a6:	2003      	movs	r0, #3
 80046a8:	f7fc fe7e 	bl	80013a8 <BSP_LED_Toggle>
  HAL_Delay(100);
}
 80046ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(100);
 80046b0:	2064      	movs	r0, #100	; 0x64
 80046b2:	f7fd bbb1 	b.w	8001e18 <HAL_Delay>

080046b6 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80046b6:	b508      	push	{r3, lr}
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 80046b8:	2002      	movs	r0, #2
 80046ba:	f7fc fe59 	bl	8001370 <BSP_LED_On>
  while(1)
 80046be:	e7fe      	b.n	80046be <Error_Handler+0x8>

080046c0 <main>:
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 80046c4:	f7fd fb7c 	bl	8001dc0 <HAL_Init>
  BSP_LED_Init(LED3);
 80046c8:	2001      	movs	r0, #1
 80046ca:	f7fc fdf9 	bl	80012c0 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7fc fdf6 	bl	80012c0 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80046d4:	2002      	movs	r0, #2
 80046d6:	f7fc fdf3 	bl	80012c0 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80046da:	2003      	movs	r0, #3
 80046dc:	f7fc fdf0 	bl	80012c0 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	4a39      	ldr	r2, [pc, #228]	; (80047c8 <main+0x108>)
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80046e8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80046ec:	6411      	str	r1, [r2, #64]	; 0x40
 80046ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046f0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80046f4:	9201      	str	r2, [sp, #4]
 80046f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f8:	4a34      	ldr	r2, [pc, #208]	; (80047cc <main+0x10c>)
 80046fa:	9302      	str	r3, [sp, #8]
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004702:	6011      	str	r1, [r2, #0]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800470a:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800470c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800470e:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004710:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8004712:	2210      	movs	r2, #16
 8004714:	2501      	movs	r5, #1
 8004716:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800471a:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800471e:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004720:	2304      	movs	r3, #4
 8004722:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004726:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800472a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800472c:	2307      	movs	r3, #7
 800472e:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004730:	f7fe fffa 	bl	8003728 <HAL_RCC_OscConfig>
 8004734:	b108      	cbz	r0, 800473a <main+0x7a>
    Error_Handler();
 8004736:	f7ff ffbe 	bl	80046b6 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800473a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800473c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004744:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004748:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800474a:	2103      	movs	r1, #3
 800474c:	a803      	add	r0, sp, #12
 800474e:	f7ff f9c5 	bl	8003adc <HAL_RCC_ClockConfig>
 8004752:	2800      	cmp	r0, #0
 8004754:	d1ef      	bne.n	8004736 <main+0x76>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8004756:	4629      	mov	r1, r5
 8004758:	f7fc fe34 	bl	80013c4 <BSP_PB_Init>
  while (!UserPressButton) Toggle_Leds();
 800475c:	4d1c      	ldr	r5, [pc, #112]	; (80047d0 <main+0x110>)
 800475e:	462c      	mov	r4, r5
 8004760:	782b      	ldrb	r3, [r5, #0]
 8004762:	b35b      	cbz	r3, 80047bc <main+0xfc>
  BSP_LED_Off(LED3);
 8004764:	2001      	movs	r0, #1
 8004766:	f7fc fe11 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 800476a:	2000      	movs	r0, #0
 800476c:	f7fc fe0e 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8004770:	2002      	movs	r0, #2
 8004772:	f7fc fe0b 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 8004776:	2003      	movs	r0, #3
 8004778:	f7fc fe08 	bl	800138c <BSP_LED_Off>
    UserPressButton = 0;
 800477c:	2500      	movs	r5, #0
    BSP_examples[DemoIndex++].DemoFunc();
 800477e:	4e15      	ldr	r6, [pc, #84]	; (80047d4 <main+0x114>)
 8004780:	462f      	mov	r7, r5
 8004782:	7a23      	ldrb	r3, [r4, #8]
    UserPressButton = 0;
 8004784:	7025      	strb	r5, [r4, #0]
    BSP_examples[DemoIndex++].DemoFunc();
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	7222      	strb	r2, [r4, #8]
 800478a:	223c      	movs	r2, #60	; 0x3c
 800478c:	fb02 6303 	mla	r3, r2, r3, r6
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4798      	blx	r3
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8004794:	7a23      	ldrb	r3, [r4, #8]
    UserPressButton = 0;
 8004796:	7027      	strb	r7, [r4, #0]
    if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8004798:	2b03      	cmp	r3, #3
      DemoIndex = 0;
 800479a:	bf88      	it	hi
 800479c:	7225      	strbhi	r5, [r4, #8]
    while (!UserPressButton) Toggle_Leds();
 800479e:	7823      	ldrb	r3, [r4, #0]
 80047a0:	b17b      	cbz	r3, 80047c2 <main+0x102>
    BSP_LED_Off(LED3);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7fc fdf2 	bl	800138c <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fc fdef 	bl	800138c <BSP_LED_Off>
    BSP_LED_Off(LED5);
 80047ae:	2002      	movs	r0, #2
 80047b0:	f7fc fdec 	bl	800138c <BSP_LED_Off>
    BSP_LED_Off(LED6);
 80047b4:	2003      	movs	r0, #3
 80047b6:	f7fc fde9 	bl	800138c <BSP_LED_Off>
    UserPressButton = 0;
 80047ba:	e7e2      	b.n	8004782 <main+0xc2>
  while (!UserPressButton) Toggle_Leds();
 80047bc:	f7ff ff60 	bl	8004680 <Toggle_Leds>
 80047c0:	e7ce      	b.n	8004760 <main+0xa0>
    while (!UserPressButton) Toggle_Leds();
 80047c2:	f7ff ff5d 	bl	8004680 <Toggle_Leds>
 80047c6:	e7ea      	b.n	800479e <main+0xde>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	20000980 	.word	0x20000980
 80047d4:	20000134 	.word	0x20000134

080047d8 <ACCELERO_MEMS_Test>:
  *         The main objective of this test is to check acceleration on 2 axes X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 80047d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 80047da:	f7fc ff3f 	bl	800165c <BSP_ACCELERO_Init>
 80047de:	b108      	cbz	r0, 80047e4 <ACCELERO_MEMS_Test+0xc>
  {
    /* Initialization Error */
    Error_Handler(); 
 80047e0:	f7ff ff69 	bl	80046b6 <Error_Handler>
  }
  
  UserPressButton = 0;
 80047e4:	4c24      	ldr	r4, [pc, #144]	; (8004878 <ACCELERO_MEMS_Test+0xa0>)
 80047e6:	4d25      	ldr	r5, [pc, #148]	; (800487c <ACCELERO_MEMS_Test+0xa4>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	7023      	strb	r3, [r4, #0]
  while(!UserPressButton)
 80047ec:	7823      	ldrb	r3, [r4, #0]
 80047ee:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80047f2:	b10b      	cbz	r3, 80047f8 <ACCELERO_MEMS_Test+0x20>
  {
    ACCELERO_ReadAcc();
  }
}  
 80047f4:	b002      	add	sp, #8
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
{
  int16_t buffer[3] = {0};
  int16_t xval, yval = 0x00;
  
  /* Read Acceleration */
  BSP_ACCELERO_GetXYZ(buffer);
 80047f8:	4668      	mov	r0, sp
  int16_t buffer[3] = {0};
 80047fa:	9600      	str	r6, [sp, #0]
 80047fc:	f8ad 6004 	strh.w	r6, [sp, #4]
  BSP_ACCELERO_GetXYZ(buffer);
 8004800:	f7fc ff54 	bl	80016ac <BSP_ACCELERO_GetXYZ>

  xval = buffer[0];
 8004804:	f9bd 2000 	ldrsh.w	r2, [sp]
  yval = buffer[1];
 8004808:	f9bd 3002 	ldrsh.w	r3, [sp, #2]

  if((ABS(xval))>(ABS(yval)))
 800480c:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8004810:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004814:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 8004818:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800481c:	b280      	uxth	r0, r0
 800481e:	b289      	uxth	r1, r1
 8004820:	4288      	cmp	r0, r1
 8004822:	d91c      	bls.n	800485e <ACCELERO_MEMS_Test+0x86>
  {
    if(xval > ThresholdHigh)
 8004824:	f9b5 3000 	ldrsh.w	r3, [r5]
 8004828:	4293      	cmp	r3, r2
 800482a:	da12      	bge.n	8004852 <ACCELERO_MEMS_Test+0x7a>
    { 
      /* LED5 On */
      BSP_LED_On(LED5);
 800482c:	2002      	movs	r0, #2
      HAL_Delay(10);
    }
    else if(yval > ThresholdHigh)
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 800482e:	f7fc fd9f 	bl	8001370 <BSP_LED_On>
      HAL_Delay(10);
 8004832:	200a      	movs	r0, #10
 8004834:	f7fd faf0 	bl	8001e18 <HAL_Delay>
    { 
      HAL_Delay(10);
    }
  } 
  
  BSP_LED_Off(LED3);
 8004838:	2001      	movs	r0, #1
 800483a:	f7fc fda7 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 800483e:	2000      	movs	r0, #0
 8004840:	f7fc fda4 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8004844:	2002      	movs	r0, #2
 8004846:	f7fc fda1 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 800484a:	2003      	movs	r0, #3
 800484c:	f7fc fd9e 	bl	800138c <BSP_LED_Off>
}
 8004850:	e7cc      	b.n	80047ec <ACCELERO_MEMS_Test+0x14>
    else if(xval < ThresholdLow)
 8004852:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8004856:	4293      	cmp	r3, r2
 8004858:	ddeb      	ble.n	8004832 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED4);      
 800485a:	4630      	mov	r0, r6
 800485c:	e7e7      	b.n	800482e <ACCELERO_MEMS_Test+0x56>
    if(yval < ThresholdLow)
 800485e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8004862:	429a      	cmp	r2, r3
 8004864:	dd01      	ble.n	800486a <ACCELERO_MEMS_Test+0x92>
      BSP_LED_On(LED6);
 8004866:	2003      	movs	r0, #3
 8004868:	e7e1      	b.n	800482e <ACCELERO_MEMS_Test+0x56>
    else if(yval > ThresholdHigh)
 800486a:	f9b5 2000 	ldrsh.w	r2, [r5]
 800486e:	429a      	cmp	r2, r3
 8004870:	dadf      	bge.n	8004832 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED3);
 8004872:	2001      	movs	r0, #1
 8004874:	e7db      	b.n	800482e <ACCELERO_MEMS_Test+0x56>
 8004876:	bf00      	nop
 8004878:	20000980 	.word	0x20000980
 800487c:	20000228 	.word	0x20000228

08004880 <GYRO_MEMS_Test>:
  *         MEMS peripheral.
  * @param  None
  * @retval None
  */
void GYRO_MEMS_Test(void)
{
 8004880:	b510      	push	{r4, lr}
 8004882:	ed2d 8b02 	vpush	{d8}
 8004886:	b084      	sub	sp, #16
  /* Init Gyroscope MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 8004888:	f7fc fee8 	bl	800165c <BSP_ACCELERO_Init>
 800488c:	b108      	cbz	r0, 8004892 <GYRO_MEMS_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler(); 
 800488e:	f7ff ff12 	bl	80046b6 <Error_Handler>
  }
  
  UserPressButton = 0;
 8004892:	4c2e      	ldr	r4, [pc, #184]	; (800494c <GYRO_MEMS_Test+0xcc>)
      HAL_Delay(10);
    }
  }
  else
  {
    if(Buffer[1] < -5000.0f)
 8004894:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8004950 <GYRO_MEMS_Test+0xd0>
      /* LED6 On */
      BSP_LED_On(LED6);
      
      HAL_Delay(10);
    }
    else if(Buffer[1] > 5000.0f)
 8004898:	eddf 8a2e 	vldr	s17, [pc, #184]	; 8004954 <GYRO_MEMS_Test+0xd4>
  UserPressButton = 0;
 800489c:	2200      	movs	r2, #0
 800489e:	7022      	strb	r2, [r4, #0]
  while(!UserPressButton)
 80048a0:	7823      	ldrb	r3, [r4, #0]
 80048a2:	b11b      	cbz	r3, 80048ac <GYRO_MEMS_Test+0x2c>
}  
 80048a4:	b004      	add	sp, #16
 80048a6:	ecbd 8b02 	vpop	{d8}
 80048aa:	bd10      	pop	{r4, pc}
  if(BSP_GYRO_Init() != HAL_OK)
 80048ac:	f7fd fa0e 	bl	8001ccc <BSP_GYRO_Init>
 80048b0:	b108      	cbz	r0, 80048b6 <GYRO_MEMS_Test+0x36>
    Error_Handler(); 
 80048b2:	f7ff ff00 	bl	80046b6 <Error_Handler>
  BSP_GYRO_GetXYZ(Buffer);
 80048b6:	a801      	add	r0, sp, #4
 80048b8:	f7fd fa30 	bl	8001d1c <BSP_GYRO_GetXYZ>
  Xval = ABS((Buffer[0]));
 80048bc:	ed9d 7a01 	vldr	s14, [sp, #4]
  Yval = ABS((Buffer[1])); 
 80048c0:	eddd 7a02 	vldr	s15, [sp, #8]
  Xval = ABS((Buffer[0]));
 80048c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  Yval = ABS((Buffer[1])); 
 80048cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  Xval = ABS((Buffer[0]));
 80048d0:	bf4c      	ite	mi
 80048d2:	eeb1 6a47 	vnegmi.f32	s12, s14
 80048d6:	eeb0 6a47 	vmovpl.f32	s12, s14
  Yval = ABS((Buffer[1])); 
 80048da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048de:	bf4c      	ite	mi
 80048e0:	eef1 6a67 	vnegmi.f32	s13, s15
 80048e4:	eef0 6a67 	vmovpl.f32	s13, s15
  if(Xval>Yval)
 80048e8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	dd1e      	ble.n	8004930 <GYRO_MEMS_Test+0xb0>
    if(Buffer[0] > 5000.0f)
 80048f2:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	dd12      	ble.n	8004922 <GYRO_MEMS_Test+0xa2>
      BSP_LED_On(LED5);
 80048fc:	2002      	movs	r0, #2
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 80048fe:	f7fc fd37 	bl	8001370 <BSP_LED_On>
      HAL_Delay(10);
 8004902:	200a      	movs	r0, #10
 8004904:	f7fd fa88 	bl	8001e18 <HAL_Delay>
    { 
      HAL_Delay(10);
    }
  } 
  
  BSP_LED_Off(LED3);
 8004908:	2001      	movs	r0, #1
 800490a:	f7fc fd3f 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED4);
 800490e:	2000      	movs	r0, #0
 8004910:	f7fc fd3c 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8004914:	2002      	movs	r0, #2
 8004916:	f7fc fd39 	bl	800138c <BSP_LED_Off>
  BSP_LED_Off(LED6);
 800491a:	2003      	movs	r0, #3
 800491c:	f7fc fd36 	bl	800138c <BSP_LED_Off>
}
 8004920:	e7be      	b.n	80048a0 <GYRO_MEMS_Test+0x20>
    else if(Buffer[0] < -5000.0f)
 8004922:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8004926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492a:	d5ea      	bpl.n	8004902 <GYRO_MEMS_Test+0x82>
      BSP_LED_On(LED4);
 800492c:	2000      	movs	r0, #0
 800492e:	e7e6      	b.n	80048fe <GYRO_MEMS_Test+0x7e>
    if(Buffer[1] < -5000.0f)
 8004930:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d501      	bpl.n	800493e <GYRO_MEMS_Test+0xbe>
      BSP_LED_On(LED6);
 800493a:	2003      	movs	r0, #3
 800493c:	e7df      	b.n	80048fe <GYRO_MEMS_Test+0x7e>
    else if(Buffer[1] > 5000.0f)
 800493e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	dddc      	ble.n	8004902 <GYRO_MEMS_Test+0x82>
      BSP_LED_On(LED3);
 8004948:	2001      	movs	r0, #1
 800494a:	e7d8      	b.n	80048fe <GYRO_MEMS_Test+0x7e>
 800494c:	20000980 	.word	0x20000980
 8004950:	c59c4000 	.word	0xc59c4000
 8004954:	459c4000 	.word	0x459c4000

08004958 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004958:	4770      	bx	lr

0800495a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800495a:	e7fe      	b.n	800495a <HardFault_Handler>

0800495c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800495c:	e7fe      	b.n	800495c <MemManage_Handler>

0800495e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800495e:	e7fe      	b.n	800495e <BusFault_Handler>

08004960 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004960:	e7fe      	b.n	8004960 <UsageFault_Handler>

08004962 <SVC_Handler>:
 8004962:	4770      	bx	lr

08004964 <DebugMon_Handler>:
 8004964:	4770      	bx	lr

08004966 <PendSV_Handler>:
 8004966:	4770      	bx	lr

08004968 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004968:	f7fd ba44 	b.w	8001df4 <HAL_IncTick>

0800496c <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800496c:	2001      	movs	r0, #1
 800496e:	f7fd bda7 	b.w	80024c0 <HAL_GPIO_EXTI_IRQHandler>

08004972 <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 8004972:	2010      	movs	r0, #16
 8004974:	f7fd bda4 	b.w	80024c0 <HAL_GPIO_EXTI_IRQHandler>

08004978 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8004978:	4b01      	ldr	r3, [pc, #4]	; (8004980 <DMA1_Stream7_IRQHandler+0x8>)
 800497a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800497c:	f7fd bc06 	b.w	800218c <HAL_DMA_IRQHandler>
 8004980:	20000a30 	.word	0x20000a30

08004984 <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <DMA1_Stream3_IRQHandler+0x8>)
 8004986:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004988:	f7fd bc00 	b.w	800218c <HAL_DMA_IRQHandler>
 800498c:	20000a78 	.word	0x20000a78

08004990 <D16_GENERIC>:
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	b089      	sub	sp, #36	; 0x24
 8004996:	68d4      	ldr	r4, [r2, #12]
 8004998:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800499a:	6993      	ldr	r3, [r2, #24]
 800499c:	9407      	str	r4, [sp, #28]
 800499e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80049a0:	9306      	str	r3, [sp, #24]
 80049a2:	9402      	str	r4, [sp, #8]
 80049a4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80049a8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80049ac:	69d3      	ldr	r3, [r2, #28]
 80049ae:	6896      	ldr	r6, [r2, #8]
 80049b0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80049b2:	9103      	str	r1, [sp, #12]
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	d066      	beq.n	8004a86 <D16_GENERIC+0xf6>
 80049b8:	f004 0510 	and.w	r5, r4, #16
 80049bc:	f004 0420 	and.w	r4, r4, #32
 80049c0:	9504      	str	r5, [sp, #16]
 80049c2:	4938      	ldr	r1, [pc, #224]	; (8004aa4 <D16_GENERIC+0x114>)
 80049c4:	9405      	str	r4, [sp, #20]
 80049c6:	f04f 0e00 	mov.w	lr, #0
 80049ca:	4635      	mov	r5, r6
 80049cc:	e04f      	b.n	8004a6e <D16_GENERIC+0xde>
 80049ce:	5d87      	ldrb	r7, [r0, r6]
 80049d0:	7804      	ldrb	r4, [r0, #0]
 80049d2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80049d6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80049da:	b2e6      	uxtb	r6, r4
 80049dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80049e0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80049e4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80049e8:	4433      	add	r3, r6
 80049ea:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80049ee:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80049f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80049fa:	0aa3      	lsrs	r3, r4, #10
 80049fc:	4c2a      	ldr	r4, [pc, #168]	; (8004aa8 <D16_GENERIC+0x118>)
 80049fe:	fb26 5404 	smlad	r4, r6, r4, r5
 8004a02:	4d2a      	ldr	r5, [pc, #168]	; (8004aac <D16_GENERIC+0x11c>)
 8004a04:	fb26 f505 	smuad	r5, r6, r5
 8004a08:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004a0c:	eb04 080a 	add.w	r8, r4, sl
 8004a10:	eba8 080b 	sub.w	r8, r8, fp
 8004a14:	4646      	mov	r6, r8
 8004a16:	17f7      	asrs	r7, r6, #31
 8004a18:	e9cd 6700 	strd	r6, r7, [sp]
 8004a1c:	9e04      	ldr	r6, [sp, #16]
 8004a1e:	f10e 0c01 	add.w	ip, lr, #1
 8004a22:	b16e      	cbz	r6, 8004a40 <D16_GENERIC+0xb0>
 8004a24:	6a16      	ldr	r6, [r2, #32]
 8004a26:	9f01      	ldr	r7, [sp, #4]
 8004a28:	fba8 8906 	umull	r8, r9, r8, r6
 8004a2c:	fb06 9907 	mla	r9, r6, r7, r9
 8004a30:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004a34:	f149 0900 	adc.w	r9, r9, #0
 8004a38:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004a3c:	46a3      	mov	fp, r4
 8004a3e:	4654      	mov	r4, sl
 8004a40:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004a42:	9f02      	ldr	r7, [sp, #8]
 8004a44:	0424      	lsls	r4, r4, #16
 8004a46:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004a4a:	f04f 0900 	mov.w	r9, #0
 8004a4e:	fb0e fe06 	mul.w	lr, lr, r6
 8004a52:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004a56:	9e03      	ldr	r6, [sp, #12]
 8004a58:	464f      	mov	r7, r9
 8004a5a:	10bc      	asrs	r4, r7, #2
 8004a5c:	f304 040f 	ssat	r4, #16, r4
 8004a60:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8004a64:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004a66:	fa1f fe8c 	uxth.w	lr, ip
 8004a6a:	4574      	cmp	r4, lr
 8004a6c:	d90a      	bls.n	8004a84 <D16_GENERIC+0xf4>
 8004a6e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004a70:	2c01      	cmp	r4, #1
 8004a72:	b2e6      	uxtb	r6, r4
 8004a74:	d1ab      	bne.n	80049ce <D16_GENERIC+0x3e>
 8004a76:	9e05      	ldr	r6, [sp, #20]
 8004a78:	f850 4b02 	ldr.w	r4, [r0], #2
 8004a7c:	2e00      	cmp	r6, #0
 8004a7e:	d0ac      	beq.n	80049da <D16_GENERIC+0x4a>
 8004a80:	ba64      	rev16	r4, r4
 8004a82:	e7aa      	b.n	80049da <D16_GENERIC+0x4a>
 8004a84:	462e      	mov	r6, r5
 8004a86:	9907      	ldr	r1, [sp, #28]
 8004a88:	61d3      	str	r3, [r2, #28]
 8004a8a:	9b06      	ldr	r3, [sp, #24]
 8004a8c:	6096      	str	r6, [r2, #8]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	60d1      	str	r1, [r2, #12]
 8004a92:	f8c2 a010 	str.w	sl, [r2, #16]
 8004a96:	f8c2 b014 	str.w	fp, [r2, #20]
 8004a9a:	6193      	str	r3, [r2, #24]
 8004a9c:	b009      	add	sp, #36	; 0x24
 8004a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000022c 	.word	0x2000022c
 8004aa8:	00030001 	.word	0x00030001
 8004aac:	00010003 	.word	0x00010003

08004ab0 <D24_GENERIC>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8004ab6:	6993      	ldr	r3, [r2, #24]
 8004ab8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004aba:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004abe:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8004ac2:	6894      	ldr	r4, [r2, #8]
 8004ac4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004ac8:	b089      	sub	sp, #36	; 0x24
 8004aca:	9307      	str	r3, [sp, #28]
 8004acc:	9503      	str	r5, [sp, #12]
 8004ace:	69d3      	ldr	r3, [r2, #28]
 8004ad0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004ad2:	9104      	str	r1, [sp, #16]
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	f000 8096 	beq.w	8004c06 <D24_GENERIC+0x156>
 8004ada:	f005 0610 	and.w	r6, r5, #16
 8004ade:	f005 0520 	and.w	r5, r5, #32
 8004ae2:	4954      	ldr	r1, [pc, #336]	; (8004c34 <D24_GENERIC+0x184>)
 8004ae4:	9605      	str	r6, [sp, #20]
 8004ae6:	9506      	str	r5, [sp, #24]
 8004ae8:	f04f 0e00 	mov.w	lr, #0
 8004aec:	f8cd 9008 	str.w	r9, [sp, #8]
 8004af0:	e06a      	b.n	8004bc8 <D24_GENERIC+0x118>
 8004af2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004af6:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004afa:	f890 c000 	ldrb.w	ip, [r0]
 8004afe:	042d      	lsls	r5, r5, #16
 8004b00:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004b04:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004b08:	44ac      	add	ip, r5
 8004b0a:	4438      	add	r0, r7
 8004b0c:	fa5f f68c 	uxtb.w	r6, ip
 8004b10:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8004b14:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004b18:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004b1c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b20:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004b24:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004b28:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004b2c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004b30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004b34:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004b38:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004b3c:	4d3e      	ldr	r5, [pc, #248]	; (8004c38 <D24_GENERIC+0x188>)
 8004b3e:	fb26 b705 	smlad	r7, r6, r5, fp
 8004b42:	4d3e      	ldr	r5, [pc, #248]	; (8004c3c <D24_GENERIC+0x18c>)
 8004b44:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004b48:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004b4c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004b50:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004b54:	2401      	movs	r4, #1
 8004b56:	fb26 f604 	smuad	r6, r6, r4
 8004b5a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004b5e:	9f02      	ldr	r7, [sp, #8]
 8004b60:	eb0e 0c04 	add.w	ip, lr, r4
 8004b64:	eb08 0406 	add.w	r4, r8, r6
 8004b68:	eb05 060a 	add.w	r6, r5, sl
 8004b6c:	1bf6      	subs	r6, r6, r7
 8004b6e:	4637      	mov	r7, r6
 8004b70:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004b74:	e9cd 7800 	strd	r7, r8, [sp]
 8004b78:	9f05      	ldr	r7, [sp, #20]
 8004b7a:	b177      	cbz	r7, 8004b9a <D24_GENERIC+0xea>
 8004b7c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004b80:	9502      	str	r5, [sp, #8]
 8004b82:	fba6 9a08 	umull	r9, sl, r6, r8
 8004b86:	9e01      	ldr	r6, [sp, #4]
 8004b88:	fb08 aa06 	mla	sl, r8, r6, sl
 8004b8c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8004b90:	f14a 0700 	adc.w	r7, sl, #0
 8004b94:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004b98:	4655      	mov	r5, sl
 8004b9a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004b9c:	9f03      	ldr	r7, [sp, #12]
 8004b9e:	03ad      	lsls	r5, r5, #14
 8004ba0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	fb0e fe06 	mul.w	lr, lr, r6
 8004bac:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004bb0:	9e04      	ldr	r6, [sp, #16]
 8004bb2:	464f      	mov	r7, r9
 8004bb4:	10bd      	asrs	r5, r7, #2
 8004bb6:	f305 050f 	ssat	r5, #16, r5
 8004bba:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8004bbe:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004bc0:	fa1f fe8c 	uxth.w	lr, ip
 8004bc4:	4575      	cmp	r5, lr
 8004bc6:	d91c      	bls.n	8004c02 <D24_GENERIC+0x152>
 8004bc8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8004bca:	b2ef      	uxtb	r7, r5
 8004bcc:	2d01      	cmp	r5, #1
 8004bce:	b23e      	sxth	r6, r7
 8004bd0:	d18f      	bne.n	8004af2 <D24_GENERIC+0x42>
 8004bd2:	9d06      	ldr	r5, [sp, #24]
 8004bd4:	b15d      	cbz	r5, 8004bee <D24_GENERIC+0x13e>
 8004bd6:	f01e 0f01 	tst.w	lr, #1
 8004bda:	d122      	bne.n	8004c22 <D24_GENERIC+0x172>
 8004bdc:	7805      	ldrb	r5, [r0, #0]
 8004bde:	78c7      	ldrb	r7, [r0, #3]
 8004be0:	7846      	ldrb	r6, [r0, #1]
 8004be2:	022d      	lsls	r5, r5, #8
 8004be4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004be8:	44b4      	add	ip, r6
 8004bea:	3002      	adds	r0, #2
 8004bec:	e78e      	b.n	8004b0c <D24_GENERIC+0x5c>
 8004bee:	7846      	ldrb	r6, [r0, #1]
 8004bf0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8004bf4:	f810 5b03 	ldrb.w	r5, [r0], #3
 8004bf8:	0236      	lsls	r6, r6, #8
 8004bfa:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8004bfe:	44ac      	add	ip, r5
 8004c00:	e784      	b.n	8004b0c <D24_GENERIC+0x5c>
 8004c02:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004c06:	61d3      	str	r3, [r2, #28]
 8004c08:	9b07      	ldr	r3, [sp, #28]
 8004c0a:	6094      	str	r4, [r2, #8]
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004c12:	f8c2 a010 	str.w	sl, [r2, #16]
 8004c16:	f8c2 9014 	str.w	r9, [r2, #20]
 8004c1a:	6193      	str	r3, [r2, #24]
 8004c1c:	b009      	add	sp, #36	; 0x24
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	78c5      	ldrb	r5, [r0, #3]
 8004c24:	7887      	ldrb	r7, [r0, #2]
 8004c26:	f810 6b04 	ldrb.w	r6, [r0], #4
 8004c2a:	022d      	lsls	r5, r5, #8
 8004c2c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004c30:	44b4      	add	ip, r6
 8004c32:	e76b      	b.n	8004b0c <D24_GENERIC+0x5c>
 8004c34:	2000022c 	.word	0x2000022c
 8004c38:	00030001 	.word	0x00030001
 8004c3c:	00060007 	.word	0x00060007

08004c40 <D32_GENERIC>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004c46:	6993      	ldr	r3, [r2, #24]
 8004c48:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004c4a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004c4e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8004c52:	69d6      	ldr	r6, [r2, #28]
 8004c54:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004c58:	b089      	sub	sp, #36	; 0x24
 8004c5a:	9307      	str	r3, [sp, #28]
 8004c5c:	9403      	str	r4, [sp, #12]
 8004c5e:	6893      	ldr	r3, [r2, #8]
 8004c60:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004c62:	9104      	str	r1, [sp, #16]
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	f000 809f 	beq.w	8004da8 <D32_GENERIC+0x168>
 8004c6a:	f004 0510 	and.w	r5, r4, #16
 8004c6e:	f004 0420 	and.w	r4, r4, #32
 8004c72:	9505      	str	r5, [sp, #20]
 8004c74:	4953      	ldr	r1, [pc, #332]	; (8004dc4 <D32_GENERIC+0x184>)
 8004c76:	9406      	str	r4, [sp, #24]
 8004c78:	f04f 0c00 	mov.w	ip, #0
 8004c7c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c80:	461d      	mov	r5, r3
 8004c82:	4617      	mov	r7, r2
 8004c84:	e077      	b.n	8004d76 <D32_GENERIC+0x136>
 8004c86:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004c8a:	f810 800e 	ldrb.w	r8, [r0, lr]
 8004c8e:	f810 e002 	ldrb.w	lr, [r0, r2]
 8004c92:	7800      	ldrb	r0, [r0, #0]
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004c9a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004c9e:	4403      	add	r3, r0
 8004ca0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8004ca4:	b2dc      	uxtb	r4, r3
 8004ca6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004caa:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004cae:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004cb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004cb6:	0e1b      	lsrs	r3, r3, #24
 8004cb8:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004cbc:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8004cc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004cc4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004cc8:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8004ccc:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8004cd0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8004cd4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004cd8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004cdc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004ce0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8004ce4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004ce8:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <D32_GENERIC+0x188>)
 8004cea:	fb22 b403 	smlad	r4, r2, r3, fp
 8004cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cf2:	fb2e 4803 	smlad	r8, lr, r3, r4
 8004cf6:	4b35      	ldr	r3, [pc, #212]	; (8004dcc <D32_GENERIC+0x18c>)
 8004cf8:	fb22 5503 	smlad	r5, r2, r3, r5
 8004cfc:	4b34      	ldr	r3, [pc, #208]	; (8004dd0 <D32_GENERIC+0x190>)
 8004cfe:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8004d02:	2301      	movs	r3, #1
 8004d04:	fb22 f203 	smuad	r2, r2, r3
 8004d08:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <D32_GENERIC+0x194>)
 8004d0a:	fb2e 2503 	smlad	r5, lr, r3, r2
 8004d0e:	9b02      	ldr	r3, [sp, #8]
 8004d10:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8004d14:	eb04 080a 	add.w	r8, r4, sl
 8004d18:	eba8 0803 	sub.w	r8, r8, r3
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	17d3      	asrs	r3, r2, #31
 8004d20:	e9cd 2300 	strd	r2, r3, [sp]
 8004d24:	9b05      	ldr	r3, [sp, #20]
 8004d26:	f10c 0e01 	add.w	lr, ip, #1
 8004d2a:	b16b      	cbz	r3, 8004d48 <D32_GENERIC+0x108>
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	9402      	str	r4, [sp, #8]
 8004d32:	fba8 8902 	umull	r8, r9, r8, r2
 8004d36:	fb02 9903 	mla	r9, r2, r3, r9
 8004d3a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004d3e:	f149 0900 	adc.w	r9, r9, #0
 8004d42:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004d46:	4654      	mov	r4, sl
 8004d48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d4a:	9a04      	ldr	r2, [sp, #16]
 8004d4c:	fb0c fc03 	mul.w	ip, ip, r3
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	0364      	lsls	r4, r4, #13
 8004d54:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004d58:	f04f 0900 	mov.w	r9, #0
 8004d5c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004d60:	464b      	mov	r3, r9
 8004d62:	109b      	asrs	r3, r3, #2
 8004d64:	f303 030f 	ssat	r3, #16, r3
 8004d68:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8004d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d6e:	fa1f fc8e 	uxth.w	ip, lr
 8004d72:	4563      	cmp	r3, ip
 8004d74:	d914      	bls.n	8004da0 <D32_GENERIC+0x160>
 8004d76:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004d78:	b2e2      	uxtb	r2, r4
 8004d7a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8004d7e:	eb00 080e 	add.w	r8, r0, lr
 8004d82:	4253      	negs	r3, r2
 8004d84:	2c01      	cmp	r4, #1
 8004d86:	eb08 0403 	add.w	r4, r8, r3
 8004d8a:	f47f af7c 	bne.w	8004c86 <D32_GENERIC+0x46>
 8004d8e:	1d02      	adds	r2, r0, #4
 8004d90:	6803      	ldr	r3, [r0, #0]
 8004d92:	9806      	ldr	r0, [sp, #24]
 8004d94:	b110      	cbz	r0, 8004d9c <D32_GENERIC+0x15c>
 8004d96:	ba5b      	rev16	r3, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	e783      	b.n	8004ca4 <D32_GENERIC+0x64>
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	e781      	b.n	8004ca4 <D32_GENERIC+0x64>
 8004da0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004da4:	462b      	mov	r3, r5
 8004da6:	463a      	mov	r2, r7
 8004da8:	6093      	str	r3, [r2, #8]
 8004daa:	9b07      	ldr	r3, [sp, #28]
 8004dac:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004db0:	2000      	movs	r0, #0
 8004db2:	61d6      	str	r6, [r2, #28]
 8004db4:	f8c2 a010 	str.w	sl, [r2, #16]
 8004db8:	f8c2 9014 	str.w	r9, [r2, #20]
 8004dbc:	6193      	str	r3, [r2, #24]
 8004dbe:	b009      	add	sp, #36	; 0x24
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	2000022c 	.word	0x2000022c
 8004dc8:	00060003 	.word	0x00060003
 8004dcc:	000a000c 	.word	0x000a000c
 8004dd0:	000c000a 	.word	0x000c000a
 8004dd4:	00030006 	.word	0x00030006

08004dd8 <D48_GENERIC>:
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	b089      	sub	sp, #36	; 0x24
 8004dde:	6953      	ldr	r3, [r2, #20]
 8004de0:	68d4      	ldr	r4, [r2, #12]
 8004de2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004de4:	9302      	str	r3, [sp, #8]
 8004de6:	9400      	str	r4, [sp, #0]
 8004de8:	6993      	ldr	r3, [r2, #24]
 8004dea:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004dec:	9307      	str	r3, [sp, #28]
 8004dee:	9403      	str	r4, [sp, #12]
 8004df0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004df4:	69d6      	ldr	r6, [r2, #28]
 8004df6:	6893      	ldr	r3, [r2, #8]
 8004df8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004dfa:	9104      	str	r1, [sp, #16]
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	f000 80c5 	beq.w	8004f8c <D48_GENERIC+0x1b4>
 8004e02:	f004 0510 	and.w	r5, r4, #16
 8004e06:	f004 0420 	and.w	r4, r4, #32
 8004e0a:	4967      	ldr	r1, [pc, #412]	; (8004fa8 <D48_GENERIC+0x1d0>)
 8004e0c:	9505      	str	r5, [sp, #20]
 8004e0e:	9406      	str	r4, [sp, #24]
 8004e10:	f04f 0c00 	mov.w	ip, #0
 8004e14:	4657      	mov	r7, sl
 8004e16:	9301      	str	r3, [sp, #4]
 8004e18:	e09c      	b.n	8004f54 <D48_GENERIC+0x17c>
 8004e1a:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8004e1e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8004e22:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8004e26:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8004e2a:	7800      	ldrb	r0, [r0, #0]
 8004e2c:	0424      	lsls	r4, r4, #16
 8004e2e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8004e32:	f818 4005 	ldrb.w	r4, [r8, r5]
 8004e36:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8004e3a:	44a8      	add	r8, r5
 8004e3c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8004e40:	eb0b 0500 	add.w	r5, fp, r0
 8004e44:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8004e48:	fa5f f885 	uxtb.w	r8, r5
 8004e4c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8004e50:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8004e54:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004e58:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8004e5c:	0e2d      	lsrs	r5, r5, #24
 8004e5e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8004e62:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8004e66:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8004e6a:	b2e6      	uxtb	r6, r4
 8004e6c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8004e70:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004e74:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8004e78:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004e7c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8004e80:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8004e84:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004e88:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8004e8c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e90:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004e94:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8004e98:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004e9c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004ea0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004ea4:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8004ea8:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8004eac:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8004eb0:	4c3e      	ldr	r4, [pc, #248]	; (8004fac <D48_GENERIC+0x1d4>)
 8004eb2:	9d00      	ldr	r5, [sp, #0]
 8004eb4:	fb2a 5404 	smlad	r4, sl, r4, r5
 8004eb8:	4d3d      	ldr	r5, [pc, #244]	; (8004fb0 <D48_GENERIC+0x1d8>)
 8004eba:	fb28 4405 	smlad	r4, r8, r5, r4
 8004ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ec2:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8004ec6:	4c3b      	ldr	r4, [pc, #236]	; (8004fb4 <D48_GENERIC+0x1dc>)
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	fb2a 3304 	smlad	r3, sl, r4, r3
 8004ece:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8004ed2:	fb28 3304 	smlad	r3, r8, r4, r3
 8004ed6:	4c38      	ldr	r4, [pc, #224]	; (8004fb8 <D48_GENERIC+0x1e0>)
 8004ed8:	fb2e 3304 	smlad	r3, lr, r4, r3
 8004edc:	2501      	movs	r5, #1
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	fb2a fa05 	smuad	sl, sl, r5
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <D48_GENERIC+0x1e4>)
 8004ee6:	fb28 a803 	smlad	r8, r8, r3, sl
 8004eea:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <D48_GENERIC+0x1e8>)
 8004eec:	fb2e 8303 	smlad	r3, lr, r3, r8
 8004ef0:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	9b02      	ldr	r3, [sp, #8]
 8004ef8:	eb04 0807 	add.w	r8, r4, r7
 8004efc:	eba8 0803 	sub.w	r8, r8, r3
 8004f00:	9b05      	ldr	r3, [sp, #20]
 8004f02:	4465      	add	r5, ip
 8004f04:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8004f08:	b163      	cbz	r3, 8004f24 <D48_GENERIC+0x14c>
 8004f0a:	6a17      	ldr	r7, [r2, #32]
 8004f0c:	9402      	str	r4, [sp, #8]
 8004f0e:	fba8 8907 	umull	r8, r9, r8, r7
 8004f12:	fb07 990b 	mla	r9, r7, fp, r9
 8004f16:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004f1a:	f149 0900 	adc.w	r9, r9, #0
 8004f1e:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8004f22:	463c      	mov	r4, r7
 8004f24:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	02e4      	lsls	r4, r4, #11
 8004f2c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004f30:	f04f 0900 	mov.w	r9, #0
 8004f34:	fb0c fc0e 	mul.w	ip, ip, lr
 8004f38:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004f3c:	9b04      	ldr	r3, [sp, #16]
 8004f3e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8004f42:	f304 040f 	ssat	r4, #16, r4
 8004f46:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8004f4a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004f4c:	fa1f fc85 	uxth.w	ip, r5
 8004f50:	4564      	cmp	r4, ip
 8004f52:	d919      	bls.n	8004f88 <D48_GENERIC+0x1b0>
 8004f54:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004f56:	fa5f fe84 	uxtb.w	lr, r4
 8004f5a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8004f5e:	f1ce 0500 	rsb	r5, lr, #0
 8004f62:	eb00 0b09 	add.w	fp, r0, r9
 8004f66:	eb0b 0a05 	add.w	sl, fp, r5
 8004f6a:	2c01      	cmp	r4, #1
 8004f6c:	eb0a 0809 	add.w	r8, sl, r9
 8004f70:	f47f af53 	bne.w	8004e1a <D48_GENERIC+0x42>
 8004f74:	9b06      	ldr	r3, [sp, #24]
 8004f76:	6805      	ldr	r5, [r0, #0]
 8004f78:	6844      	ldr	r4, [r0, #4]
 8004f7a:	3006      	adds	r0, #6
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f43f af63 	beq.w	8004e48 <D48_GENERIC+0x70>
 8004f82:	ba6d      	rev16	r5, r5
 8004f84:	ba64      	rev16	r4, r4
 8004f86:	e75f      	b.n	8004e48 <D48_GENERIC+0x70>
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	46ba      	mov	sl, r7
 8004f8c:	6093      	str	r3, [r2, #8]
 8004f8e:	9b00      	ldr	r3, [sp, #0]
 8004f90:	60d3      	str	r3, [r2, #12]
 8004f92:	9b02      	ldr	r3, [sp, #8]
 8004f94:	6153      	str	r3, [r2, #20]
 8004f96:	9b07      	ldr	r3, [sp, #28]
 8004f98:	61d6      	str	r6, [r2, #28]
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f8c2 a010 	str.w	sl, [r2, #16]
 8004fa0:	6193      	str	r3, [r2, #24]
 8004fa2:	b009      	add	sp, #36	; 0x24
 8004fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	2000022c 	.word	0x2000022c
 8004fac:	000f000a 	.word	0x000f000a
 8004fb0:	00060003 	.word	0x00060003
 8004fb4:	00150019 	.word	0x00150019
 8004fb8:	00190015 	.word	0x00190015
 8004fbc:	00030006 	.word	0x00030006
 8004fc0:	000a000f 	.word	0x000a000f

08004fc4 <D64_GENERIC>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	b089      	sub	sp, #36	; 0x24
 8004fca:	6913      	ldr	r3, [r2, #16]
 8004fcc:	6895      	ldr	r5, [r2, #8]
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	9501      	str	r5, [sp, #4]
 8004fd2:	6953      	ldr	r3, [r2, #20]
 8004fd4:	68d5      	ldr	r5, [r2, #12]
 8004fd6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	9500      	str	r5, [sp, #0]
 8004fdc:	6993      	ldr	r3, [r2, #24]
 8004fde:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004fe0:	9307      	str	r3, [sp, #28]
 8004fe2:	9505      	str	r5, [sp, #20]
 8004fe4:	69d3      	ldr	r3, [r2, #28]
 8004fe6:	9106      	str	r1, [sp, #24]
 8004fe8:	2c00      	cmp	r4, #0
 8004fea:	f000 80d9 	beq.w	80051a0 <D64_GENERIC+0x1dc>
 8004fee:	6a11      	ldr	r1, [r2, #32]
 8004ff0:	9102      	str	r1, [sp, #8]
 8004ff2:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80051e0 <D64_GENERIC+0x21c>
 8004ff6:	f04f 0c00 	mov.w	ip, #0
 8004ffa:	4681      	mov	r9, r0
 8004ffc:	e0c1      	b.n	8005182 <D64_GENERIC+0x1be>
 8004ffe:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005002:	4274      	negs	r4, r6
 8005004:	eb09 0708 	add.w	r7, r9, r8
 8005008:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800500c:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8005010:	5d38      	ldrb	r0, [r7, r4]
 8005012:	5d29      	ldrb	r1, [r5, r4]
 8005014:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005018:	f819 a008 	ldrb.w	sl, [r9, r8]
 800501c:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8005020:	f899 7000 	ldrb.w	r7, [r9]
 8005024:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8005028:	4425      	add	r5, r4
 800502a:	0409      	lsls	r1, r1, #16
 800502c:	0400      	lsls	r0, r0, #16
 800502e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005032:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8005036:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800503a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800503e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8005042:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005046:	4459      	add	r1, fp
 8005048:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800504c:	4438      	add	r0, r7
 800504e:	b2c5      	uxtb	r5, r0
 8005050:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005054:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8005058:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800505c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8005060:	0e00      	lsrs	r0, r0, #24
 8005062:	eb03 0806 	add.w	r8, r3, r6
 8005066:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800506a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800506e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005072:	b2c8      	uxtb	r0, r1
 8005074:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005078:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800507c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8005080:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005084:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005088:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800508c:	0e09      	lsrs	r1, r1, #24
 800508e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8005092:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8005096:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800509a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800509e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 80050a2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80050a6:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80050aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80050ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80050b2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80050b6:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80050ba:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80050be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80050c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80050c6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80050ca:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80050ce:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80050d2:	0a8b      	lsrs	r3, r1, #10
 80050d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80050d8:	4939      	ldr	r1, [pc, #228]	; (80051c0 <D64_GENERIC+0x1fc>)
 80050da:	9c00      	ldr	r4, [sp, #0]
 80050dc:	fb28 4101 	smlad	r1, r8, r1, r4
 80050e0:	4c38      	ldr	r4, [pc, #224]	; (80051c4 <D64_GENERIC+0x200>)
 80050e2:	fb27 1104 	smlad	r1, r7, r4, r1
 80050e6:	4c38      	ldr	r4, [pc, #224]	; (80051c8 <D64_GENERIC+0x204>)
 80050e8:	fb20 1104 	smlad	r1, r0, r4, r1
 80050ec:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80050f0:	fb2a 1106 	smlad	r1, sl, r6, r1
 80050f4:	4c35      	ldr	r4, [pc, #212]	; (80051cc <D64_GENERIC+0x208>)
 80050f6:	9d01      	ldr	r5, [sp, #4]
 80050f8:	fb28 5404 	smlad	r4, r8, r4, r5
 80050fc:	4d33      	ldr	r5, [pc, #204]	; (80051cc <D64_GENERIC+0x208>)
 80050fe:	fb2a 4415 	smladx	r4, sl, r5, r4
 8005102:	4d33      	ldr	r5, [pc, #204]	; (80051d0 <D64_GENERIC+0x20c>)
 8005104:	fb27 4405 	smlad	r4, r7, r5, r4
 8005108:	fb20 4415 	smladx	r4, r0, r5, r4
 800510c:	2501      	movs	r5, #1
 800510e:	9400      	str	r4, [sp, #0]
 8005110:	fb28 f805 	smuad	r8, r8, r5
 8005114:	4c2f      	ldr	r4, [pc, #188]	; (80051d4 <D64_GENERIC+0x210>)
 8005116:	fb27 8704 	smlad	r7, r7, r4, r8
 800511a:	4c2f      	ldr	r4, [pc, #188]	; (80051d8 <D64_GENERIC+0x214>)
 800511c:	fb20 7004 	smlad	r0, r0, r4, r7
 8005120:	4c2e      	ldr	r4, [pc, #184]	; (80051dc <D64_GENERIC+0x218>)
 8005122:	fb2a 0004 	smlad	r0, sl, r4, r0
 8005126:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800512a:	9902      	ldr	r1, [sp, #8]
 800512c:	9001      	str	r0, [sp, #4]
 800512e:	b189      	cbz	r1, 8005154 <D64_GENERIC+0x190>
 8005130:	9803      	ldr	r0, [sp, #12]
 8005132:	9c04      	ldr	r4, [sp, #16]
 8005134:	9604      	str	r6, [sp, #16]
 8005136:	4430      	add	r0, r6
 8005138:	1b00      	subs	r0, r0, r4
 800513a:	17c5      	asrs	r5, r0, #31
 800513c:	460f      	mov	r7, r1
 800513e:	fba0 0101 	umull	r0, r1, r0, r1
 8005142:	fb07 1105 	mla	r1, r7, r5, r1
 8005146:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800514a:	f141 0100 	adc.w	r1, r1, #0
 800514e:	0049      	lsls	r1, r1, #1
 8005150:	9103      	str	r1, [sp, #12]
 8005152:	460e      	mov	r6, r1
 8005154:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005156:	9905      	ldr	r1, [sp, #20]
 8005158:	9806      	ldr	r0, [sp, #24]
 800515a:	02b6      	lsls	r6, r6, #10
 800515c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005160:	f04f 0800 	mov.w	r8, #0
 8005164:	fb0c f404 	mul.w	r4, ip, r4
 8005168:	fbc1 7806 	smlal	r7, r8, r1, r6
 800516c:	4641      	mov	r1, r8
 800516e:	1089      	asrs	r1, r1, #2
 8005170:	f301 010f 	ssat	r1, #16, r1
 8005174:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005178:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800517a:	f10c 0c01 	add.w	ip, ip, #1
 800517e:	4561      	cmp	r1, ip
 8005180:	dd0e      	ble.n	80051a0 <D64_GENERIC+0x1dc>
 8005182:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8005184:	2e01      	cmp	r6, #1
 8005186:	f47f af3a 	bne.w	8004ffe <D64_GENERIC+0x3a>
 800518a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800518c:	06b4      	lsls	r4, r6, #26
 800518e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8005192:	f109 0908 	add.w	r9, r9, #8
 8005196:	f57f af5a 	bpl.w	800504e <D64_GENERIC+0x8a>
 800519a:	ba40      	rev16	r0, r0
 800519c:	ba49      	rev16	r1, r1
 800519e:	e756      	b.n	800504e <D64_GENERIC+0x8a>
 80051a0:	61d3      	str	r3, [r2, #28]
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	9901      	ldr	r1, [sp, #4]
 80051a6:	6113      	str	r3, [r2, #16]
 80051a8:	9b04      	ldr	r3, [sp, #16]
 80051aa:	6091      	str	r1, [r2, #8]
 80051ac:	6153      	str	r3, [r2, #20]
 80051ae:	9900      	ldr	r1, [sp, #0]
 80051b0:	9b07      	ldr	r3, [sp, #28]
 80051b2:	60d1      	str	r1, [r2, #12]
 80051b4:	2000      	movs	r0, #0
 80051b6:	6193      	str	r3, [r2, #24]
 80051b8:	b009      	add	sp, #36	; 0x24
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	bf00      	nop
 80051c0:	001c0015 	.word	0x001c0015
 80051c4:	000f000a 	.word	0x000f000a
 80051c8:	00060003 	.word	0x00060003
 80051cc:	0024002a 	.word	0x0024002a
 80051d0:	002e0030 	.word	0x002e0030
 80051d4:	00030006 	.word	0x00030006
 80051d8:	000a000f 	.word	0x000a000f
 80051dc:	0015001c 	.word	0x0015001c
 80051e0:	2000022c 	.word	0x2000022c

080051e4 <D80_GENERIC>:
 80051e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e8:	b08b      	sub	sp, #44	; 0x2c
 80051ea:	6914      	ldr	r4, [r2, #16]
 80051ec:	9404      	str	r4, [sp, #16]
 80051ee:	6954      	ldr	r4, [r2, #20]
 80051f0:	9405      	str	r4, [sp, #20]
 80051f2:	6994      	ldr	r4, [r2, #24]
 80051f4:	9409      	str	r4, [sp, #36]	; 0x24
 80051f6:	6894      	ldr	r4, [r2, #8]
 80051f8:	9402      	str	r4, [sp, #8]
 80051fa:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80051fc:	68d4      	ldr	r4, [r2, #12]
 80051fe:	9401      	str	r4, [sp, #4]
 8005200:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005202:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8005206:	9406      	str	r4, [sp, #24]
 8005208:	9107      	str	r1, [sp, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 810f 	beq.w	800542e <D80_GENERIC+0x24a>
 8005210:	6a13      	ldr	r3, [r2, #32]
 8005212:	9308      	str	r3, [sp, #32]
 8005214:	2300      	movs	r3, #0
 8005216:	9200      	str	r2, [sp, #0]
 8005218:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8005480 <D80_GENERIC+0x29c>
 800521c:	f8cd b00c 	str.w	fp, [sp, #12]
 8005220:	461a      	mov	r2, r3
 8005222:	e0ed      	b.n	8005400 <D80_GENERIC+0x21c>
 8005224:	fa5f fc8c 	uxtb.w	ip, ip
 8005228:	fa0f f48c 	sxth.w	r4, ip
 800522c:	0066      	lsls	r6, r4, #1
 800522e:	eb06 0804 	add.w	r8, r6, r4
 8005232:	f1cc 0500 	rsb	r5, ip, #0
 8005236:	eb00 0108 	add.w	r1, r0, r8
 800523a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800523e:	194b      	adds	r3, r1, r5
 8005240:	5d49      	ldrb	r1, [r1, r5]
 8005242:	f810 a008 	ldrb.w	sl, [r0, r8]
 8005246:	f813 b004 	ldrb.w	fp, [r3, r4]
 800524a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800524e:	f890 8000 	ldrb.w	r8, [r0]
 8005252:	eb03 0e04 	add.w	lr, r3, r4
 8005256:	eb0e 0705 	add.w	r7, lr, r5
 800525a:	0409      	lsls	r1, r1, #16
 800525c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8005260:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005264:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8005268:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800526c:	eb0a 0004 	add.w	r0, sl, r4
 8005270:	041b      	lsls	r3, r3, #16
 8005272:	f81a a004 	ldrb.w	sl, [sl, r4]
 8005276:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800527a:	5d44      	ldrb	r4, [r0, r5]
 800527c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8005280:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005284:	4428      	add	r0, r5
 8005286:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800528a:	4441      	add	r1, r8
 800528c:	4430      	add	r0, r6
 800528e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8005292:	441f      	add	r7, r3
 8005294:	b2cd      	uxtb	r5, r1
 8005296:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800529a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800529e:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80052a8:	0e09      	lsrs	r1, r1, #24
 80052aa:	4433      	add	r3, r6
 80052ac:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80052b0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80052b4:	b2fd      	uxtb	r5, r7
 80052b6:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 80052ba:	469b      	mov	fp, r3
 80052bc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80052c0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80052c4:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80052c8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80052cc:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80052d0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80052d4:	0e3b      	lsrs	r3, r7, #24
 80052d6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80052da:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80052de:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80052e2:	fa5f fe84 	uxtb.w	lr, r4
 80052e6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 80052ea:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80052ee:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80052f2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80052f6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80052fa:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80052fe:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8005302:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8005306:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800530a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800530e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005312:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005316:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800531a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800531e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8005322:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005326:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800532a:	0aa3      	lsrs	r3, r4, #10
 800532c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005330:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005334:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005338:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800533c:	9303      	str	r3, [sp, #12]
 800533e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8005342:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8005346:	4b42      	ldr	r3, [pc, #264]	; (8005450 <D80_GENERIC+0x26c>)
 8005348:	9901      	ldr	r1, [sp, #4]
 800534a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800534e:	4941      	ldr	r1, [pc, #260]	; (8005454 <D80_GENERIC+0x270>)
 8005350:	fb28 3301 	smlad	r3, r8, r1, r3
 8005354:	4940      	ldr	r1, [pc, #256]	; (8005458 <D80_GENERIC+0x274>)
 8005356:	fb2c 3301 	smlad	r3, ip, r1, r3
 800535a:	4940      	ldr	r1, [pc, #256]	; (800545c <D80_GENERIC+0x278>)
 800535c:	fb27 3301 	smlad	r3, r7, r1, r3
 8005360:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005364:	fb2e 3301 	smlad	r3, lr, r1, r3
 8005368:	493d      	ldr	r1, [pc, #244]	; (8005460 <D80_GENERIC+0x27c>)
 800536a:	9c02      	ldr	r4, [sp, #8]
 800536c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8005370:	493c      	ldr	r1, [pc, #240]	; (8005464 <D80_GENERIC+0x280>)
 8005372:	fb28 4401 	smlad	r4, r8, r1, r4
 8005376:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800537a:	fb2c 4101 	smlad	r1, ip, r1, r4
 800537e:	4c3a      	ldr	r4, [pc, #232]	; (8005468 <D80_GENERIC+0x284>)
 8005380:	fb27 1104 	smlad	r1, r7, r4, r1
 8005384:	4c39      	ldr	r4, [pc, #228]	; (800546c <D80_GENERIC+0x288>)
 8005386:	fb2e 1104 	smlad	r1, lr, r4, r1
 800538a:	9101      	str	r1, [sp, #4]
 800538c:	2101      	movs	r1, #1
 800538e:	fb2b fb01 	smuad	fp, fp, r1
 8005392:	4937      	ldr	r1, [pc, #220]	; (8005470 <D80_GENERIC+0x28c>)
 8005394:	fb28 b801 	smlad	r8, r8, r1, fp
 8005398:	4d36      	ldr	r5, [pc, #216]	; (8005474 <D80_GENERIC+0x290>)
 800539a:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800539e:	4d36      	ldr	r5, [pc, #216]	; (8005478 <D80_GENERIC+0x294>)
 80053a0:	fb27 c705 	smlad	r7, r7, r5, ip
 80053a4:	4d35      	ldr	r5, [pc, #212]	; (800547c <D80_GENERIC+0x298>)
 80053a6:	fb2e 7105 	smlad	r1, lr, r5, r7
 80053aa:	9102      	str	r1, [sp, #8]
 80053ac:	9908      	ldr	r1, [sp, #32]
 80053ae:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 80053b2:	b181      	cbz	r1, 80053d6 <D80_GENERIC+0x1f2>
 80053b4:	9c04      	ldr	r4, [sp, #16]
 80053b6:	9d05      	ldr	r5, [sp, #20]
 80053b8:	9305      	str	r3, [sp, #20]
 80053ba:	441c      	add	r4, r3
 80053bc:	1b64      	subs	r4, r4, r5
 80053be:	17e7      	asrs	r7, r4, #31
 80053c0:	fba4 4501 	umull	r4, r5, r4, r1
 80053c4:	fb01 5507 	mla	r5, r1, r7, r5
 80053c8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80053cc:	f145 0500 	adc.w	r5, r5, #0
 80053d0:	0069      	lsls	r1, r5, #1
 80053d2:	9104      	str	r1, [sp, #16]
 80053d4:	460b      	mov	r3, r1
 80053d6:	9e00      	ldr	r6, [sp, #0]
 80053d8:	9f06      	ldr	r7, [sp, #24]
 80053da:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80053dc:	025b      	lsls	r3, r3, #9
 80053de:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80053e2:	2500      	movs	r5, #0
 80053e4:	fb02 f101 	mul.w	r1, r2, r1
 80053e8:	fbc7 4503 	smlal	r4, r5, r7, r3
 80053ec:	9c07      	ldr	r4, [sp, #28]
 80053ee:	10ab      	asrs	r3, r5, #2
 80053f0:	f303 030f 	ssat	r3, #16, r3
 80053f4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80053f8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80053fa:	3201      	adds	r2, #1
 80053fc:	4293      	cmp	r3, r2
 80053fe:	dd13      	ble.n	8005428 <D80_GENERIC+0x244>
 8005400:	9b00      	ldr	r3, [sp, #0]
 8005402:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8005406:	f1bc 0f01 	cmp.w	ip, #1
 800540a:	f47f af0b 	bne.w	8005224 <D80_GENERIC+0x40>
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	6884      	ldr	r4, [r0, #8]
 8005412:	069b      	lsls	r3, r3, #26
 8005414:	e890 0082 	ldmia.w	r0, {r1, r7}
 8005418:	f100 000a 	add.w	r0, r0, #10
 800541c:	f57f af3a 	bpl.w	8005294 <D80_GENERIC+0xb0>
 8005420:	ba49      	rev16	r1, r1
 8005422:	ba7f      	rev16	r7, r7
 8005424:	ba64      	rev16	r4, r4
 8005426:	e735      	b.n	8005294 <D80_GENERIC+0xb0>
 8005428:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800542c:	4632      	mov	r2, r6
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	6093      	str	r3, [r2, #8]
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	60d3      	str	r3, [r2, #12]
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	6113      	str	r3, [r2, #16]
 800543a:	9b05      	ldr	r3, [sp, #20]
 800543c:	6153      	str	r3, [r2, #20]
 800543e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005440:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005444:	2000      	movs	r0, #0
 8005446:	6193      	str	r3, [r2, #24]
 8005448:	b00b      	add	sp, #44	; 0x2c
 800544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544e:	bf00      	nop
 8005450:	002d0024 	.word	0x002d0024
 8005454:	001c0015 	.word	0x001c0015
 8005458:	000f000a 	.word	0x000f000a
 800545c:	00060003 	.word	0x00060003
 8005460:	0037003f 	.word	0x0037003f
 8005464:	00450049 	.word	0x00450049
 8005468:	00490045 	.word	0x00490045
 800546c:	003f0037 	.word	0x003f0037
 8005470:	00030006 	.word	0x00030006
 8005474:	000a000f 	.word	0x000a000f
 8005478:	0015001c 	.word	0x0015001c
 800547c:	0024002d 	.word	0x0024002d
 8005480:	2000022c 	.word	0x2000022c

08005484 <D128_GENERIC>:
 8005484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005488:	b093      	sub	sp, #76	; 0x4c
 800548a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800548c:	9005      	str	r0, [sp, #20]
 800548e:	4610      	mov	r0, r2
 8005490:	9201      	str	r2, [sp, #4]
 8005492:	6912      	ldr	r2, [r2, #16]
 8005494:	920c      	str	r2, [sp, #48]	; 0x30
 8005496:	4602      	mov	r2, r0
 8005498:	6940      	ldr	r0, [r0, #20]
 800549a:	900d      	str	r0, [sp, #52]	; 0x34
 800549c:	4610      	mov	r0, r2
 800549e:	4614      	mov	r4, r2
 80054a0:	6992      	ldr	r2, [r2, #24]
 80054a2:	9211      	str	r2, [sp, #68]	; 0x44
 80054a4:	69c2      	ldr	r2, [r0, #28]
 80054a6:	9202      	str	r2, [sp, #8]
 80054a8:	68e2      	ldr	r2, [r4, #12]
 80054aa:	6880      	ldr	r0, [r0, #8]
 80054ac:	9203      	str	r2, [sp, #12]
 80054ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80054b0:	9004      	str	r0, [sp, #16]
 80054b2:	920e      	str	r2, [sp, #56]	; 0x38
 80054b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 819b 	beq.w	80057f2 <D128_GENERIC+0x36e>
 80054bc:	6a23      	ldr	r3, [r4, #32]
 80054be:	9310      	str	r3, [sp, #64]	; 0x40
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800586c <D128_GENERIC+0x3e8>
 80054c6:	9306      	str	r3, [sp, #24]
 80054c8:	e17a      	b.n	80057c0 <D128_GENERIC+0x33c>
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	9d05      	ldr	r5, [sp, #20]
 80054ce:	b214      	sxth	r4, r2
 80054d0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80054d4:	4250      	negs	r0, r2
 80054d6:	eb05 010a 	add.w	r1, r5, sl
 80054da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054de:	eb01 0800 	add.w	r8, r1, r0
 80054e2:	eb0b 0c04 	add.w	ip, fp, r4
 80054e6:	eb08 070c 	add.w	r7, r8, ip
 80054ea:	183b      	adds	r3, r7, r0
 80054ec:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80054f0:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80054f4:	eb0e 0604 	add.w	r6, lr, r4
 80054f8:	9307      	str	r3, [sp, #28]
 80054fa:	1833      	adds	r3, r6, r0
 80054fc:	9305      	str	r3, [sp, #20]
 80054fe:	462b      	mov	r3, r5
 8005500:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8005504:	f8cd a020 	str.w	sl, [sp, #32]
 8005508:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800550c:	f813 c002 	ldrb.w	ip, [r3, r2]
 8005510:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8005514:	5c3a      	ldrb	r2, [r7, r0]
 8005516:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800551a:	781f      	ldrb	r7, [r3, #0]
 800551c:	9b07      	ldr	r3, [sp, #28]
 800551e:	9d05      	ldr	r5, [sp, #20]
 8005520:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8005524:	5c09      	ldrb	r1, [r1, r0]
 8005526:	9709      	str	r7, [sp, #36]	; 0x24
 8005528:	9307      	str	r3, [sp, #28]
 800552a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800552e:	5c33      	ldrb	r3, [r6, r0]
 8005530:	0412      	lsls	r2, r2, #16
 8005532:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005536:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800553a:	9d08      	ldr	r5, [sp, #32]
 800553c:	eb06 0a04 	add.w	sl, r6, r4
 8005540:	0409      	lsls	r1, r1, #16
 8005542:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8005546:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800554a:	5d36      	ldrb	r6, [r6, r4]
 800554c:	9c05      	ldr	r4, [sp, #20]
 800554e:	042d      	lsls	r5, r5, #16
 8005550:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8005554:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005558:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800555c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8005560:	eb0a 0c00 	add.w	ip, sl, r0
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800556a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800556e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8005572:	9d07      	ldr	r5, [sp, #28]
 8005574:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005578:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800557c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800557e:	4458      	add	r0, fp
 8005580:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8005584:	9005      	str	r0, [sp, #20]
 8005586:	4439      	add	r1, r7
 8005588:	442a      	add	r2, r5
 800558a:	44b2      	add	sl, r6
 800558c:	1918      	adds	r0, r3, r4
 800558e:	b2cb      	uxtb	r3, r1
 8005590:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005594:	9e02      	ldr	r6, [sp, #8]
 8005596:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800559a:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800559e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80055a2:	441e      	add	r6, r3
 80055a4:	0e09      	lsrs	r1, r1, #24
 80055a6:	4633      	mov	r3, r6
 80055a8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80055ac:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80055b0:	b2d4      	uxtb	r4, r2
 80055b2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80055b6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80055ba:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80055be:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80055c2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80055c6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80055ca:	0e12      	lsrs	r2, r2, #24
 80055cc:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80055d0:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80055d4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80055d8:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80055dc:	9702      	str	r7, [sp, #8]
 80055de:	b2c2      	uxtb	r2, r0
 80055e0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80055e4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80055e8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80055ec:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80055f0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80055f4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80055f8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80055fc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8005600:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005604:	0e00      	lsrs	r0, r0, #24
 8005606:	fa5f f68a 	uxtb.w	r6, sl
 800560a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560e:	9309      	str	r3, [sp, #36]	; 0x24
 8005610:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005614:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005618:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800561c:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005620:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005624:	950a      	str	r5, [sp, #40]	; 0x28
 8005626:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800562a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800562e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005632:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005636:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800563a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800563e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005640:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005646:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800564a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800564e:	9307      	str	r3, [sp, #28]
 8005650:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005654:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005658:	9b02      	ldr	r3, [sp, #8]
 800565a:	f8cd c008 	str.w	ip, [sp, #8]
 800565e:	4694      	mov	ip, r2
 8005660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005662:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005666:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800566a:	9a02      	ldr	r2, [sp, #8]
 800566c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005670:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005674:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800567a:	f8cd a020 	str.w	sl, [sp, #32]
 800567e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005682:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005686:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800568a:	9b07      	ldr	r3, [sp, #28]
 800568c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005690:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8005694:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8005698:	9a08      	ldr	r2, [sp, #32]
 800569a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800569e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80056a6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80056aa:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80056ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80056b2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80056b6:	0a96      	lsrs	r6, r2, #10
 80056b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056bc:	9602      	str	r6, [sp, #8]
 80056be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80056c2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80056c6:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80056ca:	4e53      	ldr	r6, [pc, #332]	; (8005818 <D128_GENERIC+0x394>)
 80056cc:	9f03      	ldr	r7, [sp, #12]
 80056ce:	fb2c 7606 	smlad	r6, ip, r6, r7
 80056d2:	4f52      	ldr	r7, [pc, #328]	; (800581c <D128_GENERIC+0x398>)
 80056d4:	fb2a 6607 	smlad	r6, sl, r7, r6
 80056d8:	4f51      	ldr	r7, [pc, #324]	; (8005820 <D128_GENERIC+0x39c>)
 80056da:	fb21 6607 	smlad	r6, r1, r7, r6
 80056de:	4f51      	ldr	r7, [pc, #324]	; (8005824 <D128_GENERIC+0x3a0>)
 80056e0:	fb24 6607 	smlad	r6, r4, r7, r6
 80056e4:	4f50      	ldr	r7, [pc, #320]	; (8005828 <D128_GENERIC+0x3a4>)
 80056e6:	fb28 6607 	smlad	r6, r8, r7, r6
 80056ea:	4f50      	ldr	r7, [pc, #320]	; (800582c <D128_GENERIC+0x3a8>)
 80056ec:	fb20 6607 	smlad	r6, r0, r7, r6
 80056f0:	4f4f      	ldr	r7, [pc, #316]	; (8005830 <D128_GENERIC+0x3ac>)
 80056f2:	fb23 6607 	smlad	r6, r3, r7, r6
 80056f6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80056fa:	fb25 6607 	smlad	r6, r5, r7, r6
 80056fe:	4f4d      	ldr	r7, [pc, #308]	; (8005834 <D128_GENERIC+0x3b0>)
 8005700:	9a04      	ldr	r2, [sp, #16]
 8005702:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8005706:	4a4c      	ldr	r2, [pc, #304]	; (8005838 <D128_GENERIC+0x3b4>)
 8005708:	fb2a ee02 	smlad	lr, sl, r2, lr
 800570c:	4f4b      	ldr	r7, [pc, #300]	; (800583c <D128_GENERIC+0x3b8>)
 800570e:	fb21 ee07 	smlad	lr, r1, r7, lr
 8005712:	4f4b      	ldr	r7, [pc, #300]	; (8005840 <D128_GENERIC+0x3bc>)
 8005714:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005718:	4f4a      	ldr	r7, [pc, #296]	; (8005844 <D128_GENERIC+0x3c0>)
 800571a:	fb28 ee07 	smlad	lr, r8, r7, lr
 800571e:	4f4a      	ldr	r7, [pc, #296]	; (8005848 <D128_GENERIC+0x3c4>)
 8005720:	fb20 ee07 	smlad	lr, r0, r7, lr
 8005724:	4f49      	ldr	r7, [pc, #292]	; (800584c <D128_GENERIC+0x3c8>)
 8005726:	fb23 e707 	smlad	r7, r3, r7, lr
 800572a:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005870 <D128_GENERIC+0x3ec>
 800572e:	fb25 720e 	smlad	r2, r5, lr, r7
 8005732:	f04f 0b01 	mov.w	fp, #1
 8005736:	9203      	str	r2, [sp, #12]
 8005738:	fb2c fb0b 	smuad	fp, ip, fp
 800573c:	4f44      	ldr	r7, [pc, #272]	; (8005850 <D128_GENERIC+0x3cc>)
 800573e:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005742:	4f44      	ldr	r7, [pc, #272]	; (8005854 <D128_GENERIC+0x3d0>)
 8005744:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005748:	4f43      	ldr	r7, [pc, #268]	; (8005858 <D128_GENERIC+0x3d4>)
 800574a:	fb24 aa07 	smlad	sl, r4, r7, sl
 800574e:	4f43      	ldr	r7, [pc, #268]	; (800585c <D128_GENERIC+0x3d8>)
 8005750:	fb28 a707 	smlad	r7, r8, r7, sl
 8005754:	4a42      	ldr	r2, [pc, #264]	; (8005860 <D128_GENERIC+0x3dc>)
 8005756:	fb20 7702 	smlad	r7, r0, r2, r7
 800575a:	4a42      	ldr	r2, [pc, #264]	; (8005864 <D128_GENERIC+0x3e0>)
 800575c:	fb23 7702 	smlad	r7, r3, r2, r7
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <D128_GENERIC+0x3e4>)
 8005762:	fb25 7303 	smlad	r3, r5, r3, r7
 8005766:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800576e:	b185      	cbz	r5, 8005792 <D128_GENERIC+0x30e>
 8005770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005772:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005774:	960d      	str	r6, [sp, #52]	; 0x34
 8005776:	4432      	add	r2, r6
 8005778:	1a52      	subs	r2, r2, r1
 800577a:	17d1      	asrs	r1, r2, #31
 800577c:	fba2 2305 	umull	r2, r3, r2, r5
 8005780:	fb05 3301 	mla	r3, r5, r1, r3
 8005784:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005788:	f143 0300 	adc.w	r3, r3, #0
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	930c      	str	r3, [sp, #48]	; 0x30
 8005790:	461e      	mov	r6, r3
 8005792:	9801      	ldr	r0, [sp, #4]
 8005794:	9c06      	ldr	r4, [sp, #24]
 8005796:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005798:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800579a:	01f6      	lsls	r6, r6, #7
 800579c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057a0:	2300      	movs	r3, #0
 80057a2:	fbc5 2306 	smlal	r2, r3, r5, r6
 80057a6:	fb04 f101 	mul.w	r1, r4, r1
 80057aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057ac:	109b      	asrs	r3, r3, #2
 80057ae:	f303 030f 	ssat	r3, #16, r3
 80057b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80057b6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80057b8:	1c62      	adds	r2, r4, #1
 80057ba:	4293      	cmp	r3, r2
 80057bc:	9206      	str	r2, [sp, #24]
 80057be:	dd18      	ble.n	80057f2 <D128_GENERIC+0x36e>
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80057c4:	2a01      	cmp	r2, #1
 80057c6:	f47f ae80 	bne.w	80054ca <D128_GENERIC+0x46>
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	9d05      	ldr	r5, [sp, #20]
 80057ce:	069b      	lsls	r3, r3, #26
 80057d0:	6829      	ldr	r1, [r5, #0]
 80057d2:	686a      	ldr	r2, [r5, #4]
 80057d4:	68a8      	ldr	r0, [r5, #8]
 80057d6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80057da:	f105 0410 	add.w	r4, r5, #16
 80057de:	d506      	bpl.n	80057ee <D128_GENERIC+0x36a>
 80057e0:	ba49      	rev16	r1, r1
 80057e2:	ba52      	rev16	r2, r2
 80057e4:	ba40      	rev16	r0, r0
 80057e6:	fa9a fa9a 	rev16.w	sl, sl
 80057ea:	9405      	str	r4, [sp, #20]
 80057ec:	e6cf      	b.n	800558e <D128_GENERIC+0x10a>
 80057ee:	9405      	str	r4, [sp, #20]
 80057f0:	e6cd      	b.n	800558e <D128_GENERIC+0x10a>
 80057f2:	9a01      	ldr	r2, [sp, #4]
 80057f4:	9904      	ldr	r1, [sp, #16]
 80057f6:	6091      	str	r1, [r2, #8]
 80057f8:	9903      	ldr	r1, [sp, #12]
 80057fa:	60d1      	str	r1, [r2, #12]
 80057fc:	9b02      	ldr	r3, [sp, #8]
 80057fe:	61d3      	str	r3, [r2, #28]
 8005800:	4611      	mov	r1, r2
 8005802:	4613      	mov	r3, r2
 8005804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005806:	610a      	str	r2, [r1, #16]
 8005808:	990d      	ldr	r1, [sp, #52]	; 0x34
 800580a:	6159      	str	r1, [r3, #20]
 800580c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800580e:	6199      	str	r1, [r3, #24]
 8005810:	2000      	movs	r0, #0
 8005812:	b013      	add	sp, #76	; 0x4c
 8005814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005818:	00780069 	.word	0x00780069
 800581c:	005b004e 	.word	0x005b004e
 8005820:	00420037 	.word	0x00420037
 8005824:	002d0024 	.word	0x002d0024
 8005828:	001c0015 	.word	0x001c0015
 800582c:	000f000a 	.word	0x000f000a
 8005830:	00060003 	.word	0x00060003
 8005834:	00880096 	.word	0x00880096
 8005838:	00a200ac 	.word	0x00a200ac
 800583c:	00b400ba 	.word	0x00b400ba
 8005840:	00be00c0 	.word	0x00be00c0
 8005844:	00c000be 	.word	0x00c000be
 8005848:	00ba00b4 	.word	0x00ba00b4
 800584c:	00ac00a2 	.word	0x00ac00a2
 8005850:	00030006 	.word	0x00030006
 8005854:	000a000f 	.word	0x000a000f
 8005858:	0015001c 	.word	0x0015001c
 800585c:	0024002d 	.word	0x0024002d
 8005860:	00370042 	.word	0x00370042
 8005864:	004e005b 	.word	0x004e005b
 8005868:	00690078 	.word	0x00690078
 800586c:	2000022c 	.word	0x2000022c
 8005870:	00960088 	.word	0x00960088

08005874 <D16_1CH_HTONS_VOL_HP>:
 8005874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	4691      	mov	r9, r2
 800587a:	b083      	sub	sp, #12
 800587c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800587e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005882:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4680      	mov	r8, r0
 800588a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800588e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8005892:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005896:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800589a:	9401      	str	r4, [sp, #4]
 800589c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80058a0:	f8d9 e020 	ldr.w	lr, [r9, #32]
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	d04e      	beq.n	8005946 <D16_1CH_HTONS_VOL_HP+0xd2>
 80058a8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005954 <D16_1CH_HTONS_VOL_HP+0xe0>
 80058ac:	1e8c      	subs	r4, r1, #2
 80058ae:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80058b2:	f858 2b02 	ldr.w	r2, [r8], #2
 80058b6:	ba52      	rev16	r2, r2
 80058b8:	b2d6      	uxtb	r6, r2
 80058ba:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80058be:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80058c2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80058c6:	4413      	add	r3, r2
 80058c8:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80058cc:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80058d8:	0a93      	lsrs	r3, r2, #10
 80058da:	4a1c      	ldr	r2, [pc, #112]	; (800594c <D16_1CH_HTONS_VOL_HP+0xd8>)
 80058dc:	fb21 5202 	smlad	r2, r1, r2, r5
 80058e0:	4d1b      	ldr	r5, [pc, #108]	; (8005950 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80058e2:	fb21 f505 	smuad	r5, r1, r5
 80058e6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80058ea:	4410      	add	r0, r2
 80058ec:	1bc0      	subs	r0, r0, r7
 80058ee:	17c7      	asrs	r7, r0, #31
 80058f0:	fba0 010e 	umull	r0, r1, r0, lr
 80058f4:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80058f8:	fb0e 1107 	mla	r1, lr, r7, r1
 80058fc:	f141 0100 	adc.w	r1, r1, #0
 8005900:	0448      	lsls	r0, r1, #17
 8005902:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005906:	2700      	movs	r7, #0
 8005908:	fbc0 670a 	smlal	r6, r7, r0, sl
 800590c:	45d8      	cmp	r8, fp
 800590e:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005912:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8005916:	4617      	mov	r7, r2
 8005918:	f301 010f 	ssat	r1, #16, r1
 800591c:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005920:	d1c7      	bne.n	80058b2 <D16_1CH_HTONS_VOL_HP+0x3e>
 8005922:	9901      	ldr	r1, [sp, #4]
 8005924:	f8c9 301c 	str.w	r3, [r9, #28]
 8005928:	9b00      	ldr	r3, [sp, #0]
 800592a:	f8c9 0010 	str.w	r0, [r9, #16]
 800592e:	2000      	movs	r0, #0
 8005930:	f8c9 5008 	str.w	r5, [r9, #8]
 8005934:	f8c9 100c 	str.w	r1, [r9, #12]
 8005938:	f8c9 2014 	str.w	r2, [r9, #20]
 800593c:	f8c9 3018 	str.w	r3, [r9, #24]
 8005940:	b003      	add	sp, #12
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	463a      	mov	r2, r7
 8005948:	4621      	mov	r1, r4
 800594a:	e7eb      	b.n	8005924 <D16_1CH_HTONS_VOL_HP+0xb0>
 800594c:	00030001 	.word	0x00030001
 8005950:	00010003 	.word	0x00010003
 8005954:	2000022c 	.word	0x2000022c

08005958 <D24_1CH_HTONS_VOL_HP>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b089      	sub	sp, #36	; 0x24
 800595e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005960:	6996      	ldr	r6, [r2, #24]
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005966:	9207      	str	r2, [sp, #28]
 8005968:	6915      	ldr	r5, [r2, #16]
 800596a:	6954      	ldr	r4, [r2, #20]
 800596c:	9606      	str	r6, [sp, #24]
 800596e:	6893      	ldr	r3, [r2, #8]
 8005970:	69d6      	ldr	r6, [r2, #28]
 8005972:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8005976:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800597a:	9a04      	ldr	r2, [sp, #16]
 800597c:	9705      	str	r7, [sp, #20]
 800597e:	2a00      	cmp	r2, #0
 8005980:	d07e      	beq.n	8005a80 <D24_1CH_HTONS_VOL_HP+0x128>
 8005982:	f1a1 0b02 	sub.w	fp, r1, #2
 8005986:	2700      	movs	r7, #0
 8005988:	46a8      	mov	r8, r5
 800598a:	f8cd b004 	str.w	fp, [sp, #4]
 800598e:	4655      	mov	r5, sl
 8005990:	46e3      	mov	fp, ip
 8005992:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8005a8c <D24_1CH_HTONS_VOL_HP+0x134>
 8005996:	46ba      	mov	sl, r7
 8005998:	469c      	mov	ip, r3
 800599a:	e055      	b.n	8005a48 <D24_1CH_HTONS_VOL_HP+0xf0>
 800599c:	7802      	ldrb	r2, [r0, #0]
 800599e:	78c3      	ldrb	r3, [r0, #3]
 80059a0:	7841      	ldrb	r1, [r0, #1]
 80059a2:	0212      	lsls	r2, r2, #8
 80059a4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80059a8:	440b      	add	r3, r1
 80059aa:	3002      	adds	r0, #2
 80059ac:	b2d9      	uxtb	r1, r3
 80059ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80059b2:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80059b6:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80059ba:	0c1b      	lsrs	r3, r3, #16
 80059bc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80059c0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80059c4:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80059c8:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80059cc:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80059d0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80059d4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80059d8:	4a2a      	ldr	r2, [pc, #168]	; (8005a84 <D24_1CH_HTONS_VOL_HP+0x12c>)
 80059da:	fb23 b102 	smlad	r1, r3, r2, fp
 80059de:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <D24_1CH_HTONS_VOL_HP+0x130>)
 80059e0:	fb23 cb02 	smlad	fp, r3, r2, ip
 80059e4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80059e8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80059ec:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80059f0:	2201      	movs	r2, #1
 80059f2:	fb23 f702 	smuad	r7, r3, r2
 80059f6:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80059fa:	eb01 0208 	add.w	r2, r1, r8
 80059fe:	1b12      	subs	r2, r2, r4
 8005a00:	17d4      	asrs	r4, r2, #31
 8005a02:	fba2 2305 	umull	r2, r3, r2, r5
 8005a06:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005a0a:	fb05 3304 	mla	r3, r5, r4, r3
 8005a0e:	f143 0300 	adc.w	r3, r3, #0
 8005a12:	9c05      	ldr	r4, [sp, #20]
 8005a14:	03da      	lsls	r2, r3, #15
 8005a16:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005a1a:	f04f 0900 	mov.w	r9, #0
 8005a1e:	fbc4 8902 	smlal	r8, r9, r4, r2
 8005a22:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005a26:	9a01      	ldr	r2, [sp, #4]
 8005a28:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	109b      	asrs	r3, r3, #2
 8005a30:	f303 030f 	ssat	r3, #16, r3
 8005a34:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005a38:	9b04      	ldr	r3, [sp, #16]
 8005a3a:	9201      	str	r2, [sp, #4]
 8005a3c:	f10a 0a01 	add.w	sl, sl, #1
 8005a40:	459a      	cmp	sl, r3
 8005a42:	44bc      	add	ip, r7
 8005a44:	460c      	mov	r4, r1
 8005a46:	d00b      	beq.n	8005a60 <D24_1CH_HTONS_VOL_HP+0x108>
 8005a48:	f01a 0f01 	tst.w	sl, #1
 8005a4c:	d0a6      	beq.n	800599c <D24_1CH_HTONS_VOL_HP+0x44>
 8005a4e:	78c2      	ldrb	r2, [r0, #3]
 8005a50:	7883      	ldrb	r3, [r0, #2]
 8005a52:	f810 1b04 	ldrb.w	r1, [r0], #4
 8005a56:	0212      	lsls	r2, r2, #8
 8005a58:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005a5c:	440b      	add	r3, r1
 8005a5e:	e7a5      	b.n	80059ac <D24_1CH_HTONS_VOL_HP+0x54>
 8005a60:	4663      	mov	r3, ip
 8005a62:	4645      	mov	r5, r8
 8005a64:	46dc      	mov	ip, fp
 8005a66:	9807      	ldr	r0, [sp, #28]
 8005a68:	6141      	str	r1, [r0, #20]
 8005a6a:	9906      	ldr	r1, [sp, #24]
 8005a6c:	6083      	str	r3, [r0, #8]
 8005a6e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8005a72:	61c6      	str	r6, [r0, #28]
 8005a74:	6105      	str	r5, [r0, #16]
 8005a76:	6181      	str	r1, [r0, #24]
 8005a78:	2000      	movs	r0, #0
 8005a7a:	b009      	add	sp, #36	; 0x24
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a80:	4621      	mov	r1, r4
 8005a82:	e7f0      	b.n	8005a66 <D24_1CH_HTONS_VOL_HP+0x10e>
 8005a84:	00030001 	.word	0x00030001
 8005a88:	00060007 	.word	0x00060007
 8005a8c:	2000022c 	.word	0x2000022c

08005a90 <D32_1CH_HTONS_VOL_HP>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	4692      	mov	sl, r2
 8005a96:	b087      	sub	sp, #28
 8005a98:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005a9a:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005a9e:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8005aa2:	9304      	str	r3, [sp, #16]
 8005aa4:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005aa8:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005aac:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005ab0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005ab4:	f8da e00c 	ldr.w	lr, [sl, #12]
 8005ab8:	9501      	str	r5, [sp, #4]
 8005aba:	f8da c020 	ldr.w	ip, [sl, #32]
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	d07b      	beq.n	8005bba <D32_1CH_HTONS_VOL_HP+0x12a>
 8005ac2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005ac6:	4f3e      	ldr	r7, [pc, #248]	; (8005bc0 <D32_1CH_HTONS_VOL_HP+0x130>)
 8005ac8:	f8cd c00c 	str.w	ip, [sp, #12]
 8005acc:	9202      	str	r2, [sp, #8]
 8005ace:	460d      	mov	r5, r1
 8005ad0:	46a1      	mov	r9, r4
 8005ad2:	4684      	mov	ip, r0
 8005ad4:	f8cd a014 	str.w	sl, [sp, #20]
 8005ad8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005adc:	ba49      	rev16	r1, r1
 8005ade:	b2c8      	uxtb	r0, r1
 8005ae0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005ae4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005ae8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005aec:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005af0:	0e09      	lsrs	r1, r1, #24
 8005af2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005af6:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005afa:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005afe:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8005b02:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8005b06:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005b0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b0e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8005b12:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005b16:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005b1a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005b1e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005b22:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <D32_1CH_HTONS_VOL_HP+0x134>)
 8005b24:	fb20 e202 	smlad	r2, r0, r2, lr
 8005b28:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005b2c:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005b30:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <D32_1CH_HTONS_VOL_HP+0x138>)
 8005b32:	fb20 3302 	smlad	r3, r0, r2, r3
 8005b36:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005b38:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	fb20 f003 	smuad	r0, r0, r3
 8005b42:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <D32_1CH_HTONS_VOL_HP+0x140>)
 8005b44:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005b48:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005b4c:	9c03      	ldr	r4, [sp, #12]
 8005b4e:	eb02 0009 	add.w	r0, r2, r9
 8005b52:	eba0 0008 	sub.w	r0, r0, r8
 8005b56:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005b5a:	fba0 0104 	umull	r0, r1, r0, r4
 8005b5e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005b62:	fb04 110b 	mla	r1, r4, fp, r1
 8005b66:	f141 0100 	adc.w	r1, r1, #0
 8005b6a:	9c01      	ldr	r4, [sp, #4]
 8005b6c:	0388      	lsls	r0, r1, #14
 8005b6e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005b72:	f04f 0900 	mov.w	r9, #0
 8005b76:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005b7a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8005b7e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8005b82:	f300 000f 	ssat	r0, #16, r0
 8005b86:	9902      	ldr	r1, [sp, #8]
 8005b88:	f825 0b02 	strh.w	r0, [r5], #2
 8005b8c:	428d      	cmp	r5, r1
 8005b8e:	4690      	mov	r8, r2
 8005b90:	d1a2      	bne.n	8005ad8 <D32_1CH_HTONS_VOL_HP+0x48>
 8005b92:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005b96:	464c      	mov	r4, r9
 8005b98:	f8ca 3008 	str.w	r3, [sl, #8]
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	f8ca e00c 	str.w	lr, [sl, #12]
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f8ca 601c 	str.w	r6, [sl, #28]
 8005ba8:	f8ca 4010 	str.w	r4, [sl, #16]
 8005bac:	f8ca 2014 	str.w	r2, [sl, #20]
 8005bb0:	f8ca 3018 	str.w	r3, [sl, #24]
 8005bb4:	b007      	add	sp, #28
 8005bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bba:	4642      	mov	r2, r8
 8005bbc:	e7ec      	b.n	8005b98 <D32_1CH_HTONS_VOL_HP+0x108>
 8005bbe:	bf00      	nop
 8005bc0:	2000022c 	.word	0x2000022c
 8005bc4:	00060003 	.word	0x00060003
 8005bc8:	000a000c 	.word	0x000a000c
 8005bcc:	000c000a 	.word	0x000c000a
 8005bd0:	00030006 	.word	0x00030006

08005bd4 <D48_1CH_HTONS_VOL_HP>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	4613      	mov	r3, r2
 8005bda:	461c      	mov	r4, r3
 8005bdc:	b087      	sub	sp, #28
 8005bde:	4625      	mov	r5, r4
 8005be0:	4626      	mov	r6, r4
 8005be2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8005be4:	9205      	str	r2, [sp, #20]
 8005be6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005be8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005bec:	9501      	str	r5, [sp, #4]
 8005bee:	4680      	mov	r8, r0
 8005bf0:	6a35      	ldr	r5, [r6, #32]
 8005bf2:	6918      	ldr	r0, [r3, #16]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	9304      	str	r3, [sp, #16]
 8005bf8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8005bfc:	68a3      	ldr	r3, [r4, #8]
 8005bfe:	9502      	str	r5, [sp, #8]
 8005c00:	68e4      	ldr	r4, [r4, #12]
 8005c02:	2a00      	cmp	r2, #0
 8005c04:	f000 808c 	beq.w	8005d20 <D48_1CH_HTONS_VOL_HP+0x14c>
 8005c08:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005c0c:	4d45      	ldr	r5, [pc, #276]	; (8005d24 <D48_1CH_HTONS_VOL_HP+0x150>)
 8005c0e:	9203      	str	r2, [sp, #12]
 8005c10:	468c      	mov	ip, r1
 8005c12:	e898 0044 	ldmia.w	r8, {r2, r6}
 8005c16:	f108 0806 	add.w	r8, r8, #6
 8005c1a:	ba52      	rev16	r2, r2
 8005c1c:	ba76      	rev16	r6, r6
 8005c1e:	b2d7      	uxtb	r7, r2
 8005c20:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005c24:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8005c28:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005c2c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005c30:	0e12      	lsrs	r2, r2, #24
 8005c32:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8005c36:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8005c3a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005c3e:	fa5f fb86 	uxtb.w	fp, r6
 8005c42:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005c46:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8005c4a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8005c4e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8005c52:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8005c56:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005c5a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005c5e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8005c62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005c66:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005c6a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8005c6e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005c72:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005c76:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005c7a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005c7e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005c82:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8005c86:	4a28      	ldr	r2, [pc, #160]	; (8005d28 <D48_1CH_HTONS_VOL_HP+0x154>)
 8005c88:	fb2a 4202 	smlad	r2, sl, r2, r4
 8005c8c:	4927      	ldr	r1, [pc, #156]	; (8005d2c <D48_1CH_HTONS_VOL_HP+0x158>)
 8005c8e:	fb27 2201 	smlad	r2, r7, r1, r2
 8005c92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005c96:	fb26 2201 	smlad	r2, r6, r1, r2
 8005c9a:	4925      	ldr	r1, [pc, #148]	; (8005d30 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005c9c:	fb2a 3401 	smlad	r4, sl, r1, r3
 8005ca0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8005ca4:	fb27 4403 	smlad	r4, r7, r3, r4
 8005ca8:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <D48_1CH_HTONS_VOL_HP+0x160>)
 8005caa:	fb26 4403 	smlad	r4, r6, r3, r4
 8005cae:	2101      	movs	r1, #1
 8005cb0:	fb2a fa01 	smuad	sl, sl, r1
 8005cb4:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <D48_1CH_HTONS_VOL_HP+0x164>)
 8005cb6:	fb27 a703 	smlad	r7, r7, r3, sl
 8005cba:	4b20      	ldr	r3, [pc, #128]	; (8005d3c <D48_1CH_HTONS_VOL_HP+0x168>)
 8005cbc:	fb26 7303 	smlad	r3, r6, r3, r7
 8005cc0:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8005cc4:	9e02      	ldr	r6, [sp, #8]
 8005cc6:	9f01      	ldr	r7, [sp, #4]
 8005cc8:	4410      	add	r0, r2
 8005cca:	eba0 0009 	sub.w	r0, r0, r9
 8005cce:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8005cd2:	fba0 0106 	umull	r0, r1, r0, r6
 8005cd6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005cda:	fb06 110a 	mla	r1, r6, sl, r1
 8005cde:	f141 0100 	adc.w	r1, r1, #0
 8005ce2:	0308      	lsls	r0, r1, #12
 8005ce4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8005ce8:	f04f 0a00 	mov.w	sl, #0
 8005cec:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8005cf0:	4657      	mov	r7, sl
 8005cf2:	10b8      	asrs	r0, r7, #2
 8005cf4:	f300 000f 	ssat	r0, #16, r0
 8005cf8:	f82c 0b02 	strh.w	r0, [ip], #2
 8005cfc:	0048      	lsls	r0, r1, #1
 8005cfe:	9903      	ldr	r1, [sp, #12]
 8005d00:	458c      	cmp	ip, r1
 8005d02:	4691      	mov	r9, r2
 8005d04:	d185      	bne.n	8005c12 <D48_1CH_HTONS_VOL_HP+0x3e>
 8005d06:	9d05      	ldr	r5, [sp, #20]
 8005d08:	616a      	str	r2, [r5, #20]
 8005d0a:	9a04      	ldr	r2, [sp, #16]
 8005d0c:	6128      	str	r0, [r5, #16]
 8005d0e:	2000      	movs	r0, #0
 8005d10:	60ab      	str	r3, [r5, #8]
 8005d12:	60ec      	str	r4, [r5, #12]
 8005d14:	f8c5 e01c 	str.w	lr, [r5, #28]
 8005d18:	61aa      	str	r2, [r5, #24]
 8005d1a:	b007      	add	sp, #28
 8005d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d20:	464a      	mov	r2, r9
 8005d22:	e7f0      	b.n	8005d06 <D48_1CH_HTONS_VOL_HP+0x132>
 8005d24:	2000022c 	.word	0x2000022c
 8005d28:	000f000a 	.word	0x000f000a
 8005d2c:	00060003 	.word	0x00060003
 8005d30:	00150019 	.word	0x00150019
 8005d34:	00190015 	.word	0x00190015
 8005d38:	00030006 	.word	0x00030006
 8005d3c:	000a000f 	.word	0x000a000f

08005d40 <D64_1CH_HTONS_VOL_HP>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	b089      	sub	sp, #36	; 0x24
 8005d46:	4614      	mov	r4, r2
 8005d48:	9207      	str	r2, [sp, #28]
 8005d4a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005d4c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8005d50:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8005d54:	6992      	ldr	r2, [r2, #24]
 8005d56:	9206      	str	r2, [sp, #24]
 8005d58:	68e2      	ldr	r2, [r4, #12]
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d5e:	9203      	str	r2, [sp, #12]
 8005d60:	6a22      	ldr	r2, [r4, #32]
 8005d62:	69e5      	ldr	r5, [r4, #28]
 8005d64:	68a6      	ldr	r6, [r4, #8]
 8005d66:	9204      	str	r2, [sp, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80b0 	beq.w	8005ece <D64_1CH_HTONS_VOL_HP+0x18e>
 8005d6e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005d72:	4f58      	ldr	r7, [pc, #352]	; (8005ed4 <D64_1CH_HTONS_VOL_HP+0x194>)
 8005d74:	9305      	str	r3, [sp, #20]
 8005d76:	9102      	str	r1, [sp, #8]
 8005d78:	f850 2b08 	ldr.w	r2, [r0], #8
 8005d7c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005d80:	ba52      	rev16	r2, r2
 8005d82:	fa93 f993 	rev16.w	r9, r3
 8005d86:	b2d4      	uxtb	r4, r2
 8005d88:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005d8c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8005d90:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005d94:	9901      	ldr	r1, [sp, #4]
 8005d96:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005d9a:	0e12      	lsrs	r2, r2, #24
 8005d9c:	44ab      	add	fp, r5
 8005d9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005da2:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8005da6:	fa5f f289 	uxtb.w	r2, r9
 8005daa:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8005dae:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8005db2:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8005db6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005dba:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005dbe:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8005dc2:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8005dc6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8005dca:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005dce:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8005dd2:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8005dd6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005dda:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005dde:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8005de2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005de6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005dea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005df6:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8005dfa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005dfe:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8005e02:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005e06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8005e0a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8005e0e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e12:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8005e16:	4b30      	ldr	r3, [pc, #192]	; (8005ed8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8005e18:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005e1c:	492f      	ldr	r1, [pc, #188]	; (8005edc <D64_1CH_HTONS_VOL_HP+0x19c>)
 8005e1e:	fb24 3301 	smlad	r3, r4, r1, r3
 8005e22:	492f      	ldr	r1, [pc, #188]	; (8005ee0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8005e24:	fb22 3301 	smlad	r3, r2, r1, r3
 8005e28:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005e2c:	fb2e 390a 	smlad	r9, lr, sl, r3
 8005e30:	4b2c      	ldr	r3, [pc, #176]	; (8005ee4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8005e32:	fb2b 6603 	smlad	r6, fp, r3, r6
 8005e36:	fb2e 6613 	smladx	r6, lr, r3, r6
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8005e3c:	fb24 6603 	smlad	r6, r4, r3, r6
 8005e40:	fb22 6313 	smladx	r3, r2, r3, r6
 8005e44:	f04f 0a01 	mov.w	sl, #1
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	fb2b fb0a 	smuad	fp, fp, sl
 8005e4e:	4b27      	ldr	r3, [pc, #156]	; (8005eec <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8005e50:	fb24 ba03 	smlad	sl, r4, r3, fp
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8005e56:	fb22 a203 	smlad	r2, r2, r3, sl
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8005e5c:	fb2e 2603 	smlad	r6, lr, r3, r2
 8005e60:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8005e64:	eb0a 020c 	add.w	r2, sl, ip
 8005e68:	9c04      	ldr	r4, [sp, #16]
 8005e6a:	9903      	ldr	r1, [sp, #12]
 8005e6c:	eba2 0208 	sub.w	r2, r2, r8
 8005e70:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8005e74:	fba2 2304 	umull	r2, r3, r2, r4
 8005e78:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005e7c:	fb04 3309 	mla	r3, r4, r9, r3
 8005e80:	f143 0300 	adc.w	r3, r3, #0
 8005e84:	02da      	lsls	r2, r3, #11
 8005e86:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	fbc1 8902 	smlal	r8, r9, r1, r2
 8005e92:	9902      	ldr	r1, [sp, #8]
 8005e94:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8005e98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005e9c:	f302 020f 	ssat	r2, #16, r2
 8005ea0:	9b05      	ldr	r3, [sp, #20]
 8005ea2:	f821 2b02 	strh.w	r2, [r1], #2
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	9102      	str	r1, [sp, #8]
 8005eaa:	46d0      	mov	r8, sl
 8005eac:	f47f af64 	bne.w	8005d78 <D64_1CH_HTONS_VOL_HP+0x38>
 8005eb0:	9a07      	ldr	r2, [sp, #28]
 8005eb2:	9901      	ldr	r1, [sp, #4]
 8005eb4:	60d1      	str	r1, [r2, #12]
 8005eb6:	9906      	ldr	r1, [sp, #24]
 8005eb8:	6096      	str	r6, [r2, #8]
 8005eba:	2000      	movs	r0, #0
 8005ebc:	61d5      	str	r5, [r2, #28]
 8005ebe:	f8c2 c010 	str.w	ip, [r2, #16]
 8005ec2:	f8c2 a014 	str.w	sl, [r2, #20]
 8005ec6:	6191      	str	r1, [r2, #24]
 8005ec8:	b009      	add	sp, #36	; 0x24
 8005eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ece:	46c2      	mov	sl, r8
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	e7ee      	b.n	8005eb2 <D64_1CH_HTONS_VOL_HP+0x172>
 8005ed4:	2000022c 	.word	0x2000022c
 8005ed8:	001c0015 	.word	0x001c0015
 8005edc:	000f000a 	.word	0x000f000a
 8005ee0:	00060003 	.word	0x00060003
 8005ee4:	0024002a 	.word	0x0024002a
 8005ee8:	002e0030 	.word	0x002e0030
 8005eec:	00030006 	.word	0x00030006
 8005ef0:	000a000f 	.word	0x000a000f
 8005ef4:	0015001c 	.word	0x0015001c

08005ef8 <D80_1CH_HTONS_VOL_HP>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	4613      	mov	r3, r2
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	4686      	mov	lr, r0
 8005f02:	6918      	ldr	r0, [r3, #16]
 8005f04:	9000      	str	r0, [sp, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	461c      	mov	r4, r3
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	6983      	ldr	r3, [r0, #24]
 8005f10:	9306      	str	r3, [sp, #24]
 8005f12:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8005f16:	69c3      	ldr	r3, [r0, #28]
 8005f18:	68c0      	ldr	r0, [r0, #12]
 8005f1a:	9207      	str	r2, [sp, #28]
 8005f1c:	9001      	str	r0, [sp, #4]
 8005f1e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005f20:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005f22:	9003      	str	r0, [sp, #12]
 8005f24:	6a20      	ldr	r0, [r4, #32]
 8005f26:	9004      	str	r0, [sp, #16]
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	f000 80d2 	beq.w	80060d2 <D80_1CH_HTONS_VOL_HP+0x1da>
 8005f2e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005f32:	4869      	ldr	r0, [pc, #420]	; (80060d8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8005f34:	9205      	str	r2, [sp, #20]
 8005f36:	461c      	mov	r4, r3
 8005f38:	f8de 5000 	ldr.w	r5, [lr]
 8005f3c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005f40:	f8de 3008 	ldr.w	r3, [lr, #8]
 8005f44:	f10e 0e0a 	add.w	lr, lr, #10
 8005f48:	ba6d      	rev16	r5, r5
 8005f4a:	ba52      	rev16	r2, r2
 8005f4c:	fa93 fb93 	rev16.w	fp, r3
 8005f50:	b2ee      	uxtb	r6, r5
 8005f52:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8005f56:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005f5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005f5e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8005f62:	eb04 0a07 	add.w	sl, r4, r7
 8005f66:	0e2d      	lsrs	r5, r5, #24
 8005f68:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8005f6c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005f70:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8005f74:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8005f78:	b2d5      	uxtb	r5, r2
 8005f7a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8005f7e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8005f82:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8005f86:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005f8a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8005f8e:	0e12      	lsrs	r2, r2, #24
 8005f90:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8005f94:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8005f98:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005f9c:	fa5f f48b 	uxtb.w	r4, fp
 8005fa0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005fa4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005fa8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005fac:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8005fb0:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8005fb4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005fb8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8005fbc:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8005fc0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005fc4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005fc8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005fcc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005fd0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005fd4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005fd8:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8005fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8005fe4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005fe8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005fec:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005ff0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8005ff4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8005ff8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005ffc:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8006000:	4d36      	ldr	r5, [pc, #216]	; (80060dc <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8006002:	9f01      	ldr	r7, [sp, #4]
 8006004:	fb23 7505 	smlad	r5, r3, r5, r7
 8006008:	4f35      	ldr	r7, [pc, #212]	; (80060e0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800600a:	fb29 5507 	smlad	r5, r9, r7, r5
 800600e:	4f35      	ldr	r7, [pc, #212]	; (80060e4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8006010:	fb28 5507 	smlad	r5, r8, r7, r5
 8006014:	4f34      	ldr	r7, [pc, #208]	; (80060e8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8006016:	fb22 5507 	smlad	r5, r2, r7, r5
 800601a:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800601e:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8006022:	4d32      	ldr	r5, [pc, #200]	; (80060ec <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8006024:	fb23 cc05 	smlad	ip, r3, r5, ip
 8006028:	4d31      	ldr	r5, [pc, #196]	; (80060f0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800602a:	fb29 cc05 	smlad	ip, r9, r5, ip
 800602e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8006032:	fb28 c505 	smlad	r5, r8, r5, ip
 8006036:	4f2f      	ldr	r7, [pc, #188]	; (80060f4 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006038:	fb22 5507 	smlad	r5, r2, r7, r5
 800603c:	4f2e      	ldr	r7, [pc, #184]	; (80060f8 <D80_1CH_HTONS_VOL_HP+0x200>)
 800603e:	fb26 5507 	smlad	r5, r6, r7, r5
 8006042:	f04f 0a01 	mov.w	sl, #1
 8006046:	9501      	str	r5, [sp, #4]
 8006048:	fb23 fa0a 	smuad	sl, r3, sl
 800604c:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <D80_1CH_HTONS_VOL_HP+0x204>)
 800604e:	fb29 a903 	smlad	r9, r9, r3, sl
 8006052:	4d2b      	ldr	r5, [pc, #172]	; (8006100 <D80_1CH_HTONS_VOL_HP+0x208>)
 8006054:	fb28 9805 	smlad	r8, r8, r5, r9
 8006058:	4d2a      	ldr	r5, [pc, #168]	; (8006104 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800605a:	fb22 8205 	smlad	r2, r2, r5, r8
 800605e:	4b2a      	ldr	r3, [pc, #168]	; (8006108 <D80_1CH_HTONS_VOL_HP+0x210>)
 8006060:	fb26 2c03 	smlad	ip, r6, r3, r2
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	9d04      	ldr	r5, [sp, #16]
 8006068:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800606c:	4453      	add	r3, sl
 800606e:	461a      	mov	r2, r3
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	f8cd a008 	str.w	sl, [sp, #8]
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	17d7      	asrs	r7, r2, #31
 800607a:	fba2 2305 	umull	r2, r3, r2, r5
 800607e:	fb05 3307 	mla	r3, r5, r7, r3
 8006082:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006086:	f143 0300 	adc.w	r3, r3, #0
 800608a:	9d03      	ldr	r5, [sp, #12]
 800608c:	029a      	lsls	r2, r3, #10
 800608e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006092:	2700      	movs	r7, #0
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	fbc5 6702 	smlal	r6, r7, r5, r2
 800609a:	10ba      	asrs	r2, r7, #2
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	f302 020f 	ssat	r2, #16, r2
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	f821 2b02 	strh.w	r2, [r1], #2
 80060a8:	4299      	cmp	r1, r3
 80060aa:	f47f af45 	bne.w	8005f38 <D80_1CH_HTONS_VOL_HP+0x40>
 80060ae:	4623      	mov	r3, r4
 80060b0:	9907      	ldr	r1, [sp, #28]
 80060b2:	9801      	ldr	r0, [sp, #4]
 80060b4:	60c8      	str	r0, [r1, #12]
 80060b6:	9a00      	ldr	r2, [sp, #0]
 80060b8:	f8c1 c008 	str.w	ip, [r1, #8]
 80060bc:	4608      	mov	r0, r1
 80060be:	61cb      	str	r3, [r1, #28]
 80060c0:	610a      	str	r2, [r1, #16]
 80060c2:	f8c1 a014 	str.w	sl, [r1, #20]
 80060c6:	9906      	ldr	r1, [sp, #24]
 80060c8:	6181      	str	r1, [r0, #24]
 80060ca:	2000      	movs	r0, #0
 80060cc:	b009      	add	sp, #36	; 0x24
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80060d6:	e7eb      	b.n	80060b0 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80060d8:	2000022c 	.word	0x2000022c
 80060dc:	002d0024 	.word	0x002d0024
 80060e0:	001c0015 	.word	0x001c0015
 80060e4:	000f000a 	.word	0x000f000a
 80060e8:	00060003 	.word	0x00060003
 80060ec:	0037003f 	.word	0x0037003f
 80060f0:	00450049 	.word	0x00450049
 80060f4:	00490045 	.word	0x00490045
 80060f8:	003f0037 	.word	0x003f0037
 80060fc:	00030006 	.word	0x00030006
 8006100:	000a000f 	.word	0x000a000f
 8006104:	0015001c 	.word	0x0015001c
 8006108:	0024002d 	.word	0x0024002d

0800610c <D128_1CH_HTONS_VOL_HP>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	b093      	sub	sp, #76	; 0x4c
 8006112:	4614      	mov	r4, r2
 8006114:	9211      	str	r2, [sp, #68]	; 0x44
 8006116:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006118:	6912      	ldr	r2, [r2, #16]
 800611a:	9203      	str	r2, [sp, #12]
 800611c:	4622      	mov	r2, r4
 800611e:	4615      	mov	r5, r2
 8006120:	6964      	ldr	r4, [r4, #20]
 8006122:	9406      	str	r4, [sp, #24]
 8006124:	4614      	mov	r4, r2
 8006126:	6992      	ldr	r2, [r2, #24]
 8006128:	9210      	str	r2, [sp, #64]	; 0x40
 800612a:	68ea      	ldr	r2, [r5, #12]
 800612c:	9204      	str	r2, [sp, #16]
 800612e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006130:	69e6      	ldr	r6, [r4, #28]
 8006132:	920d      	str	r2, [sp, #52]	; 0x34
 8006134:	68a4      	ldr	r4, [r4, #8]
 8006136:	6a2a      	ldr	r2, [r5, #32]
 8006138:	9405      	str	r4, [sp, #20]
 800613a:	920e      	str	r2, [sp, #56]	; 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8145 	beq.w	80063cc <D128_1CH_HTONS_VOL_HP+0x2c0>
 8006142:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006146:	930f      	str	r3, [sp, #60]	; 0x3c
 8006148:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8006428 <D128_1CH_HTONS_VOL_HP+0x31c>
 800614c:	9107      	str	r1, [sp, #28]
 800614e:	f100 0310 	add.w	r3, r0, #16
 8006152:	4699      	mov	r9, r3
 8006154:	f1a9 0110 	sub.w	r1, r9, #16
 8006158:	c90e      	ldmia	r1, {r1, r2, r3}
 800615a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800615e:	ba49      	rev16	r1, r1
 8006160:	ba52      	rev16	r2, r2
 8006162:	ba5b      	rev16	r3, r3
 8006164:	fa90 fa90 	rev16.w	sl, r0
 8006168:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800616c:	b2cc      	uxtb	r4, r1
 800616e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006172:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006176:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800617a:	0e09      	lsrs	r1, r1, #24
 800617c:	4426      	add	r6, r4
 800617e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006182:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006186:	b2d0      	uxtb	r0, r2
 8006188:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800618c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8006190:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006194:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006198:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800619c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80061a0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80061a4:	0e12      	lsrs	r2, r2, #24
 80061a6:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80061aa:	9701      	str	r7, [sp, #4]
 80061ac:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80061b0:	4627      	mov	r7, r4
 80061b2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80061b6:	9702      	str	r7, [sp, #8]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80061be:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 80061c2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80061c6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80061ca:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80061ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061d2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80061d6:	0e1b      	lsrs	r3, r3, #24
 80061d8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80061dc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80061e0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80061e4:	fa5f f38a 	uxtb.w	r3, sl
 80061e8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80061ec:	960a      	str	r6, [sp, #40]	; 0x28
 80061ee:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80061f2:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80061f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80061fa:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80061fe:	950b      	str	r5, [sp, #44]	; 0x2c
 8006200:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8006204:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006208:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800620c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8006210:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8006214:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006218:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800621c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006220:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8006224:	9308      	str	r3, [sp, #32]
 8006226:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006230:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006234:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006238:	9b02      	ldr	r3, [sp, #8]
 800623a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800623e:	9302      	str	r3, [sp, #8]
 8006240:	9b08      	ldr	r3, [sp, #32]
 8006242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006246:	9308      	str	r3, [sp, #32]
 8006248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800624e:	950c      	str	r5, [sp, #48]	; 0x30
 8006250:	461d      	mov	r5, r3
 8006252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006254:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006258:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800625c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8006260:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	9202      	str	r2, [sp, #8]
 800626a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800626c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800626e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006272:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006276:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800627a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800627e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006282:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006286:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800628a:	9b08      	ldr	r3, [sp, #32]
 800628c:	9f01      	ldr	r7, [sp, #4]
 800628e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006292:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006296:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800629a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800629e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80062a2:	46be      	mov	lr, r7
 80062a4:	0a96      	lsrs	r6, r2, #10
 80062a6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80062aa:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80062ae:	4f49      	ldr	r7, [pc, #292]	; (80063d4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80062b0:	9a04      	ldr	r2, [sp, #16]
 80062b2:	fb2e 2e07 	smlad	lr, lr, r7, r2
 80062b6:	4a48      	ldr	r2, [pc, #288]	; (80063d8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80062b8:	fb2a ee02 	smlad	lr, sl, r2, lr
 80062bc:	4a47      	ldr	r2, [pc, #284]	; (80063dc <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80062be:	fb21 ee02 	smlad	lr, r1, r2, lr
 80062c2:	4a47      	ldr	r2, [pc, #284]	; (80063e0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80062c4:	fb24 ee02 	smlad	lr, r4, r2, lr
 80062c8:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80062ca:	9f02      	ldr	r7, [sp, #8]
 80062cc:	fb27 ee02 	smlad	lr, r7, r2, lr
 80062d0:	4a45      	ldr	r2, [pc, #276]	; (80063e8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80062d2:	fb20 ee02 	smlad	lr, r0, r2, lr
 80062d6:	4a45      	ldr	r2, [pc, #276]	; (80063ec <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80062d8:	fb23 e702 	smlad	r7, r3, r2, lr
 80062dc:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80062e0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80062e4:	9f01      	ldr	r7, [sp, #4]
 80062e6:	4a42      	ldr	r2, [pc, #264]	; (80063f0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 80062e8:	46bc      	mov	ip, r7
 80062ea:	9f05      	ldr	r7, [sp, #20]
 80062ec:	fb2c 7c02 	smlad	ip, ip, r2, r7
 80062f0:	4a40      	ldr	r2, [pc, #256]	; (80063f4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80062f2:	fb2a cc02 	smlad	ip, sl, r2, ip
 80062f6:	4f40      	ldr	r7, [pc, #256]	; (80063f8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80062f8:	fb21 cc07 	smlad	ip, r1, r7, ip
 80062fc:	4f3f      	ldr	r7, [pc, #252]	; (80063fc <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80062fe:	fb24 cc07 	smlad	ip, r4, r7, ip
 8006302:	4f3f      	ldr	r7, [pc, #252]	; (8006400 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8006304:	9a02      	ldr	r2, [sp, #8]
 8006306:	fb22 cc07 	smlad	ip, r2, r7, ip
 800630a:	4f3e      	ldr	r7, [pc, #248]	; (8006404 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800630c:	fb20 cc07 	smlad	ip, r0, r7, ip
 8006310:	4f3d      	ldr	r7, [pc, #244]	; (8006408 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8006312:	fb23 c707 	smlad	r7, r3, r7, ip
 8006316:	f8df c114 	ldr.w	ip, [pc, #276]	; 800642c <D128_1CH_HTONS_VOL_HP+0x320>
 800631a:	fb25 720c 	smlad	r2, r5, ip, r7
 800631e:	f04f 0b01 	mov.w	fp, #1
 8006322:	9204      	str	r2, [sp, #16]
 8006324:	9f01      	ldr	r7, [sp, #4]
 8006326:	fb27 fb0b 	smuad	fp, r7, fp
 800632a:	4f38      	ldr	r7, [pc, #224]	; (800640c <D128_1CH_HTONS_VOL_HP+0x300>)
 800632c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8006330:	4f37      	ldr	r7, [pc, #220]	; (8006410 <D128_1CH_HTONS_VOL_HP+0x304>)
 8006332:	fb21 aa07 	smlad	sl, r1, r7, sl
 8006336:	4f37      	ldr	r7, [pc, #220]	; (8006414 <D128_1CH_HTONS_VOL_HP+0x308>)
 8006338:	fb24 aa07 	smlad	sl, r4, r7, sl
 800633c:	4f36      	ldr	r7, [pc, #216]	; (8006418 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800633e:	9a02      	ldr	r2, [sp, #8]
 8006340:	fb22 a707 	smlad	r7, r2, r7, sl
 8006344:	4a35      	ldr	r2, [pc, #212]	; (800641c <D128_1CH_HTONS_VOL_HP+0x310>)
 8006346:	fb20 7702 	smlad	r7, r0, r2, r7
 800634a:	4a35      	ldr	r2, [pc, #212]	; (8006420 <D128_1CH_HTONS_VOL_HP+0x314>)
 800634c:	fb23 7702 	smlad	r7, r3, r2, r7
 8006350:	4b34      	ldr	r3, [pc, #208]	; (8006424 <D128_1CH_HTONS_VOL_HP+0x318>)
 8006352:	fb25 7303 	smlad	r3, r5, r3, r7
 8006356:	9305      	str	r3, [sp, #20]
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800635c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8006360:	4473      	add	r3, lr
 8006362:	461a      	mov	r2, r3
 8006364:	9b06      	ldr	r3, [sp, #24]
 8006366:	f8cd e018 	str.w	lr, [sp, #24]
 800636a:	1ad2      	subs	r2, r2, r3
 800636c:	17d1      	asrs	r1, r2, #31
 800636e:	fba2 2304 	umull	r2, r3, r2, r4
 8006372:	fb04 3301 	mla	r3, r4, r1, r3
 8006376:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800637a:	f143 0300 	adc.w	r3, r3, #0
 800637e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006380:	021a      	lsls	r2, r3, #8
 8006382:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006386:	2100      	movs	r1, #0
 8006388:	fbc4 0102 	smlal	r0, r1, r4, r2
 800638c:	108a      	asrs	r2, r1, #2
 800638e:	9907      	ldr	r1, [sp, #28]
 8006390:	f302 020f 	ssat	r2, #16, r2
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	f821 2b02 	strh.w	r2, [r1], #2
 800639a:	9303      	str	r3, [sp, #12]
 800639c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800639e:	9107      	str	r1, [sp, #28]
 80063a0:	4299      	cmp	r1, r3
 80063a2:	f109 0910 	add.w	r9, r9, #16
 80063a6:	f47f aed5 	bne.w	8006154 <D128_1CH_HTONS_VOL_HP+0x48>
 80063aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063ac:	9905      	ldr	r1, [sp, #20]
 80063ae:	6091      	str	r1, [r2, #8]
 80063b0:	9904      	ldr	r1, [sp, #16]
 80063b2:	60d1      	str	r1, [r2, #12]
 80063b4:	4613      	mov	r3, r2
 80063b6:	61d6      	str	r6, [r2, #28]
 80063b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80063ba:	9a03      	ldr	r2, [sp, #12]
 80063bc:	611a      	str	r2, [r3, #16]
 80063be:	2000      	movs	r0, #0
 80063c0:	f8c3 e014 	str.w	lr, [r3, #20]
 80063c4:	6199      	str	r1, [r3, #24]
 80063c6:	b013      	add	sp, #76	; 0x4c
 80063c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80063d0:	e7eb      	b.n	80063aa <D128_1CH_HTONS_VOL_HP+0x29e>
 80063d2:	bf00      	nop
 80063d4:	00780069 	.word	0x00780069
 80063d8:	005b004e 	.word	0x005b004e
 80063dc:	00420037 	.word	0x00420037
 80063e0:	002d0024 	.word	0x002d0024
 80063e4:	001c0015 	.word	0x001c0015
 80063e8:	000f000a 	.word	0x000f000a
 80063ec:	00060003 	.word	0x00060003
 80063f0:	00880096 	.word	0x00880096
 80063f4:	00a200ac 	.word	0x00a200ac
 80063f8:	00b400ba 	.word	0x00b400ba
 80063fc:	00be00c0 	.word	0x00be00c0
 8006400:	00c000be 	.word	0x00c000be
 8006404:	00ba00b4 	.word	0x00ba00b4
 8006408:	00ac00a2 	.word	0x00ac00a2
 800640c:	00030006 	.word	0x00030006
 8006410:	000a000f 	.word	0x000a000f
 8006414:	0015001c 	.word	0x0015001c
 8006418:	0024002d 	.word	0x0024002d
 800641c:	00370042 	.word	0x00370042
 8006420:	004e005b 	.word	0x004e005b
 8006424:	00690078 	.word	0x00690078
 8006428:	2000022c 	.word	0x2000022c
 800642c:	00960088 	.word	0x00960088

08006430 <PDM_Filter_Init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	2240      	movs	r2, #64	; 0x40
 8006434:	4604      	mov	r4, r0
 8006436:	2100      	movs	r1, #0
 8006438:	300c      	adds	r0, #12
 800643a:	f000 f9f9 	bl	8006830 <memset>
 800643e:	493b      	ldr	r1, [pc, #236]	; (800652c <PDM_Filter_Init+0xfc>)
 8006440:	483b      	ldr	r0, [pc, #236]	; (8006530 <PDM_Filter_Init+0x100>)
 8006442:	f000 f98d 	bl	8006760 <CRC_Lock>
 8006446:	8822      	ldrh	r2, [r4, #0]
 8006448:	8963      	ldrh	r3, [r4, #10]
 800644a:	4938      	ldr	r1, [pc, #224]	; (800652c <PDM_Filter_Init+0xfc>)
 800644c:	8925      	ldrh	r5, [r4, #8]
 800644e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8006450:	2801      	cmp	r0, #1
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	bf18      	it	ne
 8006458:	2100      	movne	r1, #0
 800645a:	2a01      	cmp	r2, #1
 800645c:	6461      	str	r1, [r4, #68]	; 0x44
 800645e:	86e5      	strh	r5, [r4, #54]	; 0x36
 8006460:	61a3      	str	r3, [r4, #24]
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	6163      	str	r3, [r4, #20]
 8006466:	60e3      	str	r3, [r4, #12]
 8006468:	6263      	str	r3, [r4, #36]	; 0x24
 800646a:	61e3      	str	r3, [r4, #28]
 800646c:	6223      	str	r3, [r4, #32]
 800646e:	6423      	str	r3, [r4, #64]	; 0x40
 8006470:	d918      	bls.n	80064a4 <PDM_Filter_Init+0x74>
 8006472:	2003      	movs	r0, #3
 8006474:	2302      	movs	r3, #2
 8006476:	8862      	ldrh	r2, [r4, #2]
 8006478:	2a01      	cmp	r2, #1
 800647a:	d91d      	bls.n	80064b8 <PDM_Filter_Init+0x88>
 800647c:	2140      	movs	r1, #64	; 0x40
 800647e:	2300      	movs	r3, #0
 8006480:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006482:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	bf04      	itt	eq
 800648a:	6421      	streq	r1, [r4, #64]	; 0x40
 800648c:	460b      	moveq	r3, r1
 800648e:	b11a      	cbz	r2, 8006498 <PDM_Filter_Init+0x68>
 8006490:	f043 0310 	orr.w	r3, r3, #16
 8006494:	6423      	str	r3, [r4, #64]	; 0x40
 8006496:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006498:	2200      	movs	r2, #0
 800649a:	8722      	strh	r2, [r4, #56]	; 0x38
 800649c:	b908      	cbnz	r0, 80064a2 <PDM_Filter_Init+0x72>
 800649e:	3380      	adds	r3, #128	; 0x80
 80064a0:	6423      	str	r3, [r4, #64]	; 0x40
 80064a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a4:	4d23      	ldr	r5, [pc, #140]	; (8006534 <PDM_Filter_Init+0x104>)
 80064a6:	d010      	beq.n	80064ca <PDM_Filter_Init+0x9a>
 80064a8:	782a      	ldrb	r2, [r5, #0]
 80064aa:	2a01      	cmp	r2, #1
 80064ac:	d027      	beq.n	80064fe <PDM_Filter_Init+0xce>
 80064ae:	8862      	ldrh	r2, [r4, #2]
 80064b0:	2a01      	cmp	r2, #1
 80064b2:	f04f 0001 	mov.w	r0, #1
 80064b6:	d8e1      	bhi.n	800647c <PDM_Filter_Init+0x4c>
 80064b8:	d001      	beq.n	80064be <PDM_Filter_Init+0x8e>
 80064ba:	4618      	mov	r0, r3
 80064bc:	e7de      	b.n	800647c <PDM_Filter_Init+0x4c>
 80064be:	2220      	movs	r2, #32
 80064c0:	4618      	mov	r0, r3
 80064c2:	6422      	str	r2, [r4, #64]	; 0x40
 80064c4:	4613      	mov	r3, r2
 80064c6:	2160      	movs	r1, #96	; 0x60
 80064c8:	e7da      	b.n	8006480 <PDM_Filter_Init+0x50>
 80064ca:	7829      	ldrb	r1, [r5, #0]
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d1ee      	bne.n	80064ae <PDM_Filter_Init+0x7e>
 80064d0:	4919      	ldr	r1, [pc, #100]	; (8006538 <PDM_Filter_Init+0x108>)
 80064d2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8006540 <PDM_Filter_Init+0x110>
 80064d6:	4f19      	ldr	r7, [pc, #100]	; (800653c <PDM_Filter_Init+0x10c>)
 80064d8:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80064dc:	684a      	ldr	r2, [r1, #4]
 80064de:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80064e2:	ea02 0007 	and.w	r0, r2, r7
 80064e6:	4303      	orrs	r3, r0
 80064e8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80064ec:	4413      	add	r3, r2
 80064ee:	f841 3f04 	str.w	r3, [r1, #4]!
 80064f2:	428e      	cmp	r6, r1
 80064f4:	d1f2      	bne.n	80064dc <PDM_Filter_Init+0xac>
 80064f6:	2001      	movs	r0, #1
 80064f8:	7028      	strb	r0, [r5, #0]
 80064fa:	2300      	movs	r3, #0
 80064fc:	e7bb      	b.n	8006476 <PDM_Filter_Init+0x46>
 80064fe:	490e      	ldr	r1, [pc, #56]	; (8006538 <PDM_Filter_Init+0x108>)
 8006500:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8006540 <PDM_Filter_Init+0x110>
 8006504:	4f0d      	ldr	r7, [pc, #52]	; (800653c <PDM_Filter_Init+0x10c>)
 8006506:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800650a:	684a      	ldr	r2, [r1, #4]
 800650c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8006510:	ea02 0007 	and.w	r0, r2, r7
 8006514:	4303      	orrs	r3, r0
 8006516:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800651a:	4413      	add	r3, r2
 800651c:	f841 3f04 	str.w	r3, [r1, #4]!
 8006520:	428e      	cmp	r6, r1
 8006522:	d1f2      	bne.n	800650a <PDM_Filter_Init+0xda>
 8006524:	2300      	movs	r3, #0
 8006526:	702b      	strb	r3, [r5, #0]
 8006528:	e7c1      	b.n	80064ae <PDM_Filter_Init+0x7e>
 800652a:	bf00      	nop
 800652c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006530:	f407a5c2 	.word	0xf407a5c2
 8006534:	20000989 	.word	0x20000989
 8006538:	20000228 	.word	0x20000228
 800653c:	000ffc00 	.word	0x000ffc00
 8006540:	3ff00000 	.word	0x3ff00000

08006544 <PDM_Filter_setConfig>:
 8006544:	4b66      	ldr	r3, [pc, #408]	; (80066e0 <PDM_Filter_setConfig+0x19c>)
 8006546:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <PDM_Filter_setConfig+0xc>
 800654c:	2004      	movs	r0, #4
 800654e:	4770      	bx	lr
 8006550:	b530      	push	{r4, r5, lr}
 8006552:	880a      	ldrh	r2, [r1, #0]
 8006554:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006556:	ed2d 8b04 	vpush	{d8-d9}
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	1e51      	subs	r1, r2, #1
 8006560:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006564:	2906      	cmp	r1, #6
 8006566:	b083      	sub	sp, #12
 8006568:	6420      	str	r0, [r4, #64]	; 0x40
 800656a:	d91a      	bls.n	80065a2 <PDM_Filter_setConfig+0x5e>
 800656c:	2008      	movs	r0, #8
 800656e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8006572:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006576:	4299      	cmp	r1, r3
 8006578:	d07e      	beq.n	8006678 <PDM_Filter_setConfig+0x134>
 800657a:	f113 0f0c 	cmn.w	r3, #12
 800657e:	da2a      	bge.n	80065d6 <PDM_Filter_setConfig+0x92>
 8006580:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006584:	3040      	adds	r0, #64	; 0x40
 8006586:	80ab      	strh	r3, [r5, #4]
 8006588:	8622      	strh	r2, [r4, #48]	; 0x30
 800658a:	886b      	ldrh	r3, [r5, #2]
 800658c:	8663      	strh	r3, [r4, #50]	; 0x32
 800658e:	b920      	cbnz	r0, 800659a <PDM_Filter_setConfig+0x56>
 8006590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006596:	6423      	str	r3, [r4, #64]	; 0x40
 8006598:	2000      	movs	r0, #0
 800659a:	b003      	add	sp, #12
 800659c:	ecbd 8b04 	vpop	{d8-d9}
 80065a0:	bd30      	pop	{r4, r5, pc}
 80065a2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80065a4:	4291      	cmp	r1, r2
 80065a6:	d06c      	beq.n	8006682 <PDM_Filter_setConfig+0x13e>
 80065a8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80065b6:	6423      	str	r3, [r4, #64]	; 0x40
 80065b8:	2970      	cmp	r1, #112	; 0x70
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	f103 33ff 	add.w	r3, r3, #4294967295
 80065c2:	d066      	beq.n	8006692 <PDM_Filter_setConfig+0x14e>
 80065c4:	2b06      	cmp	r3, #6
 80065c6:	f200 8089 	bhi.w	80066dc <PDM_Filter_setConfig+0x198>
 80065ca:	e8df f003 	tbb	[pc, r3]
 80065ce:	4f52      	.short	0x4f52
 80065d0:	3d43494c 	.word	0x3d43494c
 80065d4:	46          	.byte	0x46
 80065d5:	00          	.byte	0x00
 80065d6:	2b33      	cmp	r3, #51	; 0x33
 80065d8:	dc32      	bgt.n	8006640 <PDM_Filter_setConfig+0xfc>
 80065da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80065dc:	f002 020f 	and.w	r2, r2, #15
 80065e0:	3a01      	subs	r2, #1
 80065e2:	2a06      	cmp	r2, #6
 80065e4:	d872      	bhi.n	80066cc <PDM_Filter_setConfig+0x188>
 80065e6:	493f      	ldr	r1, [pc, #252]	; (80066e4 <PDM_Filter_setConfig+0x1a0>)
 80065e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80065ec:	ed92 9a00 	vldr	s18, [r2]
 80065f0:	ed92 8a07 	vldr	s16, [r2, #28]
 80065f4:	9001      	str	r0, [sp, #4]
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065fe:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8006602:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8006606:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800660a:	f000 f93f 	bl	800688c <powf>
 800660e:	eddf 0a36 	vldr	s1, [pc, #216]	; 80066e8 <PDM_Filter_setConfig+0x1a4>
 8006612:	eef0 8a40 	vmov.f32	s17, s0
 8006616:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800661a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800661e:	f000 f935 	bl	800688c <powf>
 8006622:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006626:	ee28 0a00 	vmul.f32	s0, s16, s0
 800662a:	f000 f909 	bl	8006840 <roundf>
 800662e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006632:	88ab      	ldrh	r3, [r5, #4]
 8006634:	882a      	ldrh	r2, [r5, #0]
 8006636:	9801      	ldr	r0, [sp, #4]
 8006638:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800663c:	8723      	strh	r3, [r4, #56]	; 0x38
 800663e:	e7a3      	b.n	8006588 <PDM_Filter_setConfig+0x44>
 8006640:	2333      	movs	r3, #51	; 0x33
 8006642:	3040      	adds	r0, #64	; 0x40
 8006644:	80ab      	strh	r3, [r5, #4]
 8006646:	e79f      	b.n	8006588 <PDM_Filter_setConfig+0x44>
 8006648:	4b28      	ldr	r3, [pc, #160]	; (80066ec <PDM_Filter_setConfig+0x1a8>)
 800664a:	64a3      	str	r3, [r4, #72]	; 0x48
 800664c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006650:	2000      	movs	r0, #0
 8006652:	e792      	b.n	800657a <PDM_Filter_setConfig+0x36>
 8006654:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <PDM_Filter_setConfig+0x1ac>)
 8006656:	64a3      	str	r3, [r4, #72]	; 0x48
 8006658:	e7f8      	b.n	800664c <PDM_Filter_setConfig+0x108>
 800665a:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <PDM_Filter_setConfig+0x1b0>)
 800665c:	64a3      	str	r3, [r4, #72]	; 0x48
 800665e:	e7f5      	b.n	800664c <PDM_Filter_setConfig+0x108>
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <PDM_Filter_setConfig+0x1b4>)
 8006662:	64a3      	str	r3, [r4, #72]	; 0x48
 8006664:	e7f2      	b.n	800664c <PDM_Filter_setConfig+0x108>
 8006666:	4b25      	ldr	r3, [pc, #148]	; (80066fc <PDM_Filter_setConfig+0x1b8>)
 8006668:	64a3      	str	r3, [r4, #72]	; 0x48
 800666a:	e7ef      	b.n	800664c <PDM_Filter_setConfig+0x108>
 800666c:	4b24      	ldr	r3, [pc, #144]	; (8006700 <PDM_Filter_setConfig+0x1bc>)
 800666e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006670:	e7ec      	b.n	800664c <PDM_Filter_setConfig+0x108>
 8006672:	4b24      	ldr	r3, [pc, #144]	; (8006704 <PDM_Filter_setConfig+0x1c0>)
 8006674:	64a3      	str	r3, [r4, #72]	; 0x48
 8006676:	e7e9      	b.n	800664c <PDM_Filter_setConfig+0x108>
 8006678:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800667a:	4291      	cmp	r1, r2
 800667c:	f47f af7d 	bne.w	800657a <PDM_Filter_setConfig+0x36>
 8006680:	e783      	b.n	800658a <PDM_Filter_setConfig+0x46>
 8006682:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006686:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800668a:	4299      	cmp	r1, r3
 800668c:	d023      	beq.n	80066d6 <PDM_Filter_setConfig+0x192>
 800668e:	2000      	movs	r0, #0
 8006690:	e773      	b.n	800657a <PDM_Filter_setConfig+0x36>
 8006692:	2b06      	cmp	r3, #6
 8006694:	d822      	bhi.n	80066dc <PDM_Filter_setConfig+0x198>
 8006696:	e8df f003 	tbb	[pc, r3]
 800669a:	1316      	.short	0x1316
 800669c:	070a0d10 	.word	0x070a0d10
 80066a0:	04          	.byte	0x04
 80066a1:	00          	.byte	0x00
 80066a2:	4b19      	ldr	r3, [pc, #100]	; (8006708 <PDM_Filter_setConfig+0x1c4>)
 80066a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80066a6:	e7d1      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <PDM_Filter_setConfig+0x1c8>)
 80066aa:	64a3      	str	r3, [r4, #72]	; 0x48
 80066ac:	e7ce      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066ae:	4b18      	ldr	r3, [pc, #96]	; (8006710 <PDM_Filter_setConfig+0x1cc>)
 80066b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80066b2:	e7cb      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066b4:	4b17      	ldr	r3, [pc, #92]	; (8006714 <PDM_Filter_setConfig+0x1d0>)
 80066b6:	64a3      	str	r3, [r4, #72]	; 0x48
 80066b8:	e7c8      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066ba:	4b17      	ldr	r3, [pc, #92]	; (8006718 <PDM_Filter_setConfig+0x1d4>)
 80066bc:	64a3      	str	r3, [r4, #72]	; 0x48
 80066be:	e7c5      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066c0:	4b16      	ldr	r3, [pc, #88]	; (800671c <PDM_Filter_setConfig+0x1d8>)
 80066c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80066c4:	e7c2      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066c6:	4b16      	ldr	r3, [pc, #88]	; (8006720 <PDM_Filter_setConfig+0x1dc>)
 80066c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80066ca:	e7bf      	b.n	800664c <PDM_Filter_setConfig+0x108>
 80066cc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006724 <PDM_Filter_setConfig+0x1e0>
 80066d0:	eeb0 9a48 	vmov.f32	s18, s16
 80066d4:	e78e      	b.n	80065f4 <PDM_Filter_setConfig+0xb0>
 80066d6:	886b      	ldrh	r3, [r5, #2]
 80066d8:	8663      	strh	r3, [r4, #50]	; 0x32
 80066da:	e759      	b.n	8006590 <PDM_Filter_setConfig+0x4c>
 80066dc:	2000      	movs	r0, #0
 80066de:	e746      	b.n	800656e <PDM_Filter_setConfig+0x2a>
 80066e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80066e4:	080071b8 	.word	0x080071b8
 80066e8:	42000000 	.word	0x42000000
 80066ec:	08004ab1 	.word	0x08004ab1
 80066f0:	08004991 	.word	0x08004991
 80066f4:	08004c41 	.word	0x08004c41
 80066f8:	08005485 	.word	0x08005485
 80066fc:	080051e5 	.word	0x080051e5
 8006700:	08004fc5 	.word	0x08004fc5
 8006704:	08004dd9 	.word	0x08004dd9
 8006708:	08005a91 	.word	0x08005a91
 800670c:	08005959 	.word	0x08005959
 8006710:	08005875 	.word	0x08005875
 8006714:	0800610d 	.word	0x0800610d
 8006718:	08005ef9 	.word	0x08005ef9
 800671c:	08005d41 	.word	0x08005d41
 8006720:	08005bd5 	.word	0x08005bd5
 8006724:	00000000 	.word	0x00000000

08006728 <PDM_Filter>:
 8006728:	b410      	push	{r4}
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <PDM_Filter+0x34>)
 800672c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800672e:	429c      	cmp	r4, r3
 8006730:	d003      	beq.n	800673a <PDM_Filter+0x12>
 8006732:	2004      	movs	r0, #4
 8006734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800673c:	05dc      	lsls	r4, r3, #23
 800673e:	d407      	bmi.n	8006750 <PDM_Filter+0x28>
 8006740:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006744:	bf14      	ite	ne
 8006746:	2020      	movne	r0, #32
 8006748:	2030      	moveq	r0, #48	; 0x30
 800674a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006756:	320c      	adds	r2, #12
 8006758:	4718      	bx	r3
 800675a:	bf00      	nop
 800675c:	b5e8b5cd 	.word	0xb5e8b5cd

08006760 <CRC_Lock>:
 8006760:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <CRC_Lock+0x60>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	b410      	push	{r4}
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	4c16      	ldr	r4, [pc, #88]	; (80067c4 <CRC_Lock+0x64>)
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	b933      	cbnz	r3, 8006780 <CRC_Lock+0x20>
 8006772:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <CRC_Lock+0x68>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800677a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800677e:	d00f      	beq.n	80067a0 <CRC_Lock+0x40>
 8006780:	4a12      	ldr	r2, [pc, #72]	; (80067cc <CRC_Lock+0x6c>)
 8006782:	2301      	movs	r3, #1
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1fc      	bne.n	8006786 <CRC_Lock+0x26>
 800678c:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <CRC_Lock+0x70>)
 800678e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006792:	6018      	str	r0, [r3, #0]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	1a08      	subs	r0, r1, r0
 8006798:	fab0 f080 	clz	r0, r0
 800679c:	0940      	lsrs	r0, r0, #5
 800679e:	4770      	bx	lr
 80067a0:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <CRC_Lock+0x74>)
 80067a2:	2301      	movs	r3, #1
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	6813      	ldr	r3, [r2, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1fc      	bne.n	80067a6 <CRC_Lock+0x46>
 80067ac:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <CRC_Lock+0x78>)
 80067ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067b2:	6018      	str	r0, [r3, #0]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	1a40      	subs	r0, r0, r1
 80067b8:	fab0 f080 	clz	r0, r0
 80067bc:	0940      	lsrs	r0, r0, #5
 80067be:	4770      	bx	lr
 80067c0:	e0002000 	.word	0xe0002000
 80067c4:	e0042000 	.word	0xe0042000
 80067c8:	5c001000 	.word	0x5c001000
 80067cc:	40023008 	.word	0x40023008
 80067d0:	40023000 	.word	0x40023000
 80067d4:	58024c08 	.word	0x58024c08
 80067d8:	58024c00 	.word	0x58024c00

080067dc <__errno>:
 80067dc:	4b01      	ldr	r3, [pc, #4]	; (80067e4 <__errno+0x8>)
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000062c 	.word	0x2000062c

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4d0d      	ldr	r5, [pc, #52]	; (8006820 <__libc_init_array+0x38>)
 80067ec:	4c0d      	ldr	r4, [pc, #52]	; (8006824 <__libc_init_array+0x3c>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	2600      	movs	r6, #0
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	4d0b      	ldr	r5, [pc, #44]	; (8006828 <__libc_init_array+0x40>)
 80067fa:	4c0c      	ldr	r4, [pc, #48]	; (800682c <__libc_init_array+0x44>)
 80067fc:	f000 fc8a 	bl	8007114 <_init>
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	2600      	movs	r6, #0
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	0800721c 	.word	0x0800721c
 8006824:	0800721c 	.word	0x0800721c
 8006828:	0800721c 	.word	0x0800721c
 800682c:	08007220 	.word	0x08007220

08006830 <memset>:
 8006830:	4402      	add	r2, r0
 8006832:	4603      	mov	r3, r0
 8006834:	4293      	cmp	r3, r2
 8006836:	d100      	bne.n	800683a <memset+0xa>
 8006838:	4770      	bx	lr
 800683a:	f803 1b01 	strb.w	r1, [r3], #1
 800683e:	e7f9      	b.n	8006834 <memset+0x4>

08006840 <roundf>:
 8006840:	ee10 0a10 	vmov	r0, s0
 8006844:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006848:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800684c:	2a16      	cmp	r2, #22
 800684e:	dc15      	bgt.n	800687c <roundf+0x3c>
 8006850:	2a00      	cmp	r2, #0
 8006852:	da08      	bge.n	8006866 <roundf+0x26>
 8006854:	3201      	adds	r2, #1
 8006856:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800685a:	d101      	bne.n	8006860 <roundf+0x20>
 800685c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006860:	ee00 3a10 	vmov	s0, r3
 8006864:	4770      	bx	lr
 8006866:	4908      	ldr	r1, [pc, #32]	; (8006888 <roundf+0x48>)
 8006868:	4111      	asrs	r1, r2
 800686a:	4208      	tst	r0, r1
 800686c:	d0fa      	beq.n	8006864 <roundf+0x24>
 800686e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006872:	4113      	asrs	r3, r2
 8006874:	4403      	add	r3, r0
 8006876:	ea23 0301 	bic.w	r3, r3, r1
 800687a:	e7f1      	b.n	8006860 <roundf+0x20>
 800687c:	2a80      	cmp	r2, #128	; 0x80
 800687e:	d1f1      	bne.n	8006864 <roundf+0x24>
 8006880:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	007fffff 	.word	0x007fffff

0800688c <powf>:
 800688c:	b508      	push	{r3, lr}
 800688e:	ed2d 8b04 	vpush	{d8-d9}
 8006892:	eeb0 9a40 	vmov.f32	s18, s0
 8006896:	eef0 8a60 	vmov.f32	s17, s1
 800689a:	f000 f88f 	bl	80069bc <__ieee754_powf>
 800689e:	4b43      	ldr	r3, [pc, #268]	; (80069ac <powf+0x120>)
 80068a0:	f993 3000 	ldrsb.w	r3, [r3]
 80068a4:	3301      	adds	r3, #1
 80068a6:	eeb0 8a40 	vmov.f32	s16, s0
 80068aa:	d012      	beq.n	80068d2 <powf+0x46>
 80068ac:	eef4 8a68 	vcmp.f32	s17, s17
 80068b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b4:	d60d      	bvs.n	80068d2 <powf+0x46>
 80068b6:	eeb4 9a49 	vcmp.f32	s18, s18
 80068ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068be:	d70d      	bvc.n	80068dc <powf+0x50>
 80068c0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80068c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80068cc:	bf08      	it	eq
 80068ce:	eeb0 8a67 	vmoveq.f32	s16, s15
 80068d2:	eeb0 0a48 	vmov.f32	s0, s16
 80068d6:	ecbd 8b04 	vpop	{d8-d9}
 80068da:	bd08      	pop	{r3, pc}
 80068dc:	eddf 9a34 	vldr	s19, [pc, #208]	; 80069b0 <powf+0x124>
 80068e0:	eeb4 9a69 	vcmp.f32	s18, s19
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	d116      	bne.n	8006918 <powf+0x8c>
 80068ea:	eef4 8a69 	vcmp.f32	s17, s19
 80068ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f2:	d057      	beq.n	80069a4 <powf+0x118>
 80068f4:	eeb0 0a68 	vmov.f32	s0, s17
 80068f8:	f000 fb2a 	bl	8006f50 <finitef>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0e8      	beq.n	80068d2 <powf+0x46>
 8006900:	eef4 8ae9 	vcmpe.f32	s17, s19
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	d5e3      	bpl.n	80068d2 <powf+0x46>
 800690a:	f7ff ff67 	bl	80067dc <__errno>
 800690e:	2321      	movs	r3, #33	; 0x21
 8006910:	6003      	str	r3, [r0, #0]
 8006912:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80069b4 <powf+0x128>
 8006916:	e7dc      	b.n	80068d2 <powf+0x46>
 8006918:	f000 fb1a 	bl	8006f50 <finitef>
 800691c:	bb50      	cbnz	r0, 8006974 <powf+0xe8>
 800691e:	eeb0 0a49 	vmov.f32	s0, s18
 8006922:	f000 fb15 	bl	8006f50 <finitef>
 8006926:	b328      	cbz	r0, 8006974 <powf+0xe8>
 8006928:	eeb0 0a68 	vmov.f32	s0, s17
 800692c:	f000 fb10 	bl	8006f50 <finitef>
 8006930:	b300      	cbz	r0, 8006974 <powf+0xe8>
 8006932:	eeb4 8a48 	vcmp.f32	s16, s16
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	d706      	bvc.n	800694a <powf+0xbe>
 800693c:	f7ff ff4e 	bl	80067dc <__errno>
 8006940:	2321      	movs	r3, #33	; 0x21
 8006942:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8006946:	6003      	str	r3, [r0, #0]
 8006948:	e7c3      	b.n	80068d2 <powf+0x46>
 800694a:	f7ff ff47 	bl	80067dc <__errno>
 800694e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006952:	2322      	movs	r3, #34	; 0x22
 8006954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006958:	6003      	str	r3, [r0, #0]
 800695a:	d508      	bpl.n	800696e <powf+0xe2>
 800695c:	eeb0 0a68 	vmov.f32	s0, s17
 8006960:	f000 fb0a 	bl	8006f78 <rintf>
 8006964:	eeb4 0a68 	vcmp.f32	s0, s17
 8006968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800696c:	d1d1      	bne.n	8006912 <powf+0x86>
 800696e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80069b8 <powf+0x12c>
 8006972:	e7ae      	b.n	80068d2 <powf+0x46>
 8006974:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697c:	d1a9      	bne.n	80068d2 <powf+0x46>
 800697e:	eeb0 0a49 	vmov.f32	s0, s18
 8006982:	f000 fae5 	bl	8006f50 <finitef>
 8006986:	2800      	cmp	r0, #0
 8006988:	d0a3      	beq.n	80068d2 <powf+0x46>
 800698a:	eeb0 0a68 	vmov.f32	s0, s17
 800698e:	f000 fadf 	bl	8006f50 <finitef>
 8006992:	2800      	cmp	r0, #0
 8006994:	d09d      	beq.n	80068d2 <powf+0x46>
 8006996:	f7ff ff21 	bl	80067dc <__errno>
 800699a:	2322      	movs	r3, #34	; 0x22
 800699c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80069b0 <powf+0x124>
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	e796      	b.n	80068d2 <powf+0x46>
 80069a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80069a8:	e793      	b.n	80068d2 <powf+0x46>
 80069aa:	bf00      	nop
 80069ac:	20000690 	.word	0x20000690
 80069b0:	00000000 	.word	0x00000000
 80069b4:	ff800000 	.word	0xff800000
 80069b8:	7f800000 	.word	0x7f800000

080069bc <__ieee754_powf>:
 80069bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c0:	ee10 5a90 	vmov	r5, s1
 80069c4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80069c8:	ed2d 8b02 	vpush	{d8}
 80069cc:	eeb0 8a40 	vmov.f32	s16, s0
 80069d0:	eef0 8a60 	vmov.f32	s17, s1
 80069d4:	f000 8291 	beq.w	8006efa <__ieee754_powf+0x53e>
 80069d8:	ee10 8a10 	vmov	r8, s0
 80069dc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80069e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80069e4:	dc06      	bgt.n	80069f4 <__ieee754_powf+0x38>
 80069e6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80069ea:	dd0a      	ble.n	8006a02 <__ieee754_powf+0x46>
 80069ec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80069f0:	f000 8283 	beq.w	8006efa <__ieee754_powf+0x53e>
 80069f4:	ecbd 8b02 	vpop	{d8}
 80069f8:	48d8      	ldr	r0, [pc, #864]	; (8006d5c <__ieee754_powf+0x3a0>)
 80069fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069fe:	f000 bab5 	b.w	8006f6c <nanf>
 8006a02:	f1b8 0f00 	cmp.w	r8, #0
 8006a06:	da1f      	bge.n	8006a48 <__ieee754_powf+0x8c>
 8006a08:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006a0c:	da2e      	bge.n	8006a6c <__ieee754_powf+0xb0>
 8006a0e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006a12:	f2c0 827b 	blt.w	8006f0c <__ieee754_powf+0x550>
 8006a16:	15fb      	asrs	r3, r7, #23
 8006a18:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006a1c:	fa47 f603 	asr.w	r6, r7, r3
 8006a20:	fa06 f303 	lsl.w	r3, r6, r3
 8006a24:	42bb      	cmp	r3, r7
 8006a26:	f040 8271 	bne.w	8006f0c <__ieee754_powf+0x550>
 8006a2a:	f006 0601 	and.w	r6, r6, #1
 8006a2e:	f1c6 0602 	rsb	r6, r6, #2
 8006a32:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006a36:	d120      	bne.n	8006a7a <__ieee754_powf+0xbe>
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	f280 8264 	bge.w	8006f06 <__ieee754_powf+0x54a>
 8006a3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006a42:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006a46:	e00d      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006a48:	2600      	movs	r6, #0
 8006a4a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006a4e:	d1f0      	bne.n	8006a32 <__ieee754_powf+0x76>
 8006a50:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006a54:	f000 8251 	beq.w	8006efa <__ieee754_powf+0x53e>
 8006a58:	dd0a      	ble.n	8006a70 <__ieee754_powf+0xb4>
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	f280 8250 	bge.w	8006f00 <__ieee754_powf+0x544>
 8006a60:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8006d60 <__ieee754_powf+0x3a4>
 8006a64:	ecbd 8b02 	vpop	{d8}
 8006a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6c:	2602      	movs	r6, #2
 8006a6e:	e7ec      	b.n	8006a4a <__ieee754_powf+0x8e>
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	daf5      	bge.n	8006a60 <__ieee754_powf+0xa4>
 8006a74:	eeb1 0a68 	vneg.f32	s0, s17
 8006a78:	e7f4      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006a7a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006a7e:	d102      	bne.n	8006a86 <__ieee754_powf+0xca>
 8006a80:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006a84:	e7ee      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006a86:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8006a8e:	d108      	bne.n	8006aa2 <__ieee754_powf+0xe6>
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	db05      	blt.n	8006aa2 <__ieee754_powf+0xe6>
 8006a96:	ecbd 8b02 	vpop	{d8}
 8006a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9e:	f000 ba4d 	b.w	8006f3c <__ieee754_sqrtf>
 8006aa2:	f000 fa4e 	bl	8006f42 <fabsf>
 8006aa6:	b124      	cbz	r4, 8006ab2 <__ieee754_powf+0xf6>
 8006aa8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006aac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006ab0:	d117      	bne.n	8006ae2 <__ieee754_powf+0x126>
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	bfbc      	itt	lt
 8006ab6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006aba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006abe:	f1b8 0f00 	cmp.w	r8, #0
 8006ac2:	dacf      	bge.n	8006a64 <__ieee754_powf+0xa8>
 8006ac4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006ac8:	ea54 0306 	orrs.w	r3, r4, r6
 8006acc:	d104      	bne.n	8006ad8 <__ieee754_powf+0x11c>
 8006ace:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006ad2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006ad6:	e7c5      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006ad8:	2e01      	cmp	r6, #1
 8006ada:	d1c3      	bne.n	8006a64 <__ieee754_powf+0xa8>
 8006adc:	eeb1 0a40 	vneg.f32	s0, s0
 8006ae0:	e7c0      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006ae2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8006ae6:	3801      	subs	r0, #1
 8006ae8:	ea56 0300 	orrs.w	r3, r6, r0
 8006aec:	d104      	bne.n	8006af8 <__ieee754_powf+0x13c>
 8006aee:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006af2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006af6:	e7b5      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006af8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006afc:	dd6b      	ble.n	8006bd6 <__ieee754_powf+0x21a>
 8006afe:	4b99      	ldr	r3, [pc, #612]	; (8006d64 <__ieee754_powf+0x3a8>)
 8006b00:	429c      	cmp	r4, r3
 8006b02:	dc06      	bgt.n	8006b12 <__ieee754_powf+0x156>
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	daab      	bge.n	8006a60 <__ieee754_powf+0xa4>
 8006b08:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8006d68 <__ieee754_powf+0x3ac>
 8006b0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006b10:	e7a8      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006b12:	4b96      	ldr	r3, [pc, #600]	; (8006d6c <__ieee754_powf+0x3b0>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	dd02      	ble.n	8006b1e <__ieee754_powf+0x162>
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	dcf5      	bgt.n	8006b08 <__ieee754_powf+0x14c>
 8006b1c:	e7a0      	b.n	8006a60 <__ieee754_powf+0xa4>
 8006b1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b26:	eddf 6a92 	vldr	s13, [pc, #584]	; 8006d70 <__ieee754_powf+0x3b4>
 8006b2a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006b2e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006b32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006b36:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006b3a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006d74 <__ieee754_powf+0x3b8>
 8006b46:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006b4a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006d78 <__ieee754_powf+0x3bc>
 8006b4e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006b52:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006d7c <__ieee754_powf+0x3c0>
 8006b56:	eef0 6a67 	vmov.f32	s13, s15
 8006b5a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006b5e:	ee16 3a90 	vmov	r3, s13
 8006b62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b66:	f023 030f 	bic.w	r3, r3, #15
 8006b6a:	ee00 3a90 	vmov	s1, r3
 8006b6e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8006b72:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006b76:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006b7a:	f025 050f 	bic.w	r5, r5, #15
 8006b7e:	ee07 5a10 	vmov	s14, r5
 8006b82:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006b86:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006b92:	3e01      	subs	r6, #1
 8006b94:	ea56 0200 	orrs.w	r2, r6, r0
 8006b98:	ee07 5a10 	vmov	s14, r5
 8006b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ba0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006ba4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006ba8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006bac:	ee17 4a10 	vmov	r4, s14
 8006bb0:	bf08      	it	eq
 8006bb2:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006bb6:	2c00      	cmp	r4, #0
 8006bb8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006bbc:	f340 8184 	ble.w	8006ec8 <__ieee754_powf+0x50c>
 8006bc0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006bc4:	f340 80fc 	ble.w	8006dc0 <__ieee754_powf+0x404>
 8006bc8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006d68 <__ieee754_powf+0x3ac>
 8006bcc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006bd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006bd4:	e746      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006bd6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8006bda:	bf01      	itttt	eq
 8006bdc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8006d80 <__ieee754_powf+0x3c4>
 8006be0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006be4:	f06f 0217 	mvneq.w	r2, #23
 8006be8:	ee17 4a90 	vmoveq	r4, s15
 8006bec:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006bf0:	bf18      	it	ne
 8006bf2:	2200      	movne	r2, #0
 8006bf4:	3b7f      	subs	r3, #127	; 0x7f
 8006bf6:	4413      	add	r3, r2
 8006bf8:	4a62      	ldr	r2, [pc, #392]	; (8006d84 <__ieee754_powf+0x3c8>)
 8006bfa:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006bfe:	4294      	cmp	r4, r2
 8006c00:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006c04:	dd06      	ble.n	8006c14 <__ieee754_powf+0x258>
 8006c06:	4a60      	ldr	r2, [pc, #384]	; (8006d88 <__ieee754_powf+0x3cc>)
 8006c08:	4294      	cmp	r4, r2
 8006c0a:	f340 80a4 	ble.w	8006d56 <__ieee754_powf+0x39a>
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006c14:	2400      	movs	r4, #0
 8006c16:	4a5d      	ldr	r2, [pc, #372]	; (8006d8c <__ieee754_powf+0x3d0>)
 8006c18:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006c1c:	ee07 1a90 	vmov	s15, r1
 8006c20:	ed92 7a00 	vldr	s14, [r2]
 8006c24:	4a5a      	ldr	r2, [pc, #360]	; (8006d90 <__ieee754_powf+0x3d4>)
 8006c26:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006c2a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006c2e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8006c32:	1049      	asrs	r1, r1, #1
 8006c34:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006c38:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006c3c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006c40:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8006c44:	ee06 1a10 	vmov	s12, r1
 8006c48:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006c4c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006c50:	ee14 7a90 	vmov	r7, s9
 8006c54:	4017      	ands	r7, r2
 8006c56:	ee05 7a90 	vmov	s11, r7
 8006c5a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c62:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006d94 <__ieee754_powf+0x3d8>
 8006c66:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8006c6a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006c6e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8006c72:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006d98 <__ieee754_powf+0x3dc>
 8006c76:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006c7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006d9c <__ieee754_powf+0x3e0>
 8006c7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006c82:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006d70 <__ieee754_powf+0x3b4>
 8006c86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c8a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006da0 <__ieee754_powf+0x3e4>
 8006c8e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006c92:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006da4 <__ieee754_powf+0x3e8>
 8006c96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c9a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006c9e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8006ca2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006ca6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006caa:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006cae:	eef0 7a45 	vmov.f32	s15, s10
 8006cb2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee17 1a90 	vmov	r1, s15
 8006cbe:	4011      	ands	r1, r2
 8006cc0:	ee07 1a90 	vmov	s15, r1
 8006cc4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006cc8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006ccc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006cd0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006cd4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006cd8:	eeb0 6a47 	vmov.f32	s12, s14
 8006cdc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006ce0:	ee16 1a10 	vmov	r1, s12
 8006ce4:	4011      	ands	r1, r2
 8006ce6:	ee06 1a90 	vmov	s13, r1
 8006cea:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006cee:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006da8 <__ieee754_powf+0x3ec>
 8006cf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006dac <__ieee754_powf+0x3f0>
 8006cf6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006cfa:	ee06 1a10 	vmov	s12, r1
 8006cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006db0 <__ieee754_powf+0x3f4>
 8006d06:	492b      	ldr	r1, [pc, #172]	; (8006db4 <__ieee754_powf+0x3f8>)
 8006d08:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006d0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d10:	edd1 7a00 	vldr	s15, [r1]
 8006d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	4b26      	ldr	r3, [pc, #152]	; (8006db8 <__ieee754_powf+0x3fc>)
 8006d1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d22:	eef0 7a47 	vmov.f32	s15, s14
 8006d26:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006d2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d2e:	edd4 0a00 	vldr	s1, [r4]
 8006d32:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee17 3a90 	vmov	r3, s15
 8006d3e:	4013      	ands	r3, r2
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006d48:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006d4c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006d50:	ee77 7a66 	vsub.f32	s15, s14, s13
 8006d54:	e70f      	b.n	8006b76 <__ieee754_powf+0x1ba>
 8006d56:	2401      	movs	r4, #1
 8006d58:	e75d      	b.n	8006c16 <__ieee754_powf+0x25a>
 8006d5a:	bf00      	nop
 8006d5c:	080071f0 	.word	0x080071f0
 8006d60:	00000000 	.word	0x00000000
 8006d64:	3f7ffff7 	.word	0x3f7ffff7
 8006d68:	7149f2ca 	.word	0x7149f2ca
 8006d6c:	3f800007 	.word	0x3f800007
 8006d70:	3eaaaaab 	.word	0x3eaaaaab
 8006d74:	3fb8aa3b 	.word	0x3fb8aa3b
 8006d78:	36eca570 	.word	0x36eca570
 8006d7c:	3fb8aa00 	.word	0x3fb8aa00
 8006d80:	4b800000 	.word	0x4b800000
 8006d84:	001cc471 	.word	0x001cc471
 8006d88:	005db3d6 	.word	0x005db3d6
 8006d8c:	080071f4 	.word	0x080071f4
 8006d90:	fffff000 	.word	0xfffff000
 8006d94:	3e6c3255 	.word	0x3e6c3255
 8006d98:	3e53f142 	.word	0x3e53f142
 8006d9c:	3e8ba305 	.word	0x3e8ba305
 8006da0:	3edb6db7 	.word	0x3edb6db7
 8006da4:	3f19999a 	.word	0x3f19999a
 8006da8:	3f76384f 	.word	0x3f76384f
 8006dac:	3f763800 	.word	0x3f763800
 8006db0:	369dc3a0 	.word	0x369dc3a0
 8006db4:	08007204 	.word	0x08007204
 8006db8:	080071fc 	.word	0x080071fc
 8006dbc:	3338aa3c 	.word	0x3338aa3c
 8006dc0:	f040 8092 	bne.w	8006ee8 <__ieee754_powf+0x52c>
 8006dc4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006dbc <__ieee754_powf+0x400>
 8006dc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006dcc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006dd0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd8:	f73f aef6 	bgt.w	8006bc8 <__ieee754_powf+0x20c>
 8006ddc:	15db      	asrs	r3, r3, #23
 8006dde:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006de2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006de6:	4103      	asrs	r3, r0
 8006de8:	4423      	add	r3, r4
 8006dea:	4949      	ldr	r1, [pc, #292]	; (8006f10 <__ieee754_powf+0x554>)
 8006dec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006df0:	3a7f      	subs	r2, #127	; 0x7f
 8006df2:	4111      	asrs	r1, r2
 8006df4:	ea23 0101 	bic.w	r1, r3, r1
 8006df8:	ee07 1a10 	vmov	s14, r1
 8006dfc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006e00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006e04:	f1c2 0217 	rsb	r2, r2, #23
 8006e08:	4110      	asrs	r0, r2
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e10:	bfb8      	it	lt
 8006e12:	4240      	neglt	r0, r0
 8006e14:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006e18:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006f14 <__ieee754_powf+0x558>
 8006e1c:	ee17 3a10 	vmov	r3, s14
 8006e20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e24:	f023 030f 	bic.w	r3, r3, #15
 8006e28:	ee07 3a10 	vmov	s14, r3
 8006e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e30:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006e34:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006f18 <__ieee754_powf+0x55c>
 8006e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006e40:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006f1c <__ieee754_powf+0x560>
 8006e44:	eeb0 0a67 	vmov.f32	s0, s15
 8006e48:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006e4c:	eeb0 6a40 	vmov.f32	s12, s0
 8006e50:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006e54:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006e58:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006e5c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006f20 <__ieee754_powf+0x564>
 8006e60:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8006f24 <__ieee754_powf+0x568>
 8006e64:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006e68:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006f28 <__ieee754_powf+0x56c>
 8006e6c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006e70:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006f2c <__ieee754_powf+0x570>
 8006e74:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006e78:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006f30 <__ieee754_powf+0x574>
 8006e7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006e80:	eeb0 6a40 	vmov.f32	s12, s0
 8006e84:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006e88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006e8c:	eeb0 7a46 	vmov.f32	s14, s12
 8006e90:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006e94:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006e98:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006e9c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ea4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ea8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006eac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006eb0:	ee10 3a10 	vmov	r3, s0
 8006eb4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ebc:	da1a      	bge.n	8006ef4 <__ieee754_powf+0x538>
 8006ebe:	f000 f8b7 	bl	8007030 <scalbnf>
 8006ec2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006ec6:	e5cd      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006ec8:	4a1a      	ldr	r2, [pc, #104]	; (8006f34 <__ieee754_powf+0x578>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	dd02      	ble.n	8006ed4 <__ieee754_powf+0x518>
 8006ece:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006f38 <__ieee754_powf+0x57c>
 8006ed2:	e67b      	b.n	8006bcc <__ieee754_powf+0x210>
 8006ed4:	d108      	bne.n	8006ee8 <__ieee754_powf+0x52c>
 8006ed6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006eda:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee2:	f6ff af7b 	blt.w	8006ddc <__ieee754_powf+0x420>
 8006ee6:	e7f2      	b.n	8006ece <__ieee754_powf+0x512>
 8006ee8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006eec:	f73f af76 	bgt.w	8006ddc <__ieee754_powf+0x420>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	e78f      	b.n	8006e14 <__ieee754_powf+0x458>
 8006ef4:	ee00 3a10 	vmov	s0, r3
 8006ef8:	e7e3      	b.n	8006ec2 <__ieee754_powf+0x506>
 8006efa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006efe:	e5b1      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006f00:	eeb0 0a68 	vmov.f32	s0, s17
 8006f04:	e5ae      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006f06:	eeb0 0a48 	vmov.f32	s0, s16
 8006f0a:	e5ab      	b.n	8006a64 <__ieee754_powf+0xa8>
 8006f0c:	2600      	movs	r6, #0
 8006f0e:	e590      	b.n	8006a32 <__ieee754_powf+0x76>
 8006f10:	007fffff 	.word	0x007fffff
 8006f14:	3f317218 	.word	0x3f317218
 8006f18:	35bfbe8c 	.word	0x35bfbe8c
 8006f1c:	3f317200 	.word	0x3f317200
 8006f20:	3331bb4c 	.word	0x3331bb4c
 8006f24:	b5ddea0e 	.word	0xb5ddea0e
 8006f28:	388ab355 	.word	0x388ab355
 8006f2c:	bb360b61 	.word	0xbb360b61
 8006f30:	3e2aaaab 	.word	0x3e2aaaab
 8006f34:	43160000 	.word	0x43160000
 8006f38:	0da24260 	.word	0x0da24260

08006f3c <__ieee754_sqrtf>:
 8006f3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006f40:	4770      	bx	lr

08006f42 <fabsf>:
 8006f42:	ee10 3a10 	vmov	r3, s0
 8006f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f4a:	ee00 3a10 	vmov	s0, r3
 8006f4e:	4770      	bx	lr

08006f50 <finitef>:
 8006f50:	b082      	sub	sp, #8
 8006f52:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006f56:	9801      	ldr	r0, [sp, #4]
 8006f58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f5c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006f60:	bfac      	ite	ge
 8006f62:	2000      	movge	r0, #0
 8006f64:	2001      	movlt	r0, #1
 8006f66:	b002      	add	sp, #8
 8006f68:	4770      	bx	lr
	...

08006f6c <nanf>:
 8006f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f74 <nanf+0x8>
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	7fc00000 	.word	0x7fc00000

08006f78 <rintf>:
 8006f78:	ee10 2a10 	vmov	r2, s0
 8006f7c:	b513      	push	{r0, r1, r4, lr}
 8006f7e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006f82:	397f      	subs	r1, #127	; 0x7f
 8006f84:	2916      	cmp	r1, #22
 8006f86:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006f8a:	dc47      	bgt.n	800701c <rintf+0xa4>
 8006f8c:	b32b      	cbz	r3, 8006fda <rintf+0x62>
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	ee10 3a10 	vmov	r3, s0
 8006f94:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8006f98:	da21      	bge.n	8006fde <rintf+0x66>
 8006f9a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8006f9e:	425b      	negs	r3, r3
 8006fa0:	4921      	ldr	r1, [pc, #132]	; (8007028 <rintf+0xb0>)
 8006fa2:	0a5b      	lsrs	r3, r3, #9
 8006fa4:	0d12      	lsrs	r2, r2, #20
 8006fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006faa:	0512      	lsls	r2, r2, #20
 8006fac:	4313      	orrs	r3, r2
 8006fae:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	edd1 6a00 	vldr	s13, [r1]
 8006fba:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006fbe:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006fc2:	eddd 7a01 	vldr	s15, [sp, #4]
 8006fc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fca:	ee17 3a90 	vmov	r3, s15
 8006fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006fd6:	ee00 3a10 	vmov	s0, r3
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	4a13      	ldr	r2, [pc, #76]	; (800702c <rintf+0xb4>)
 8006fe0:	410a      	asrs	r2, r1
 8006fe2:	4213      	tst	r3, r2
 8006fe4:	d0f9      	beq.n	8006fda <rintf+0x62>
 8006fe6:	0854      	lsrs	r4, r2, #1
 8006fe8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006fec:	d006      	beq.n	8006ffc <rintf+0x84>
 8006fee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ff2:	ea23 0304 	bic.w	r3, r3, r4
 8006ff6:	fa42 f101 	asr.w	r1, r2, r1
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <rintf+0xb0>)
 8006ffe:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8007002:	ed90 7a00 	vldr	s14, [r0]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800700e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007012:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007016:	ee30 0a47 	vsub.f32	s0, s0, s14
 800701a:	e7de      	b.n	8006fda <rintf+0x62>
 800701c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007020:	d3db      	bcc.n	8006fda <rintf+0x62>
 8007022:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007026:	e7d8      	b.n	8006fda <rintf+0x62>
 8007028:	0800720c 	.word	0x0800720c
 800702c:	007fffff 	.word	0x007fffff

08007030 <scalbnf>:
 8007030:	ee10 3a10 	vmov	r3, s0
 8007034:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007038:	d025      	beq.n	8007086 <scalbnf+0x56>
 800703a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800703e:	d302      	bcc.n	8007046 <scalbnf+0x16>
 8007040:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007044:	4770      	bx	lr
 8007046:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800704a:	d122      	bne.n	8007092 <scalbnf+0x62>
 800704c:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <scalbnf+0xc8>)
 800704e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80070fc <scalbnf+0xcc>
 8007052:	4298      	cmp	r0, r3
 8007054:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007058:	db16      	blt.n	8007088 <scalbnf+0x58>
 800705a:	ee10 3a10 	vmov	r3, s0
 800705e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007062:	3a19      	subs	r2, #25
 8007064:	4402      	add	r2, r0
 8007066:	2afe      	cmp	r2, #254	; 0xfe
 8007068:	dd15      	ble.n	8007096 <scalbnf+0x66>
 800706a:	ee10 3a10 	vmov	r3, s0
 800706e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007100 <scalbnf+0xd0>
 8007072:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007104 <scalbnf+0xd4>
 8007076:	2b00      	cmp	r3, #0
 8007078:	eeb0 7a67 	vmov.f32	s14, s15
 800707c:	bfb8      	it	lt
 800707e:	eef0 7a66 	vmovlt.f32	s15, s13
 8007082:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007086:	4770      	bx	lr
 8007088:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007108 <scalbnf+0xd8>
 800708c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007090:	4770      	bx	lr
 8007092:	0dd2      	lsrs	r2, r2, #23
 8007094:	e7e6      	b.n	8007064 <scalbnf+0x34>
 8007096:	2a00      	cmp	r2, #0
 8007098:	dd06      	ble.n	80070a8 <scalbnf+0x78>
 800709a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800709e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80070a2:	ee00 3a10 	vmov	s0, r3
 80070a6:	4770      	bx	lr
 80070a8:	f112 0f16 	cmn.w	r2, #22
 80070ac:	da1a      	bge.n	80070e4 <scalbnf+0xb4>
 80070ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80070b2:	4298      	cmp	r0, r3
 80070b4:	ee10 3a10 	vmov	r3, s0
 80070b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070bc:	dd0a      	ble.n	80070d4 <scalbnf+0xa4>
 80070be:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007100 <scalbnf+0xd0>
 80070c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007104 <scalbnf+0xd4>
 80070c6:	eef0 7a40 	vmov.f32	s15, s0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bf18      	it	ne
 80070ce:	eeb0 0a47 	vmovne.f32	s0, s14
 80070d2:	e7db      	b.n	800708c <scalbnf+0x5c>
 80070d4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007108 <scalbnf+0xd8>
 80070d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800710c <scalbnf+0xdc>
 80070dc:	eef0 7a40 	vmov.f32	s15, s0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	e7f3      	b.n	80070cc <scalbnf+0x9c>
 80070e4:	3219      	adds	r2, #25
 80070e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80070ee:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007110 <scalbnf+0xe0>
 80070f2:	ee07 3a10 	vmov	s14, r3
 80070f6:	e7c4      	b.n	8007082 <scalbnf+0x52>
 80070f8:	ffff3cb0 	.word	0xffff3cb0
 80070fc:	4c000000 	.word	0x4c000000
 8007100:	7149f2ca 	.word	0x7149f2ca
 8007104:	f149f2ca 	.word	0xf149f2ca
 8007108:	0da24260 	.word	0x0da24260
 800710c:	8da24260 	.word	0x8da24260
 8007110:	33000000 	.word	0x33000000

08007114 <_init>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr

08007120 <_fini>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr
